// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CloudBindingInitParameters struct {

	// ID of billing account to bind cloud to.
	BillingAccountID *string `json:"billingAccountId,omitempty" tf:"billing_account_id,omitempty"`

	// ID of cloud to bind.
	CloudID *string `json:"cloudId,omitempty" tf:"cloud_id,omitempty"`
}

type CloudBindingObservation struct {

	// ID of billing account to bind cloud to.
	BillingAccountID *string `json:"billingAccountId,omitempty" tf:"billing_account_id,omitempty"`

	// ID of cloud to bind.
	CloudID *string `json:"cloudId,omitempty" tf:"cloud_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CloudBindingParameters struct {

	// ID of billing account to bind cloud to.
	// +kubebuilder:validation:Optional
	BillingAccountID *string `json:"billingAccountId,omitempty" tf:"billing_account_id,omitempty"`

	// ID of cloud to bind.
	// +kubebuilder:validation:Optional
	CloudID *string `json:"cloudId,omitempty" tf:"cloud_id,omitempty"`
}

// CloudBindingSpec defines the desired state of CloudBinding
type CloudBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CloudBindingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CloudBindingInitParameters `json:"initProvider,omitempty"`
}

// CloudBindingStatus defines the observed state of CloudBinding.
type CloudBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CloudBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CloudBinding is the Schema for the CloudBindings API. Bind cloud to billing account.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type CloudBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.billingAccountId) || (has(self.initProvider) && has(self.initProvider.billingAccountId))",message="spec.forProvider.billingAccountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cloudId) || (has(self.initProvider) && has(self.initProvider.cloudId))",message="spec.forProvider.cloudId is a required parameter"
	Spec   CloudBindingSpec   `json:"spec"`
	Status CloudBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudBindingList contains a list of CloudBindings
type CloudBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudBinding `json:"items"`
}

// Repository type metadata.
var (
	CloudBinding_Kind             = "CloudBinding"
	CloudBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CloudBinding_Kind}.String()
	CloudBinding_KindAPIVersion   = CloudBinding_Kind + "." + CRDGroupVersion.String()
	CloudBinding_GroupVersionKind = CRDGroupVersion.WithKind(CloudBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&CloudBinding{}, &CloudBindingList{})
}
