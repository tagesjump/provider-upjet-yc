// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CoreRegistryInitParameters struct {

	// A set of certificate's fingerprints for the IoT Core Registry
	// +listType=set
	Certificates []*string `json:"certificates,omitempty" tf:"certificates,omitempty"`

	// Description of the IoT Core Registry
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Folder ID for the IoT Core Registry
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the IoT Core Registry.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Options for logging for IoT Core Registry
	LogOptions []CoreRegistryLogOptionsInitParameters `json:"logOptions,omitempty" tf:"log_options,omitempty"`

	// IoT Core Device name used to define registry
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Passwords []*string `json:"passwordsSecretRef,omitempty" tf:"-"`
}

type CoreRegistryLogOptionsInitParameters struct {

	// Is logging for registry disabled
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Log entries are written to default log group for specified folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Log entries are written to specified log group
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Minimum log entry level
	MinLevel *string `json:"minLevel,omitempty" tf:"min_level,omitempty"`
}

type CoreRegistryLogOptionsObservation struct {

	// Is logging for registry disabled
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Log entries are written to default log group for specified folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Log entries are written to specified log group
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Minimum log entry level
	MinLevel *string `json:"minLevel,omitempty" tf:"min_level,omitempty"`
}

type CoreRegistryLogOptionsParameters struct {

	// Is logging for registry disabled
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Log entries are written to default log group for specified folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Log entries are written to specified log group
	// +kubebuilder:validation:Optional
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Minimum log entry level
	// +kubebuilder:validation:Optional
	MinLevel *string `json:"minLevel,omitempty" tf:"min_level,omitempty"`
}

type CoreRegistryObservation struct {

	// A set of certificate's fingerprints for the IoT Core Registry
	// +listType=set
	Certificates []*string `json:"certificates,omitempty" tf:"certificates,omitempty"`

	// Creation timestamp of the IoT Core Registry
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Description of the IoT Core Registry
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Folder ID for the IoT Core Registry
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of key/value label pairs to assign to the IoT Core Registry.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Options for logging for IoT Core Registry
	LogOptions []CoreRegistryLogOptionsObservation `json:"logOptions,omitempty" tf:"log_options,omitempty"`

	// IoT Core Device name used to define registry
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CoreRegistryParameters struct {

	// A set of certificate's fingerprints for the IoT Core Registry
	// +kubebuilder:validation:Optional
	// +listType=set
	Certificates []*string `json:"certificates,omitempty" tf:"certificates,omitempty"`

	// Description of the IoT Core Registry
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Folder ID for the IoT Core Registry
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the IoT Core Registry.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Options for logging for IoT Core Registry
	// +kubebuilder:validation:Optional
	LogOptions []CoreRegistryLogOptionsParameters `json:"logOptions,omitempty" tf:"log_options,omitempty"`

	// IoT Core Device name used to define registry
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A set of passwords's id for the IoT Core Registry
	// +kubebuilder:validation:Optional
	PasswordsSecretRef *[]v1.SecretKeySelector `json:"passwordsSecretRef,omitempty" tf:"-"`
}

// CoreRegistrySpec defines the desired state of CoreRegistry
type CoreRegistrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CoreRegistryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CoreRegistryInitParameters `json:"initProvider,omitempty"`
}

// CoreRegistryStatus defines the observed state of CoreRegistry.
type CoreRegistryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CoreRegistryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CoreRegistry is the Schema for the CoreRegistrys API. Allows management of a Yandex.Cloud IoT Core Registry.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type CoreRegistry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CoreRegistrySpec   `json:"spec"`
	Status CoreRegistryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CoreRegistryList contains a list of CoreRegistrys
type CoreRegistryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CoreRegistry `json:"items"`
}

// Repository type metadata.
var (
	CoreRegistry_Kind             = "CoreRegistry"
	CoreRegistry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CoreRegistry_Kind}.String()
	CoreRegistry_KindAPIVersion   = CoreRegistry_Kind + "." + CRDGroupVersion.String()
	CoreRegistry_GroupVersionKind = CRDGroupVersion.WithKind(CoreRegistry_Kind)
)

func init() {
	SchemeBuilder.Register(&CoreRegistry{}, &CoreRegistryList{})
}
