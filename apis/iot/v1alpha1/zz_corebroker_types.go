

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

)




type CoreBrokerInitParameters struct {


// A set of certificate's fingerprints for the IoT Core Broker
// +listType=set
Certificates []*string `json:"certificates,omitempty" tf:"certificates,omitempty"`

// Description of the IoT Core Broker
Description *string `json:"description,omitempty" tf:"description,omitempty"`

// Folder ID for the IoT Core Broker
// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

// Reference to a Folder in resourcemanager to populate folderId.
// +kubebuilder:validation:Optional
FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

// Selector for a Folder in resourcemanager to populate folderId.
// +kubebuilder:validation:Optional
FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

// A set of key/value label pairs to assign to the IoT Core Broker.
// +mapType=granular
Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

// Options for logging for IoT Core Broker
LogOptions []LogOptionsInitParameters `json:"logOptions,omitempty" tf:"log_options,omitempty"`

// IoT Core Broker name used to define broker
Name *string `json:"name,omitempty" tf:"name,omitempty"`
}


type CoreBrokerObservation struct {


// A set of certificate's fingerprints for the IoT Core Broker
// +listType=set
Certificates []*string `json:"certificates,omitempty" tf:"certificates,omitempty"`

// Creation timestamp of the IoT Core Broker
CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

// Description of the IoT Core Broker
Description *string `json:"description,omitempty" tf:"description,omitempty"`

// Folder ID for the IoT Core Broker
FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

ID *string `json:"id,omitempty" tf:"id,omitempty"`

// A set of key/value label pairs to assign to the IoT Core Broker.
// +mapType=granular
Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

// Options for logging for IoT Core Broker
LogOptions []LogOptionsObservation `json:"logOptions,omitempty" tf:"log_options,omitempty"`

// IoT Core Broker name used to define broker
Name *string `json:"name,omitempty" tf:"name,omitempty"`
}


type CoreBrokerParameters struct {


// A set of certificate's fingerprints for the IoT Core Broker
// +kubebuilder:validation:Optional
// +listType=set
Certificates []*string `json:"certificates,omitempty" tf:"certificates,omitempty"`

// Description of the IoT Core Broker
// +kubebuilder:validation:Optional
Description *string `json:"description,omitempty" tf:"description,omitempty"`

// Folder ID for the IoT Core Broker
// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
// +kubebuilder:validation:Optional
FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

// Reference to a Folder in resourcemanager to populate folderId.
// +kubebuilder:validation:Optional
FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

// Selector for a Folder in resourcemanager to populate folderId.
// +kubebuilder:validation:Optional
FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

// A set of key/value label pairs to assign to the IoT Core Broker.
// +kubebuilder:validation:Optional
// +mapType=granular
Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

// Options for logging for IoT Core Broker
// +kubebuilder:validation:Optional
LogOptions []LogOptionsParameters `json:"logOptions,omitempty" tf:"log_options,omitempty"`

// IoT Core Broker name used to define broker
// +kubebuilder:validation:Optional
Name *string `json:"name,omitempty" tf:"name,omitempty"`
}


type LogOptionsInitParameters struct {


// Is logging for broker disabled
Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

// Log entries are written to default log group for specified folder
FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

// Log entries are written to specified log group
LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

// Minimum log entry level
MinLevel *string `json:"minLevel,omitempty" tf:"min_level,omitempty"`
}


type LogOptionsObservation struct {


// Is logging for broker disabled
Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

// Log entries are written to default log group for specified folder
FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

// Log entries are written to specified log group
LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

// Minimum log entry level
MinLevel *string `json:"minLevel,omitempty" tf:"min_level,omitempty"`
}


type LogOptionsParameters struct {


// Is logging for broker disabled
// +kubebuilder:validation:Optional
Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

// Log entries are written to default log group for specified folder
// +kubebuilder:validation:Optional
FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

// Log entries are written to specified log group
// +kubebuilder:validation:Optional
LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

// Minimum log entry level
// +kubebuilder:validation:Optional
MinLevel *string `json:"minLevel,omitempty" tf:"min_level,omitempty"`
}

// CoreBrokerSpec defines the desired state of CoreBroker
type CoreBrokerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider       CoreBrokerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider       CoreBrokerInitParameters `json:"initProvider,omitempty"`
}

// CoreBrokerStatus defines the observed state of CoreBroker.
type CoreBrokerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider          CoreBrokerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion


// CoreBroker is the Schema for the CoreBrokers API. Allows management of a Yandex.Cloud IoT Core Broker.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type CoreBroker struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec              CoreBrokerSpec   `json:"spec"`
	Status            CoreBrokerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CoreBrokerList contains a list of CoreBrokers
type CoreBrokerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CoreBroker `json:"items"`
}

// Repository type metadata.
var (
	CoreBroker_Kind             = "CoreBroker"
	CoreBroker_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CoreBroker_Kind}.String()
	CoreBroker_KindAPIVersion   = CoreBroker_Kind + "." + CRDGroupVersion.String()
	CoreBroker_GroupVersionKind = CRDGroupVersion.WithKind(CoreBroker_Kind)
)

func init() {
	SchemeBuilder.Register(&CoreBroker{}, &CoreBrokerList{})
}
