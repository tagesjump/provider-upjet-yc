// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1alpha12 "github.com/tagesjump/provider-upjet-yc/apis/lockbox/v1alpha1"
	v1alpha1 "github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1"
	v1alpha11 "github.com/tagesjump/provider-upjet-yc/apis/storage/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Function.
func (mg *Function) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FolderIDRef,
		Selector:     mg.Spec.ForProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FolderID")
	}
	mg.Spec.ForProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Mounts); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Mounts[i3].ObjectStorage); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Mounts[i3].ObjectStorage[i4].Bucket),
				Extract:      resource.ExtractParamPath("bucket", false),
				Reference:    mg.Spec.ForProvider.Mounts[i3].ObjectStorage[i4].BucketRef,
				Selector:     mg.Spec.ForProvider.Mounts[i3].ObjectStorage[i4].BucketSelector,
				To: reference.To{
					List:    &v1alpha11.BucketList{},
					Managed: &v1alpha11.Bucket{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Mounts[i3].ObjectStorage[i4].Bucket")
			}
			mg.Spec.ForProvider.Mounts[i3].ObjectStorage[i4].Bucket = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Mounts[i3].ObjectStorage[i4].BucketRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Secrets); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Secrets[i3].ID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Secrets[i3].IDRef,
			Selector:     mg.Spec.ForProvider.Secrets[i3].IDSelector,
			To: reference.To{
				List:    &v1alpha12.SecretList{},
				Managed: &v1alpha12.Secret{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Secrets[i3].ID")
		}
		mg.Spec.ForProvider.Secrets[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Secrets[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Secrets); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Secrets[i3].VersionID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Secrets[i3].VersionIDRef,
			Selector:     mg.Spec.ForProvider.Secrets[i3].VersionIDSelector,
			To: reference.To{
				List:    &v1alpha12.SecretVersionList{},
				Managed: &v1alpha12.SecretVersion{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Secrets[i3].VersionID")
		}
		mg.Spec.ForProvider.Secrets[i3].VersionID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Secrets[i3].VersionIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FolderIDRef,
		Selector:     mg.Spec.InitProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FolderID")
	}
	mg.Spec.InitProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FolderIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Mounts); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Mounts[i3].ObjectStorage); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Mounts[i3].ObjectStorage[i4].Bucket),
				Extract:      resource.ExtractParamPath("bucket", false),
				Reference:    mg.Spec.InitProvider.Mounts[i3].ObjectStorage[i4].BucketRef,
				Selector:     mg.Spec.InitProvider.Mounts[i3].ObjectStorage[i4].BucketSelector,
				To: reference.To{
					List:    &v1alpha11.BucketList{},
					Managed: &v1alpha11.Bucket{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Mounts[i3].ObjectStorage[i4].Bucket")
			}
			mg.Spec.InitProvider.Mounts[i3].ObjectStorage[i4].Bucket = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Mounts[i3].ObjectStorage[i4].BucketRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Secrets); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Secrets[i3].ID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Secrets[i3].IDRef,
			Selector:     mg.Spec.InitProvider.Secrets[i3].IDSelector,
			To: reference.To{
				List:    &v1alpha12.SecretList{},
				Managed: &v1alpha12.Secret{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Secrets[i3].ID")
		}
		mg.Spec.InitProvider.Secrets[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Secrets[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Secrets); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Secrets[i3].VersionID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Secrets[i3].VersionIDRef,
			Selector:     mg.Spec.InitProvider.Secrets[i3].VersionIDSelector,
			To: reference.To{
				List:    &v1alpha12.SecretVersionList{},
				Managed: &v1alpha12.SecretVersion{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Secrets[i3].VersionID")
		}
		mg.Spec.InitProvider.Secrets[i3].VersionID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Secrets[i3].VersionIDRef = rsp.ResolvedReference

	}

	return nil
}
