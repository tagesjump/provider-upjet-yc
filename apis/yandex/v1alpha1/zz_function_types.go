// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AsyncInvocationInitParameters struct {

	// Maximum number of retries for async invocation
	RetriesCount *float64 `json:"retriesCount,omitempty" tf:"retries_count,omitempty"`

	// Service account used for async invocation
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// Target for unsuccessful async invocation
	YmqFailureTarget []YmqFailureTargetInitParameters `json:"ymqFailureTarget,omitempty" tf:"ymq_failure_target,omitempty"`

	// Target for successful async invocation
	YmqSuccessTarget []YmqSuccessTargetInitParameters `json:"ymqSuccessTarget,omitempty" tf:"ymq_success_target,omitempty"`
}

type AsyncInvocationObservation struct {

	// Maximum number of retries for async invocation
	RetriesCount *float64 `json:"retriesCount,omitempty" tf:"retries_count,omitempty"`

	// Service account used for async invocation
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// Target for unsuccessful async invocation
	YmqFailureTarget []YmqFailureTargetObservation `json:"ymqFailureTarget,omitempty" tf:"ymq_failure_target,omitempty"`

	// Target for successful async invocation
	YmqSuccessTarget []YmqSuccessTargetObservation `json:"ymqSuccessTarget,omitempty" tf:"ymq_success_target,omitempty"`
}

type AsyncInvocationParameters struct {

	// Maximum number of retries for async invocation
	// +kubebuilder:validation:Optional
	RetriesCount *float64 `json:"retriesCount,omitempty" tf:"retries_count,omitempty"`

	// Service account used for async invocation
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// Target for unsuccessful async invocation
	// +kubebuilder:validation:Optional
	YmqFailureTarget []YmqFailureTargetParameters `json:"ymqFailureTarget,omitempty" tf:"ymq_failure_target,omitempty"`

	// Target for successful async invocation
	// +kubebuilder:validation:Optional
	YmqSuccessTarget []YmqSuccessTargetParameters `json:"ymqSuccessTarget,omitempty" tf:"ymq_success_target,omitempty"`
}

type ConnectivityInitParameters struct {

	// Network the version will have access to. It's essential to specify network with subnets in all availability zones.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`
}

type ConnectivityObservation struct {

	// Network the version will have access to. It's essential to specify network with subnets in all availability zones.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`
}

type ConnectivityParameters struct {

	// Network the version will have access to. It's essential to specify network with subnets in all availability zones.
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId" tf:"network_id,omitempty"`
}

type ContentInitParameters struct {

	// Filename to zip archive for the version.
	ZipFilename *string `json:"zipFilename,omitempty" tf:"zip_filename,omitempty"`
}

type ContentObservation struct {

	// Filename to zip archive for the version.
	ZipFilename *string `json:"zipFilename,omitempty" tf:"zip_filename,omitempty"`
}

type ContentParameters struct {

	// Filename to zip archive for the version.
	// +kubebuilder:validation:Optional
	ZipFilename *string `json:"zipFilename" tf:"zip_filename,omitempty"`
}

type FunctionInitParameters struct {

	// Config for asynchronous invocations of Yandex Cloud Function.
	AsyncInvocation []AsyncInvocationInitParameters `json:"asyncInvocation,omitempty" tf:"async_invocation,omitempty"`

	// The maximum number of requests processed by a function instance at the same time.
	Concurrency *float64 `json:"concurrency,omitempty" tf:"concurrency,omitempty"`

	// Function version connectivity. If specified the version will be attached to specified network.
	Connectivity []ConnectivityInitParameters `json:"connectivity,omitempty" tf:"connectivity,omitempty"`

	// Version deployment content for Yandex Cloud Function code. Can be only one package or content section. Either package or content section must be specified.
	Content []ContentInitParameters `json:"content,omitempty" tf:"content,omitempty"`

	// Description of the Yandex Cloud Function
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Entrypoint for Yandex Cloud Function
	Entrypoint *string `json:"entrypoint,omitempty" tf:"entrypoint,omitempty"`

	// A set of key/value environment variables for Yandex Cloud Function
	// +mapType=granular
	Environment map[string]*string `json:"environment,omitempty" tf:"environment,omitempty"`

	// Execution timeout in seconds for Yandex Cloud Function
	ExecutionTimeout *string `json:"executionTimeout,omitempty" tf:"execution_timeout,omitempty"`

	// Folder ID for the Yandex Cloud Function
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the Yandex Cloud Function
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Options for logging from Yandex Cloud Function.
	LogOptions []LogOptionsInitParameters `json:"logOptions,omitempty" tf:"log_options,omitempty"`

	// Memory in megabytes (aligned to 128MB) for Yandex Cloud Function
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// Yandex Cloud Function name used to define trigger
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Version deployment package for Yandex Cloud Function code. Can be only one package or content section. Either package or content section must be specified.
	Package []PackageInitParameters `json:"package,omitempty" tf:"package,omitempty"`

	// Runtime for Yandex Cloud Function
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Secrets for Yandex Cloud Function.
	Secrets []SecretsInitParameters `json:"secrets,omitempty" tf:"secrets,omitempty"`

	// Service account ID for Yandex Cloud Function
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// Storage mounts for Yandex Cloud Function.
	StorageMounts []StorageMountsInitParameters `json:"storageMounts,omitempty" tf:"storage_mounts,omitempty"`

	// Tags for Yandex Cloud Function. Tag "$latest" isn't returned.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Tmpfs size for Yandex Cloud Function.
	TmpfsSize *float64 `json:"tmpfsSize,omitempty" tf:"tmpfs_size,omitempty"`

	// User-defined string for current function version. User must change this string any times when function changed. Function will be updated when hash is changed.
	UserHash *string `json:"userHash,omitempty" tf:"user_hash,omitempty"`
}

type FunctionObservation struct {

	// Config for asynchronous invocations of Yandex Cloud Function.
	AsyncInvocation []AsyncInvocationObservation `json:"asyncInvocation,omitempty" tf:"async_invocation,omitempty"`

	// The maximum number of requests processed by a function instance at the same time.
	Concurrency *float64 `json:"concurrency,omitempty" tf:"concurrency,omitempty"`

	// Function version connectivity. If specified the version will be attached to specified network.
	Connectivity []ConnectivityObservation `json:"connectivity,omitempty" tf:"connectivity,omitempty"`

	// Version deployment content for Yandex Cloud Function code. Can be only one package or content section. Either package or content section must be specified.
	Content []ContentObservation `json:"content,omitempty" tf:"content,omitempty"`

	// Creation timestamp of the Yandex Cloud Function.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Description of the Yandex Cloud Function
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Entrypoint for Yandex Cloud Function
	Entrypoint *string `json:"entrypoint,omitempty" tf:"entrypoint,omitempty"`

	// A set of key/value environment variables for Yandex Cloud Function
	// +mapType=granular
	Environment map[string]*string `json:"environment,omitempty" tf:"environment,omitempty"`

	// Execution timeout in seconds for Yandex Cloud Function
	ExecutionTimeout *string `json:"executionTimeout,omitempty" tf:"execution_timeout,omitempty"`

	// Folder ID for the Yandex Cloud Function
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Secret's id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Image size for Yandex Cloud Function.
	ImageSize *float64 `json:"imageSize,omitempty" tf:"image_size,omitempty"`

	// A set of key/value label pairs to assign to the Yandex Cloud Function
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Options for logging from Yandex Cloud Function.
	LogOptions []LogOptionsObservation `json:"logOptions,omitempty" tf:"log_options,omitempty"`

	// Loggroup ID size for Yandex Cloud Function.
	LoggroupID *string `json:"loggroupId,omitempty" tf:"loggroup_id,omitempty"`

	// Memory in megabytes (aligned to 128MB) for Yandex Cloud Function
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// Yandex Cloud Function name used to define trigger
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Version deployment package for Yandex Cloud Function code. Can be only one package or content section. Either package or content section must be specified.
	Package []PackageObservation `json:"package,omitempty" tf:"package,omitempty"`

	// Runtime for Yandex Cloud Function
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Secrets for Yandex Cloud Function.
	Secrets []SecretsObservation `json:"secrets,omitempty" tf:"secrets,omitempty"`

	// Service account ID for Yandex Cloud Function
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// Storage mounts for Yandex Cloud Function.
	StorageMounts []StorageMountsObservation `json:"storageMounts,omitempty" tf:"storage_mounts,omitempty"`

	// Tags for Yandex Cloud Function. Tag "$latest" isn't returned.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Tmpfs size for Yandex Cloud Function.
	TmpfsSize *float64 `json:"tmpfsSize,omitempty" tf:"tmpfs_size,omitempty"`

	// User-defined string for current function version. User must change this string any times when function changed. Function will be updated when hash is changed.
	UserHash *string `json:"userHash,omitempty" tf:"user_hash,omitempty"`

	// Version for Yandex Cloud Function.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type FunctionParameters struct {

	// Config for asynchronous invocations of Yandex Cloud Function.
	// +kubebuilder:validation:Optional
	AsyncInvocation []AsyncInvocationParameters `json:"asyncInvocation,omitempty" tf:"async_invocation,omitempty"`

	// The maximum number of requests processed by a function instance at the same time.
	// +kubebuilder:validation:Optional
	Concurrency *float64 `json:"concurrency,omitempty" tf:"concurrency,omitempty"`

	// Function version connectivity. If specified the version will be attached to specified network.
	// +kubebuilder:validation:Optional
	Connectivity []ConnectivityParameters `json:"connectivity,omitempty" tf:"connectivity,omitempty"`

	// Version deployment content for Yandex Cloud Function code. Can be only one package or content section. Either package or content section must be specified.
	// +kubebuilder:validation:Optional
	Content []ContentParameters `json:"content,omitempty" tf:"content,omitempty"`

	// Description of the Yandex Cloud Function
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Entrypoint for Yandex Cloud Function
	// +kubebuilder:validation:Optional
	Entrypoint *string `json:"entrypoint,omitempty" tf:"entrypoint,omitempty"`

	// A set of key/value environment variables for Yandex Cloud Function
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Environment map[string]*string `json:"environment,omitempty" tf:"environment,omitempty"`

	// Execution timeout in seconds for Yandex Cloud Function
	// +kubebuilder:validation:Optional
	ExecutionTimeout *string `json:"executionTimeout,omitempty" tf:"execution_timeout,omitempty"`

	// Folder ID for the Yandex Cloud Function
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the Yandex Cloud Function
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Options for logging from Yandex Cloud Function.
	// +kubebuilder:validation:Optional
	LogOptions []LogOptionsParameters `json:"logOptions,omitempty" tf:"log_options,omitempty"`

	// Memory in megabytes (aligned to 128MB) for Yandex Cloud Function
	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// Yandex Cloud Function name used to define trigger
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Version deployment package for Yandex Cloud Function code. Can be only one package or content section. Either package or content section must be specified.
	// +kubebuilder:validation:Optional
	Package []PackageParameters `json:"package,omitempty" tf:"package,omitempty"`

	// Runtime for Yandex Cloud Function
	// +kubebuilder:validation:Optional
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// Secrets for Yandex Cloud Function.
	// +kubebuilder:validation:Optional
	Secrets []SecretsParameters `json:"secrets,omitempty" tf:"secrets,omitempty"`

	// Service account ID for Yandex Cloud Function
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// Storage mounts for Yandex Cloud Function.
	// +kubebuilder:validation:Optional
	StorageMounts []StorageMountsParameters `json:"storageMounts,omitempty" tf:"storage_mounts,omitempty"`

	// Tags for Yandex Cloud Function. Tag "$latest" isn't returned.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Tmpfs size for Yandex Cloud Function.
	// +kubebuilder:validation:Optional
	TmpfsSize *float64 `json:"tmpfsSize,omitempty" tf:"tmpfs_size,omitempty"`

	// User-defined string for current function version. User must change this string any times when function changed. Function will be updated when hash is changed.
	// +kubebuilder:validation:Optional
	UserHash *string `json:"userHash,omitempty" tf:"user_hash,omitempty"`
}

type LogOptionsInitParameters struct {

	// Is logging from function disabled
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Folder ID for the Yandex Cloud Function
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Log entries are written to specified log group
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Minimum log entry level
	MinLevel *string `json:"minLevel,omitempty" tf:"min_level,omitempty"`
}

type LogOptionsObservation struct {

	// Is logging from function disabled
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Folder ID for the Yandex Cloud Function
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Log entries are written to specified log group
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Minimum log entry level
	MinLevel *string `json:"minLevel,omitempty" tf:"min_level,omitempty"`
}

type LogOptionsParameters struct {

	// Is logging from function disabled
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Folder ID for the Yandex Cloud Function
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Log entries are written to specified log group
	// +kubebuilder:validation:Optional
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Minimum log entry level
	// +kubebuilder:validation:Optional
	MinLevel *string `json:"minLevel,omitempty" tf:"min_level,omitempty"`
}

type PackageInitParameters struct {

	// Name of the bucket that stores the code for the version.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Name of the object in the bucket that stores the code for the version.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`

	// SHA256 hash of the version deployment package.
	Sha256 *string `json:"sha256,omitempty" tf:"sha_256,omitempty"`
}

type PackageObservation struct {

	// Name of the bucket that stores the code for the version.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Name of the object in the bucket that stores the code for the version.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`

	// SHA256 hash of the version deployment package.
	Sha256 *string `json:"sha256,omitempty" tf:"sha_256,omitempty"`
}

type PackageParameters struct {

	// Name of the bucket that stores the code for the version.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// Name of the object in the bucket that stores the code for the version.
	// +kubebuilder:validation:Optional
	ObjectName *string `json:"objectName" tf:"object_name,omitempty"`

	// SHA256 hash of the version deployment package.
	// +kubebuilder:validation:Optional
	Sha256 *string `json:"sha256,omitempty" tf:"sha_256,omitempty"`
}

type SecretsInitParameters struct {

	// Function's environment variable in which secret's value will be stored.
	EnvironmentVariable *string `json:"environmentVariable,omitempty" tf:"environment_variable,omitempty"`

	// Secret's id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Secret's entries key which value will be stored in environment variable.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Secret's version id.
	VersionID *string `json:"versionId,omitempty" tf:"version_id,omitempty"`
}

type SecretsObservation struct {

	// Function's environment variable in which secret's value will be stored.
	EnvironmentVariable *string `json:"environmentVariable,omitempty" tf:"environment_variable,omitempty"`

	// Secret's id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Secret's entries key which value will be stored in environment variable.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Secret's version id.
	VersionID *string `json:"versionId,omitempty" tf:"version_id,omitempty"`
}

type SecretsParameters struct {

	// Function's environment variable in which secret's value will be stored.
	// +kubebuilder:validation:Optional
	EnvironmentVariable *string `json:"environmentVariable" tf:"environment_variable,omitempty"`

	// Secret's id.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Secret's entries key which value will be stored in environment variable.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// Secret's version id.
	// +kubebuilder:validation:Optional
	VersionID *string `json:"versionId" tf:"version_id,omitempty"`
}

type StorageMountsInitParameters struct {

	// Name of the mounting bucket.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Name of the mount point. The directory where the bucket is mounted will be accessible at the /function/storage/<mount_point> path.
	MountPointName *string `json:"mountPointName,omitempty" tf:"mount_point_name,omitempty"`

	// Prefix within the bucket. If you leave this field empty, the entire bucket will be mounted.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Mount the bucket in read-only mode.
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`
}

type StorageMountsObservation struct {

	// Name of the mounting bucket.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Name of the mount point. The directory where the bucket is mounted will be accessible at the /function/storage/<mount_point> path.
	MountPointName *string `json:"mountPointName,omitempty" tf:"mount_point_name,omitempty"`

	// Prefix within the bucket. If you leave this field empty, the entire bucket will be mounted.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Mount the bucket in read-only mode.
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`
}

type StorageMountsParameters struct {

	// Name of the mounting bucket.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Name of the mount point. The directory where the bucket is mounted will be accessible at the /function/storage/<mount_point> path.
	// +kubebuilder:validation:Optional
	MountPointName *string `json:"mountPointName" tf:"mount_point_name,omitempty"`

	// Prefix within the bucket. If you leave this field empty, the entire bucket will be mounted.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Mount the bucket in read-only mode.
	// +kubebuilder:validation:Optional
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`
}

type YmqFailureTargetInitParameters struct {

	// YMQ ARN
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Service account ID for Yandex Cloud Function
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`
}

type YmqFailureTargetObservation struct {

	// YMQ ARN
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Service account ID for Yandex Cloud Function
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`
}

type YmqFailureTargetParameters struct {

	// YMQ ARN
	// +kubebuilder:validation:Optional
	Arn *string `json:"arn" tf:"arn,omitempty"`

	// Service account ID for Yandex Cloud Function
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId" tf:"service_account_id,omitempty"`
}

type YmqSuccessTargetInitParameters struct {

	// YMQ ARN
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Service account used for writing result to queue
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`
}

type YmqSuccessTargetObservation struct {

	// YMQ ARN
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Service account used for writing result to queue
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`
}

type YmqSuccessTargetParameters struct {

	// YMQ ARN
	// +kubebuilder:validation:Optional
	Arn *string `json:"arn" tf:"arn,omitempty"`

	// Service account used for writing result to queue
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId" tf:"service_account_id,omitempty"`
}

// FunctionSpec defines the desired state of Function
type FunctionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FunctionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FunctionInitParameters `json:"initProvider,omitempty"`
}

// FunctionStatus defines the observed state of Function.
type FunctionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FunctionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Function is the Schema for the Functions API. Allows management of a Yandex Cloud Function.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type Function struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.entrypoint) || (has(self.initProvider) && has(self.initProvider.entrypoint))",message="spec.forProvider.entrypoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.memory) || (has(self.initProvider) && has(self.initProvider.memory))",message="spec.forProvider.memory is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.runtime) || (has(self.initProvider) && has(self.initProvider.runtime))",message="spec.forProvider.runtime is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userHash) || (has(self.initProvider) && has(self.initProvider.userHash))",message="spec.forProvider.userHash is a required parameter"
	Spec   FunctionSpec   `json:"spec"`
	Status FunctionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FunctionList contains a list of Functions
type FunctionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Function `json:"items"`
}

// Repository type metadata.
var (
	Function_Kind             = "Function"
	Function_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Function_Kind}.String()
	Function_KindAPIVersion   = Function_Kind + "." + CRDGroupVersion.String()
	Function_GroupVersionKind = CRDGroupVersion.WithKind(Function_Kind)
)

func init() {
	SchemeBuilder.Register(&Function{}, &FunctionList{})
}
