// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1alpha1 "github.com/tagesjump/provider-upjet-yc/apis/iam/v1alpha1"
	v1alpha12 "github.com/tagesjump/provider-upjet-yc/apis/kms/v1alpha1"
	v1alpha11 "github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1"
	common "github.com/tagesjump/provider-upjet-yc/config/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Bucket.
func (mg *Bucket) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AccessKey),
		Extract:      common.ExtractAccessKey(),
		Reference:    mg.Spec.ForProvider.AccessKeyRef,
		Selector:     mg.Spec.ForProvider.AccessKeySelector,
		To: reference.To{
			List:    &v1alpha1.ServiceAccountStaticAccessKeyList{},
			Managed: &v1alpha1.ServiceAccountStaticAccessKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AccessKey")
	}
	mg.Spec.ForProvider.AccessKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AccessKeyRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FolderIDRef,
		Selector:     mg.Spec.ForProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha11.FolderList{},
			Managed: &v1alpha11.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FolderID")
	}
	mg.Spec.ForProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Logging); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Logging[i3].TargetBucket),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Logging[i3].TargetBucketRef,
			Selector:     mg.Spec.ForProvider.Logging[i3].TargetBucketSelector,
			To: reference.To{
				List:    &BucketList{},
				Managed: &Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Logging[i3].TargetBucket")
		}
		mg.Spec.ForProvider.Logging[i3].TargetBucket = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Logging[i3].TargetBucketRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ServerSideEncryptionConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ServerSideEncryptionConfiguration[i3].Rule); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault[i5].KMSMasterKeyID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault[i5].KMSMasterKeyIDRef,
					Selector:     mg.Spec.ForProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault[i5].KMSMasterKeyIDSelector,
					To: reference.To{
						List:    &v1alpha12.SymmetricKeyList{},
						Managed: &v1alpha12.SymmetricKey{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault[i5].KMSMasterKeyID")
				}
				mg.Spec.ForProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault[i5].KMSMasterKeyID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault[i5].KMSMasterKeyIDRef = rsp.ResolvedReference

			}
		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AccessKey),
		Extract:      common.ExtractAccessKey(),
		Reference:    mg.Spec.InitProvider.AccessKeyRef,
		Selector:     mg.Spec.InitProvider.AccessKeySelector,
		To: reference.To{
			List:    &v1alpha1.ServiceAccountStaticAccessKeyList{},
			Managed: &v1alpha1.ServiceAccountStaticAccessKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AccessKey")
	}
	mg.Spec.InitProvider.AccessKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AccessKeyRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FolderIDRef,
		Selector:     mg.Spec.InitProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha11.FolderList{},
			Managed: &v1alpha11.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FolderID")
	}
	mg.Spec.InitProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FolderIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Logging); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Logging[i3].TargetBucket),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Logging[i3].TargetBucketRef,
			Selector:     mg.Spec.InitProvider.Logging[i3].TargetBucketSelector,
			To: reference.To{
				List:    &BucketList{},
				Managed: &Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Logging[i3].TargetBucket")
		}
		mg.Spec.InitProvider.Logging[i3].TargetBucket = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Logging[i3].TargetBucketRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ServerSideEncryptionConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ServerSideEncryptionConfiguration[i3].Rule); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault[i5].KMSMasterKeyID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault[i5].KMSMasterKeyIDRef,
					Selector:     mg.Spec.InitProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault[i5].KMSMasterKeyIDSelector,
					To: reference.To{
						List:    &v1alpha12.SymmetricKeyList{},
						Managed: &v1alpha12.SymmetricKey{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault[i5].KMSMasterKeyID")
				}
				mg.Spec.InitProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault[i5].KMSMasterKeyID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.ServerSideEncryptionConfiguration[i3].Rule[i4].ApplyServerSideEncryptionByDefault[i5].KMSMasterKeyIDRef = rsp.ResolvedReference

			}
		}
	}

	return nil
}

// ResolveReferences of this Object.
func (mg *Object) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AccessKey),
		Extract:      common.ExtractAccessKey(),
		Reference:    mg.Spec.ForProvider.AccessKeyRef,
		Selector:     mg.Spec.ForProvider.AccessKeySelector,
		To: reference.To{
			List:    &v1alpha1.ServiceAccountStaticAccessKeyList{},
			Managed: &v1alpha1.ServiceAccountStaticAccessKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AccessKey")
	}
	mg.Spec.ForProvider.AccessKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AccessKeyRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Bucket),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.BucketRef,
		Selector:     mg.Spec.ForProvider.BucketSelector,
		To: reference.To{
			List:    &BucketList{},
			Managed: &Bucket{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Bucket")
	}
	mg.Spec.ForProvider.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BucketRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AccessKey),
		Extract:      common.ExtractAccessKey(),
		Reference:    mg.Spec.InitProvider.AccessKeyRef,
		Selector:     mg.Spec.InitProvider.AccessKeySelector,
		To: reference.To{
			List:    &v1alpha1.ServiceAccountStaticAccessKeyList{},
			Managed: &v1alpha1.ServiceAccountStaticAccessKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AccessKey")
	}
	mg.Spec.InitProvider.AccessKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AccessKeyRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Bucket),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.BucketRef,
		Selector:     mg.Spec.InitProvider.BucketSelector,
		To: reference.To{
			List:    &BucketList{},
			Managed: &Bucket{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Bucket")
	}
	mg.Spec.InitProvider.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BucketRef = rsp.ResolvedReference

	return nil
}
