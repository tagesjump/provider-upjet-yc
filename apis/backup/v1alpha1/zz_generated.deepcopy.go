//go:build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExecuteByTimeInitParameters) DeepCopyInto(out *ExecuteByTimeInitParameters) {
	*out = *in
	if in.IncludeLastDayOfMonth != nil {
		in, out := &in.IncludeLastDayOfMonth, &out.IncludeLastDayOfMonth
		*out = new(bool)
		**out = **in
	}
	if in.Monthdays != nil {
		in, out := &in.Monthdays, &out.Monthdays
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Months != nil {
		in, out := &in.Months, &out.Months
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.RepeatAt != nil {
		in, out := &in.RepeatAt, &out.RepeatAt
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepeatEvery != nil {
		in, out := &in.RepeatEvery, &out.RepeatEvery
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Weekdays != nil {
		in, out := &in.Weekdays, &out.Weekdays
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExecuteByTimeInitParameters.
func (in *ExecuteByTimeInitParameters) DeepCopy() *ExecuteByTimeInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExecuteByTimeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExecuteByTimeObservation) DeepCopyInto(out *ExecuteByTimeObservation) {
	*out = *in
	if in.IncludeLastDayOfMonth != nil {
		in, out := &in.IncludeLastDayOfMonth, &out.IncludeLastDayOfMonth
		*out = new(bool)
		**out = **in
	}
	if in.Monthdays != nil {
		in, out := &in.Monthdays, &out.Monthdays
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Months != nil {
		in, out := &in.Months, &out.Months
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.RepeatAt != nil {
		in, out := &in.RepeatAt, &out.RepeatAt
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepeatEvery != nil {
		in, out := &in.RepeatEvery, &out.RepeatEvery
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Weekdays != nil {
		in, out := &in.Weekdays, &out.Weekdays
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExecuteByTimeObservation.
func (in *ExecuteByTimeObservation) DeepCopy() *ExecuteByTimeObservation {
	if in == nil {
		return nil
	}
	out := new(ExecuteByTimeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExecuteByTimeParameters) DeepCopyInto(out *ExecuteByTimeParameters) {
	*out = *in
	if in.IncludeLastDayOfMonth != nil {
		in, out := &in.IncludeLastDayOfMonth, &out.IncludeLastDayOfMonth
		*out = new(bool)
		**out = **in
	}
	if in.Monthdays != nil {
		in, out := &in.Monthdays, &out.Monthdays
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Months != nil {
		in, out := &in.Months, &out.Months
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.RepeatAt != nil {
		in, out := &in.RepeatAt, &out.RepeatAt
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepeatEvery != nil {
		in, out := &in.RepeatEvery, &out.RepeatEvery
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Weekdays != nil {
		in, out := &in.Weekdays, &out.Weekdays
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExecuteByTimeParameters.
func (in *ExecuteByTimeParameters) DeepCopy() *ExecuteByTimeParameters {
	if in == nil {
		return nil
	}
	out := new(ExecuteByTimeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Policy) DeepCopyInto(out *Policy) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Policy.
func (in *Policy) DeepCopy() *Policy {
	if in == nil {
		return nil
	}
	out := new(Policy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Policy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyInitParameters) DeepCopyInto(out *PolicyInitParameters) {
	*out = *in
	if in.ArchiveName != nil {
		in, out := &in.ArchiveName, &out.ArchiveName
		*out = new(string)
		**out = **in
	}
	if in.Cbt != nil {
		in, out := &in.Cbt, &out.Cbt
		*out = new(string)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.FastBackupEnabled != nil {
		in, out := &in.FastBackupEnabled, &out.FastBackupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.MultiVolumeSnapshottingEnabled != nil {
		in, out := &in.MultiVolumeSnapshottingEnabled, &out.MultiVolumeSnapshottingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceWindowEnabled != nil {
		in, out := &in.PerformanceWindowEnabled, &out.PerformanceWindowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PreserveFileSecuritySettings != nil {
		in, out := &in.PreserveFileSecuritySettings, &out.PreserveFileSecuritySettings
		*out = new(bool)
		**out = **in
	}
	if in.QuiesceSnapshottingEnabled != nil {
		in, out := &in.QuiesceSnapshottingEnabled, &out.QuiesceSnapshottingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Reattempts != nil {
		in, out := &in.Reattempts, &out.Reattempts
		*out = make([]ReattemptsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Retention != nil {
		in, out := &in.Retention, &out.Retention
		*out = make([]RetentionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Scheduling != nil {
		in, out := &in.Scheduling, &out.Scheduling
		*out = make([]SchedulingInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SilentModeEnabled != nil {
		in, out := &in.SilentModeEnabled, &out.SilentModeEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SplittingBytes != nil {
		in, out := &in.SplittingBytes, &out.SplittingBytes
		*out = new(string)
		**out = **in
	}
	if in.VMSnapshotReattempts != nil {
		in, out := &in.VMSnapshotReattempts, &out.VMSnapshotReattempts
		*out = make([]VMSnapshotReattemptsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VssProvider != nil {
		in, out := &in.VssProvider, &out.VssProvider
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyInitParameters.
func (in *PolicyInitParameters) DeepCopy() *PolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyList) DeepCopyInto(out *PolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Policy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyList.
func (in *PolicyList) DeepCopy() *PolicyList {
	if in == nil {
		return nil
	}
	out := new(PolicyList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyObservation) DeepCopyInto(out *PolicyObservation) {
	*out = *in
	if in.ArchiveName != nil {
		in, out := &in.ArchiveName, &out.ArchiveName
		*out = new(string)
		**out = **in
	}
	if in.Cbt != nil {
		in, out := &in.Cbt, &out.Cbt
		*out = new(string)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.FastBackupEnabled != nil {
		in, out := &in.FastBackupEnabled, &out.FastBackupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MultiVolumeSnapshottingEnabled != nil {
		in, out := &in.MultiVolumeSnapshottingEnabled, &out.MultiVolumeSnapshottingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceWindowEnabled != nil {
		in, out := &in.PerformanceWindowEnabled, &out.PerformanceWindowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PreserveFileSecuritySettings != nil {
		in, out := &in.PreserveFileSecuritySettings, &out.PreserveFileSecuritySettings
		*out = new(bool)
		**out = **in
	}
	if in.QuiesceSnapshottingEnabled != nil {
		in, out := &in.QuiesceSnapshottingEnabled, &out.QuiesceSnapshottingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Reattempts != nil {
		in, out := &in.Reattempts, &out.Reattempts
		*out = make([]ReattemptsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Retention != nil {
		in, out := &in.Retention, &out.Retention
		*out = make([]RetentionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Scheduling != nil {
		in, out := &in.Scheduling, &out.Scheduling
		*out = make([]SchedulingObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SilentModeEnabled != nil {
		in, out := &in.SilentModeEnabled, &out.SilentModeEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SplittingBytes != nil {
		in, out := &in.SplittingBytes, &out.SplittingBytes
		*out = new(string)
		**out = **in
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		*out = new(string)
		**out = **in
	}
	if in.VMSnapshotReattempts != nil {
		in, out := &in.VMSnapshotReattempts, &out.VMSnapshotReattempts
		*out = make([]VMSnapshotReattemptsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VssProvider != nil {
		in, out := &in.VssProvider, &out.VssProvider
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyObservation.
func (in *PolicyObservation) DeepCopy() *PolicyObservation {
	if in == nil {
		return nil
	}
	out := new(PolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyParameters) DeepCopyInto(out *PolicyParameters) {
	*out = *in
	if in.ArchiveName != nil {
		in, out := &in.ArchiveName, &out.ArchiveName
		*out = new(string)
		**out = **in
	}
	if in.Cbt != nil {
		in, out := &in.Cbt, &out.Cbt
		*out = new(string)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.FastBackupEnabled != nil {
		in, out := &in.FastBackupEnabled, &out.FastBackupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.MultiVolumeSnapshottingEnabled != nil {
		in, out := &in.MultiVolumeSnapshottingEnabled, &out.MultiVolumeSnapshottingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceWindowEnabled != nil {
		in, out := &in.PerformanceWindowEnabled, &out.PerformanceWindowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PreserveFileSecuritySettings != nil {
		in, out := &in.PreserveFileSecuritySettings, &out.PreserveFileSecuritySettings
		*out = new(bool)
		**out = **in
	}
	if in.QuiesceSnapshottingEnabled != nil {
		in, out := &in.QuiesceSnapshottingEnabled, &out.QuiesceSnapshottingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Reattempts != nil {
		in, out := &in.Reattempts, &out.Reattempts
		*out = make([]ReattemptsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Retention != nil {
		in, out := &in.Retention, &out.Retention
		*out = make([]RetentionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Scheduling != nil {
		in, out := &in.Scheduling, &out.Scheduling
		*out = make([]SchedulingParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SilentModeEnabled != nil {
		in, out := &in.SilentModeEnabled, &out.SilentModeEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SplittingBytes != nil {
		in, out := &in.SplittingBytes, &out.SplittingBytes
		*out = new(string)
		**out = **in
	}
	if in.VMSnapshotReattempts != nil {
		in, out := &in.VMSnapshotReattempts, &out.VMSnapshotReattempts
		*out = make([]VMSnapshotReattemptsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VssProvider != nil {
		in, out := &in.VssProvider, &out.VssProvider
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyParameters.
func (in *PolicyParameters) DeepCopy() *PolicyParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicySpec) DeepCopyInto(out *PolicySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicySpec.
func (in *PolicySpec) DeepCopy() *PolicySpec {
	if in == nil {
		return nil
	}
	out := new(PolicySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyStatus) DeepCopyInto(out *PolicyStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyStatus.
func (in *PolicyStatus) DeepCopy() *PolicyStatus {
	if in == nil {
		return nil
	}
	out := new(PolicyStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReattemptsInitParameters) DeepCopyInto(out *ReattemptsInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(string)
		**out = **in
	}
	if in.MaxAttempts != nil {
		in, out := &in.MaxAttempts, &out.MaxAttempts
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReattemptsInitParameters.
func (in *ReattemptsInitParameters) DeepCopy() *ReattemptsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ReattemptsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReattemptsObservation) DeepCopyInto(out *ReattemptsObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(string)
		**out = **in
	}
	if in.MaxAttempts != nil {
		in, out := &in.MaxAttempts, &out.MaxAttempts
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReattemptsObservation.
func (in *ReattemptsObservation) DeepCopy() *ReattemptsObservation {
	if in == nil {
		return nil
	}
	out := new(ReattemptsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReattemptsParameters) DeepCopyInto(out *ReattemptsParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(string)
		**out = **in
	}
	if in.MaxAttempts != nil {
		in, out := &in.MaxAttempts, &out.MaxAttempts
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReattemptsParameters.
func (in *ReattemptsParameters) DeepCopy() *ReattemptsParameters {
	if in == nil {
		return nil
	}
	out := new(ReattemptsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RetentionInitParameters) DeepCopyInto(out *RetentionInitParameters) {
	*out = *in
	if in.AfterBackup != nil {
		in, out := &in.AfterBackup, &out.AfterBackup
		*out = new(bool)
		**out = **in
	}
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]RulesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RetentionInitParameters.
func (in *RetentionInitParameters) DeepCopy() *RetentionInitParameters {
	if in == nil {
		return nil
	}
	out := new(RetentionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RetentionObservation) DeepCopyInto(out *RetentionObservation) {
	*out = *in
	if in.AfterBackup != nil {
		in, out := &in.AfterBackup, &out.AfterBackup
		*out = new(bool)
		**out = **in
	}
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]RulesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RetentionObservation.
func (in *RetentionObservation) DeepCopy() *RetentionObservation {
	if in == nil {
		return nil
	}
	out := new(RetentionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RetentionParameters) DeepCopyInto(out *RetentionParameters) {
	*out = *in
	if in.AfterBackup != nil {
		in, out := &in.AfterBackup, &out.AfterBackup
		*out = new(bool)
		**out = **in
	}
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]RulesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RetentionParameters.
func (in *RetentionParameters) DeepCopy() *RetentionParameters {
	if in == nil {
		return nil
	}
	out := new(RetentionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RulesInitParameters) DeepCopyInto(out *RulesInitParameters) {
	*out = *in
	if in.MaxAge != nil {
		in, out := &in.MaxAge, &out.MaxAge
		*out = new(string)
		**out = **in
	}
	if in.MaxCount != nil {
		in, out := &in.MaxCount, &out.MaxCount
		*out = new(float64)
		**out = **in
	}
	if in.RepeatPeriod != nil {
		in, out := &in.RepeatPeriod, &out.RepeatPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RulesInitParameters.
func (in *RulesInitParameters) DeepCopy() *RulesInitParameters {
	if in == nil {
		return nil
	}
	out := new(RulesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RulesObservation) DeepCopyInto(out *RulesObservation) {
	*out = *in
	if in.MaxAge != nil {
		in, out := &in.MaxAge, &out.MaxAge
		*out = new(string)
		**out = **in
	}
	if in.MaxCount != nil {
		in, out := &in.MaxCount, &out.MaxCount
		*out = new(float64)
		**out = **in
	}
	if in.RepeatPeriod != nil {
		in, out := &in.RepeatPeriod, &out.RepeatPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RulesObservation.
func (in *RulesObservation) DeepCopy() *RulesObservation {
	if in == nil {
		return nil
	}
	out := new(RulesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RulesParameters) DeepCopyInto(out *RulesParameters) {
	*out = *in
	if in.MaxAge != nil {
		in, out := &in.MaxAge, &out.MaxAge
		*out = new(string)
		**out = **in
	}
	if in.MaxCount != nil {
		in, out := &in.MaxCount, &out.MaxCount
		*out = new(float64)
		**out = **in
	}
	if in.RepeatPeriod != nil {
		in, out := &in.RepeatPeriod, &out.RepeatPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RulesParameters.
func (in *RulesParameters) DeepCopy() *RulesParameters {
	if in == nil {
		return nil
	}
	out := new(RulesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulingInitParameters) DeepCopyInto(out *SchedulingInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ExecuteByInterval != nil {
		in, out := &in.ExecuteByInterval, &out.ExecuteByInterval
		*out = new(float64)
		**out = **in
	}
	if in.ExecuteByTime != nil {
		in, out := &in.ExecuteByTime, &out.ExecuteByTime
		*out = make([]ExecuteByTimeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaxParallelBackups != nil {
		in, out := &in.MaxParallelBackups, &out.MaxParallelBackups
		*out = new(float64)
		**out = **in
	}
	if in.RandomMaxDelay != nil {
		in, out := &in.RandomMaxDelay, &out.RandomMaxDelay
		*out = new(string)
		**out = **in
	}
	if in.Scheme != nil {
		in, out := &in.Scheme, &out.Scheme
		*out = new(string)
		**out = **in
	}
	if in.WeeklyBackupDay != nil {
		in, out := &in.WeeklyBackupDay, &out.WeeklyBackupDay
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulingInitParameters.
func (in *SchedulingInitParameters) DeepCopy() *SchedulingInitParameters {
	if in == nil {
		return nil
	}
	out := new(SchedulingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulingObservation) DeepCopyInto(out *SchedulingObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ExecuteByInterval != nil {
		in, out := &in.ExecuteByInterval, &out.ExecuteByInterval
		*out = new(float64)
		**out = **in
	}
	if in.ExecuteByTime != nil {
		in, out := &in.ExecuteByTime, &out.ExecuteByTime
		*out = make([]ExecuteByTimeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaxParallelBackups != nil {
		in, out := &in.MaxParallelBackups, &out.MaxParallelBackups
		*out = new(float64)
		**out = **in
	}
	if in.RandomMaxDelay != nil {
		in, out := &in.RandomMaxDelay, &out.RandomMaxDelay
		*out = new(string)
		**out = **in
	}
	if in.Scheme != nil {
		in, out := &in.Scheme, &out.Scheme
		*out = new(string)
		**out = **in
	}
	if in.WeeklyBackupDay != nil {
		in, out := &in.WeeklyBackupDay, &out.WeeklyBackupDay
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulingObservation.
func (in *SchedulingObservation) DeepCopy() *SchedulingObservation {
	if in == nil {
		return nil
	}
	out := new(SchedulingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulingParameters) DeepCopyInto(out *SchedulingParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ExecuteByInterval != nil {
		in, out := &in.ExecuteByInterval, &out.ExecuteByInterval
		*out = new(float64)
		**out = **in
	}
	if in.ExecuteByTime != nil {
		in, out := &in.ExecuteByTime, &out.ExecuteByTime
		*out = make([]ExecuteByTimeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaxParallelBackups != nil {
		in, out := &in.MaxParallelBackups, &out.MaxParallelBackups
		*out = new(float64)
		**out = **in
	}
	if in.RandomMaxDelay != nil {
		in, out := &in.RandomMaxDelay, &out.RandomMaxDelay
		*out = new(string)
		**out = **in
	}
	if in.Scheme != nil {
		in, out := &in.Scheme, &out.Scheme
		*out = new(string)
		**out = **in
	}
	if in.WeeklyBackupDay != nil {
		in, out := &in.WeeklyBackupDay, &out.WeeklyBackupDay
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulingParameters.
func (in *SchedulingParameters) DeepCopy() *SchedulingParameters {
	if in == nil {
		return nil
	}
	out := new(SchedulingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VMSnapshotReattemptsInitParameters) DeepCopyInto(out *VMSnapshotReattemptsInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(string)
		**out = **in
	}
	if in.MaxAttempts != nil {
		in, out := &in.MaxAttempts, &out.MaxAttempts
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VMSnapshotReattemptsInitParameters.
func (in *VMSnapshotReattemptsInitParameters) DeepCopy() *VMSnapshotReattemptsInitParameters {
	if in == nil {
		return nil
	}
	out := new(VMSnapshotReattemptsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VMSnapshotReattemptsObservation) DeepCopyInto(out *VMSnapshotReattemptsObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(string)
		**out = **in
	}
	if in.MaxAttempts != nil {
		in, out := &in.MaxAttempts, &out.MaxAttempts
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VMSnapshotReattemptsObservation.
func (in *VMSnapshotReattemptsObservation) DeepCopy() *VMSnapshotReattemptsObservation {
	if in == nil {
		return nil
	}
	out := new(VMSnapshotReattemptsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VMSnapshotReattemptsParameters) DeepCopyInto(out *VMSnapshotReattemptsParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(string)
		**out = **in
	}
	if in.MaxAttempts != nil {
		in, out := &in.MaxAttempts, &out.MaxAttempts
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VMSnapshotReattemptsParameters.
func (in *VMSnapshotReattemptsParameters) DeepCopy() *VMSnapshotReattemptsParameters {
	if in == nil {
		return nil
	}
	out := new(VMSnapshotReattemptsParameters)
	in.DeepCopyInto(out)
	return out
}
