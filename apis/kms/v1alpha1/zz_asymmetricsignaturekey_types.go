// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AsymmetricSignatureKeyInitParameters struct {
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// An optional description of the key.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the folder that the resource belongs to. If it
	// is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the key.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the key.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Signature algorithm to be used with a new key. The default value is RSA_2048_SIGN_PSS_SHA_256.
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`
}

type AsymmetricSignatureKeyObservation struct {

	// Creation timestamp of the key.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// An optional description of the key.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the folder that the resource belongs to. If it
	// is not provided, the default provider folder is used.
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of key/value label pairs to assign to the key.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the key.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Signature algorithm to be used with a new key. The default value is RSA_2048_SIGN_PSS_SHA_256.
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// The status of the key.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AsymmetricSignatureKeyParameters struct {

	// +kubebuilder:validation:Optional
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// An optional description of the key.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the folder that the resource belongs to. If it
	// is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the key.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the key.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Signature algorithm to be used with a new key. The default value is RSA_2048_SIGN_PSS_SHA_256.
	// +kubebuilder:validation:Optional
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`
}

// AsymmetricSignatureKeySpec defines the desired state of AsymmetricSignatureKey
type AsymmetricSignatureKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AsymmetricSignatureKeyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AsymmetricSignatureKeyInitParameters `json:"initProvider,omitempty"`
}

// AsymmetricSignatureKeyStatus defines the observed state of AsymmetricSignatureKey.
type AsymmetricSignatureKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AsymmetricSignatureKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AsymmetricSignatureKey is the Schema for the AsymmetricSignatureKeys API. Creates a Yandex KMS asymmetric signature key that can be used for cryptographic operation.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type AsymmetricSignatureKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AsymmetricSignatureKeySpec   `json:"spec"`
	Status            AsymmetricSignatureKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AsymmetricSignatureKeyList contains a list of AsymmetricSignatureKeys
type AsymmetricSignatureKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AsymmetricSignatureKey `json:"items"`
}

// Repository type metadata.
var (
	AsymmetricSignatureKey_Kind             = "AsymmetricSignatureKey"
	AsymmetricSignatureKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AsymmetricSignatureKey_Kind}.String()
	AsymmetricSignatureKey_KindAPIVersion   = AsymmetricSignatureKey_Kind + "." + CRDGroupVersion.String()
	AsymmetricSignatureKey_GroupVersionKind = CRDGroupVersion.WithKind(AsymmetricSignatureKey_Kind)
)

func init() {
	SchemeBuilder.Register(&AsymmetricSignatureKey{}, &AsymmetricSignatureKeyList{})
}
