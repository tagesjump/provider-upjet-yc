// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1alpha11 "github.com/tagesjump/provider-upjet-yc/apis/iam/v1alpha1"
	v1alpha1 "github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1"
	iam "github.com/tagesjump/provider-upjet-yc/config/iam"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this AsymmetricEncryptionKey.
func (mg *AsymmetricEncryptionKey) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FolderIDRef,
		Selector:     mg.Spec.ForProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FolderID")
	}
	mg.Spec.ForProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FolderIDRef,
		Selector:     mg.Spec.InitProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FolderID")
	}
	mg.Spec.InitProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FolderIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AsymmetricEncryptionKeyIAMBinding.
func (mg *AsymmetricEncryptionKeyIAMBinding) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AsymmetricEncryptionKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.AsymmetricEncryptionKeyIDRef,
		Selector:     mg.Spec.ForProvider.AsymmetricEncryptionKeyIDSelector,
		To: reference.To{
			List:    &AsymmetricEncryptionKeyList{},
			Managed: &AsymmetricEncryptionKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AsymmetricEncryptionKeyID")
	}
	mg.Spec.ForProvider.AsymmetricEncryptionKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AsymmetricEncryptionKeyIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Members),
		Extract:       iam.ServiceAccountRefValue(),
		References:    mg.Spec.ForProvider.ServiceAccountRef,
		Selector:      mg.Spec.ForProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &v1alpha11.ServiceAccountList{},
			Managed: &v1alpha11.ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Members")
	}
	mg.Spec.ForProvider.Members = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ServiceAccountRef = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AsymmetricEncryptionKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.AsymmetricEncryptionKeyIDRef,
		Selector:     mg.Spec.InitProvider.AsymmetricEncryptionKeyIDSelector,
		To: reference.To{
			List:    &AsymmetricEncryptionKeyList{},
			Managed: &AsymmetricEncryptionKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AsymmetricEncryptionKeyID")
	}
	mg.Spec.InitProvider.AsymmetricEncryptionKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AsymmetricEncryptionKeyIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Members),
		Extract:       iam.ServiceAccountRefValue(),
		References:    mg.Spec.InitProvider.ServiceAccountRef,
		Selector:      mg.Spec.InitProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &v1alpha11.ServiceAccountList{},
			Managed: &v1alpha11.ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Members")
	}
	mg.Spec.InitProvider.Members = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ServiceAccountRef = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this AsymmetricSignatureKey.
func (mg *AsymmetricSignatureKey) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FolderIDRef,
		Selector:     mg.Spec.ForProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FolderID")
	}
	mg.Spec.ForProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FolderIDRef,
		Selector:     mg.Spec.InitProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FolderID")
	}
	mg.Spec.InitProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FolderIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AsymmetricSignatureKeyIAMBinding.
func (mg *AsymmetricSignatureKeyIAMBinding) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AsymmetricSignatureKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.AsymmetricSignatureKeyIDRef,
		Selector:     mg.Spec.ForProvider.AsymmetricSignatureKeyIDSelector,
		To: reference.To{
			List:    &AsymmetricSignatureKeyList{},
			Managed: &AsymmetricSignatureKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AsymmetricSignatureKeyID")
	}
	mg.Spec.ForProvider.AsymmetricSignatureKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AsymmetricSignatureKeyIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Members),
		Extract:       iam.ServiceAccountRefValue(),
		References:    mg.Spec.ForProvider.ServiceAccountRef,
		Selector:      mg.Spec.ForProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &v1alpha11.ServiceAccountList{},
			Managed: &v1alpha11.ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Members")
	}
	mg.Spec.ForProvider.Members = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ServiceAccountRef = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AsymmetricSignatureKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.AsymmetricSignatureKeyIDRef,
		Selector:     mg.Spec.InitProvider.AsymmetricSignatureKeyIDSelector,
		To: reference.To{
			List:    &AsymmetricSignatureKeyList{},
			Managed: &AsymmetricSignatureKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AsymmetricSignatureKeyID")
	}
	mg.Spec.InitProvider.AsymmetricSignatureKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AsymmetricSignatureKeyIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Members),
		Extract:       iam.ServiceAccountRefValue(),
		References:    mg.Spec.InitProvider.ServiceAccountRef,
		Selector:      mg.Spec.InitProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &v1alpha11.ServiceAccountList{},
			Managed: &v1alpha11.ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Members")
	}
	mg.Spec.InitProvider.Members = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ServiceAccountRef = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this SecretCiphertext.
func (mg *SecretCiphertext) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.KeyIDRef,
		Selector:     mg.Spec.ForProvider.KeyIDSelector,
		To: reference.To{
			List:    &SymmetricKeyList{},
			Managed: &SymmetricKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyID")
	}
	mg.Spec.ForProvider.KeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.KeyIDRef,
		Selector:     mg.Spec.InitProvider.KeyIDSelector,
		To: reference.To{
			List:    &SymmetricKeyList{},
			Managed: &SymmetricKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KeyID")
	}
	mg.Spec.InitProvider.KeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KeyIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SymmetricKey.
func (mg *SymmetricKey) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FolderIDRef,
		Selector:     mg.Spec.ForProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FolderID")
	}
	mg.Spec.ForProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FolderIDRef,
		Selector:     mg.Spec.InitProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FolderID")
	}
	mg.Spec.InitProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FolderIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SymmetricKeyIAMBinding.
func (mg *SymmetricKeyIAMBinding) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Members),
		Extract:       iam.ServiceAccountRefValue(),
		References:    mg.Spec.ForProvider.ServiceAccountRef,
		Selector:      mg.Spec.ForProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &v1alpha11.ServiceAccountList{},
			Managed: &v1alpha11.ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Members")
	}
	mg.Spec.ForProvider.Members = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ServiceAccountRef = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SymmetricKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SymmetricKeyIDRef,
		Selector:     mg.Spec.ForProvider.SymmetricKeyIDSelector,
		To: reference.To{
			List:    &SymmetricKeyList{},
			Managed: &SymmetricKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SymmetricKeyID")
	}
	mg.Spec.ForProvider.SymmetricKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SymmetricKeyIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Members),
		Extract:       iam.ServiceAccountRefValue(),
		References:    mg.Spec.InitProvider.ServiceAccountRef,
		Selector:      mg.Spec.InitProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &v1alpha11.ServiceAccountList{},
			Managed: &v1alpha11.ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Members")
	}
	mg.Spec.InitProvider.Members = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ServiceAccountRef = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SymmetricKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.SymmetricKeyIDRef,
		Selector:     mg.Spec.InitProvider.SymmetricKeyIDSelector,
		To: reference.To{
			List:    &SymmetricKeyList{},
			Managed: &SymmetricKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SymmetricKeyID")
	}
	mg.Spec.InitProvider.SymmetricKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SymmetricKeyIDRef = rsp.ResolvedReference

	return nil
}
