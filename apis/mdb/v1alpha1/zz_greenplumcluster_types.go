// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GreenplumClusterAccessInitParameters struct {

	// Allow access for Yandex DataLens.
	DataLens *bool `json:"dataLens,omitempty" tf:"data_lens,omitempty"`

	// Allow access for DataTransfer
	DataTransfer *bool `json:"dataTransfer,omitempty" tf:"data_transfer,omitempty"`

	// Allows access for SQL queries in the management console.
	WebSQL *bool `json:"webSql,omitempty" tf:"web_sql,omitempty"`
}

type GreenplumClusterAccessObservation struct {

	// Allow access for Yandex DataLens.
	DataLens *bool `json:"dataLens,omitempty" tf:"data_lens,omitempty"`

	// Allow access for DataTransfer
	DataTransfer *bool `json:"dataTransfer,omitempty" tf:"data_transfer,omitempty"`

	// Allows access for SQL queries in the management console.
	WebSQL *bool `json:"webSql,omitempty" tf:"web_sql,omitempty"`
}

type GreenplumClusterAccessParameters struct {

	// Allow access for Yandex DataLens.
	// +kubebuilder:validation:Optional
	DataLens *bool `json:"dataLens,omitempty" tf:"data_lens,omitempty"`

	// Allow access for DataTransfer
	// +kubebuilder:validation:Optional
	DataTransfer *bool `json:"dataTransfer,omitempty" tf:"data_transfer,omitempty"`

	// Allows access for SQL queries in the management console.
	// +kubebuilder:validation:Optional
	WebSQL *bool `json:"webSql,omitempty" tf:"web_sql,omitempty"`
}

type GreenplumClusterBackupWindowStartInitParameters struct {

	// The hour at which backup will be started (UTC).
	Hours *float64 `json:"hours,omitempty" tf:"hours,omitempty"`

	// The minute at which backup will be started (UTC).
	Minutes *float64 `json:"minutes,omitempty" tf:"minutes,omitempty"`
}

type GreenplumClusterBackupWindowStartObservation struct {

	// The hour at which backup will be started (UTC).
	Hours *float64 `json:"hours,omitempty" tf:"hours,omitempty"`

	// The minute at which backup will be started (UTC).
	Minutes *float64 `json:"minutes,omitempty" tf:"minutes,omitempty"`
}

type GreenplumClusterBackupWindowStartParameters struct {

	// The hour at which backup will be started (UTC).
	// +kubebuilder:validation:Optional
	Hours *float64 `json:"hours,omitempty" tf:"hours,omitempty"`

	// The minute at which backup will be started (UTC).
	// +kubebuilder:validation:Optional
	Minutes *float64 `json:"minutes,omitempty" tf:"minutes,omitempty"`
}

type GreenplumClusterCloudStorageInitParameters struct {

	// Whether to use cloud storage or not.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`
}

type GreenplumClusterCloudStorageObservation struct {

	// Whether to use cloud storage or not.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`
}

type GreenplumClusterCloudStorageParameters struct {

	// Whether to use cloud storage or not.
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`
}

type GreenplumClusterInitParameters struct {

	// Access policy to the Greenplum cluster. The structure is documented below.
	Access []GreenplumClusterAccessInitParameters `json:"access,omitempty" tf:"access,omitempty"`

	// Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// Time to start the daily backup, in the UTC timezone. The structure is documented below.
	BackupWindowStart []GreenplumClusterBackupWindowStartInitParameters `json:"backupWindowStart,omitempty" tf:"backup_window_start,omitempty"`

	// Cloud Storage settings of the Greenplum cluster. The structure is documented below.
	CloudStorage []GreenplumClusterCloudStorageInitParameters `json:"cloudStorage,omitempty" tf:"cloud_storage,omitempty"`

	// Inhibits deletion of the cluster.  Can be either true or false.
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// Description of the Greenplum cluster.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The ID of the folder that the resource belongs to. If it
	// is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// Greenplum cluster config. Detail info in "Greenplum cluster settings" section (documented below).
	// +mapType=granular
	GreenplumConfig map[string]*string `json:"greenplumConfig,omitempty" tf:"greenplum_config,omitempty"`

	// A set of key/value label pairs to assign to the Greenplum cluster.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Maintenance policy of the Greenplum cluster. The structure is documented below.
	MaintenanceWindow []GreenplumClusterMaintenanceWindowInitParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// Number of hosts in master subcluster (1 or 2).
	MasterHostCount *float64 `json:"masterHostCount,omitempty" tf:"master_host_count,omitempty"`

	// Settings for master subcluster. The structure is documented below.
	MasterSubcluster []MasterSubclusterInitParameters `json:"masterSubcluster,omitempty" tf:"master_subcluster,omitempty"`

	// Name of the Greenplum cluster. Provided by the client when the cluster is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the network, to which the Greenplum cluster uses.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Network
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// Configuration of the connection pooler. The structure is documented below.
	PoolerConfig []PoolerConfigInitParameters `json:"poolerConfig,omitempty" tf:"pooler_config,omitempty"`

	// Configuration of the PXF daemon. The structure is documented below.
	PxfConfig []PxfConfigInitParameters `json:"pxfConfig,omitempty" tf:"pxf_config,omitempty"`

	// A set of ids of security groups assigned to hosts of the cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// Number of hosts in segment subcluster (from 1 to 32).
	SegmentHostCount *float64 `json:"segmentHostCount,omitempty" tf:"segment_host_count,omitempty"`

	// Number of segments on segment host (not more then 1 + RAM/8).
	SegmentInHost *float64 `json:"segmentInHost,omitempty" tf:"segment_in_host,omitempty"`

	// Settings for segment subcluster. The structure is documented below.
	SegmentSubcluster []SegmentSubclusterInitParameters `json:"segmentSubcluster,omitempty" tf:"segment_subcluster,omitempty"`

	// The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// Greenplum cluster admin user name.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// Version of the Greenplum cluster. (6.22 or 6.25)
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// The availability zone where the Greenplum hosts will be created.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type GreenplumClusterMaintenanceWindowInitParameters struct {

	// Day of the week (in DDD format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// Hour of the day in UTC (in HH format). Allowed value is between 0 and 23.
	Hour *float64 `json:"hour,omitempty" tf:"hour,omitempty"`

	// Type of maintenance window. Can be either ANYTIME or WEEKLY. A day and hour of window need to be specified with weekly window.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GreenplumClusterMaintenanceWindowObservation struct {

	// Day of the week (in DDD format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// Hour of the day in UTC (in HH format). Allowed value is between 0 and 23.
	Hour *float64 `json:"hour,omitempty" tf:"hour,omitempty"`

	// Type of maintenance window. Can be either ANYTIME or WEEKLY. A day and hour of window need to be specified with weekly window.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GreenplumClusterMaintenanceWindowParameters struct {

	// Day of the week (in DDD format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
	// +kubebuilder:validation:Optional
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// Hour of the day in UTC (in HH format). Allowed value is between 0 and 23.
	// +kubebuilder:validation:Optional
	Hour *float64 `json:"hour,omitempty" tf:"hour,omitempty"`

	// Type of maintenance window. Can be either ANYTIME or WEEKLY. A day and hour of window need to be specified with weekly window.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type GreenplumClusterObservation struct {

	// Access policy to the Greenplum cluster. The structure is documented below.
	Access []GreenplumClusterAccessObservation `json:"access,omitempty" tf:"access,omitempty"`

	// Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// Time to start the daily backup, in the UTC timezone. The structure is documented below.
	BackupWindowStart []GreenplumClusterBackupWindowStartObservation `json:"backupWindowStart,omitempty" tf:"backup_window_start,omitempty"`

	// Cloud Storage settings of the Greenplum cluster. The structure is documented below.
	CloudStorage []GreenplumClusterCloudStorageObservation `json:"cloudStorage,omitempty" tf:"cloud_storage,omitempty"`

	// Creation timestamp of the cluster.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Inhibits deletion of the cluster.  Can be either true or false.
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// Description of the Greenplum cluster.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The ID of the folder that the resource belongs to. If it
	// is not provided, the default provider folder is used.
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Greenplum cluster config. Detail info in "Greenplum cluster settings" section (documented below).
	// +mapType=granular
	GreenplumConfig map[string]*string `json:"greenplumConfig,omitempty" tf:"greenplum_config,omitempty"`

	// Aggregated health of the cluster.
	Health *string `json:"health,omitempty" tf:"health,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of key/value label pairs to assign to the Greenplum cluster.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Maintenance policy of the Greenplum cluster. The structure is documented below.
	MaintenanceWindow []GreenplumClusterMaintenanceWindowObservation `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// Number of hosts in master subcluster (1 or 2).
	MasterHostCount *float64 `json:"masterHostCount,omitempty" tf:"master_host_count,omitempty"`

	// (Computed) Info about hosts in master subcluster. The structure is documented below.
	MasterHosts []MasterHostsObservation `json:"masterHosts,omitempty" tf:"master_hosts,omitempty"`

	// Settings for master subcluster. The structure is documented below.
	MasterSubcluster []MasterSubclusterObservation `json:"masterSubcluster,omitempty" tf:"master_subcluster,omitempty"`

	// Name of the Greenplum cluster. Provided by the client when the cluster is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the network, to which the Greenplum cluster uses.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Configuration of the connection pooler. The structure is documented below.
	PoolerConfig []PoolerConfigObservation `json:"poolerConfig,omitempty" tf:"pooler_config,omitempty"`

	// Configuration of the PXF daemon. The structure is documented below.
	PxfConfig []PxfConfigObservation `json:"pxfConfig,omitempty" tf:"pxf_config,omitempty"`

	// A set of ids of security groups assigned to hosts of the cluster.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// Number of hosts in segment subcluster (from 1 to 32).
	SegmentHostCount *float64 `json:"segmentHostCount,omitempty" tf:"segment_host_count,omitempty"`

	// (Computed) Info about hosts in segment subcluster. The structure is documented below.
	SegmentHosts []SegmentHostsObservation `json:"segmentHosts,omitempty" tf:"segment_hosts,omitempty"`

	// Number of segments on segment host (not more then 1 + RAM/8).
	SegmentInHost *float64 `json:"segmentInHost,omitempty" tf:"segment_in_host,omitempty"`

	// Settings for segment subcluster. The structure is documented below.
	SegmentSubcluster []SegmentSubclusterObservation `json:"segmentSubcluster,omitempty" tf:"segment_subcluster,omitempty"`

	// Status of the cluster.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Greenplum cluster admin user name.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// Version of the Greenplum cluster. (6.22 or 6.25)
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// The availability zone where the Greenplum hosts will be created.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type GreenplumClusterParameters struct {

	// Access policy to the Greenplum cluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	Access []GreenplumClusterAccessParameters `json:"access,omitempty" tf:"access,omitempty"`

	// Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.
	// +kubebuilder:validation:Optional
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// Time to start the daily backup, in the UTC timezone. The structure is documented below.
	// +kubebuilder:validation:Optional
	BackupWindowStart []GreenplumClusterBackupWindowStartParameters `json:"backupWindowStart,omitempty" tf:"backup_window_start,omitempty"`

	// Cloud Storage settings of the Greenplum cluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	CloudStorage []GreenplumClusterCloudStorageParameters `json:"cloudStorage,omitempty" tf:"cloud_storage,omitempty"`

	// Inhibits deletion of the cluster.  Can be either true or false.
	// +kubebuilder:validation:Optional
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// Description of the Greenplum cluster.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The ID of the folder that the resource belongs to. If it
	// is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// Greenplum cluster config. Detail info in "Greenplum cluster settings" section (documented below).
	// +kubebuilder:validation:Optional
	// +mapType=granular
	GreenplumConfig map[string]*string `json:"greenplumConfig,omitempty" tf:"greenplum_config,omitempty"`

	// A set of key/value label pairs to assign to the Greenplum cluster.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Maintenance policy of the Greenplum cluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	MaintenanceWindow []GreenplumClusterMaintenanceWindowParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// Number of hosts in master subcluster (1 or 2).
	// +kubebuilder:validation:Optional
	MasterHostCount *float64 `json:"masterHostCount,omitempty" tf:"master_host_count,omitempty"`

	// Settings for master subcluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	MasterSubcluster []MasterSubclusterParameters `json:"masterSubcluster,omitempty" tf:"master_subcluster,omitempty"`

	// Name of the Greenplum cluster. Provided by the client when the cluster is created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the network, to which the Greenplum cluster uses.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Network
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// Configuration of the connection pooler. The structure is documented below.
	// +kubebuilder:validation:Optional
	PoolerConfig []PoolerConfigParameters `json:"poolerConfig,omitempty" tf:"pooler_config,omitempty"`

	// Configuration of the PXF daemon. The structure is documented below.
	// +kubebuilder:validation:Optional
	PxfConfig []PxfConfigParameters `json:"pxfConfig,omitempty" tf:"pxf_config,omitempty"`

	// A set of ids of security groups assigned to hosts of the cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// Number of hosts in segment subcluster (from 1 to 32).
	// +kubebuilder:validation:Optional
	SegmentHostCount *float64 `json:"segmentHostCount,omitempty" tf:"segment_host_count,omitempty"`

	// Number of segments on segment host (not more then 1 + RAM/8).
	// +kubebuilder:validation:Optional
	SegmentInHost *float64 `json:"segmentInHost,omitempty" tf:"segment_in_host,omitempty"`

	// Settings for segment subcluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	SegmentSubcluster []SegmentSubclusterParameters `json:"segmentSubcluster,omitempty" tf:"segment_subcluster,omitempty"`

	// The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// Greenplum cluster admin user name.
	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// Greenplum cluster admin password name.
	// +kubebuilder:validation:Optional
	UserPasswordSecretRef v1.SecretKeySelector `json:"userPasswordSecretRef" tf:"-"`

	// Version of the Greenplum cluster. (6.22 or 6.25)
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// The availability zone where the Greenplum hosts will be created.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type MasterHostsInitParameters struct {
}

type MasterHostsObservation struct {

	// (Computed) Flag indicating that master hosts should be created with a public IP address.
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// (Computed) The fully qualified domain name of the host.
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`
}

type MasterHostsParameters struct {
}

type MasterSubclusterInitParameters struct {

	// Resources allocated to hosts for master subcluster of the Greenplum cluster. The structure is documented below.
	Resources []MasterSubclusterResourcesInitParameters `json:"resources,omitempty" tf:"resources,omitempty"`
}

type MasterSubclusterObservation struct {

	// Resources allocated to hosts for master subcluster of the Greenplum cluster. The structure is documented below.
	Resources []MasterSubclusterResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`
}

type MasterSubclusterParameters struct {

	// Resources allocated to hosts for master subcluster of the Greenplum cluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	Resources []MasterSubclusterResourcesParameters `json:"resources" tf:"resources,omitempty"`
}

type MasterSubclusterResourcesInitParameters struct {
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type MasterSubclusterResourcesObservation struct {
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type MasterSubclusterResourcesParameters struct {

	// +kubebuilder:validation:Optional
	DiskSize *float64 `json:"diskSize" tf:"disk_size,omitempty"`

	// +kubebuilder:validation:Optional
	DiskTypeID *string `json:"diskTypeId" tf:"disk_type_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourcePresetID *string `json:"resourcePresetId" tf:"resource_preset_id,omitempty"`
}

type PoolerConfigInitParameters struct {

	// Value for pool_client_idle_timeout parameter in Odyssey.
	PoolClientIdleTimeout *float64 `json:"poolClientIdleTimeout,omitempty" tf:"pool_client_idle_timeout,omitempty"`

	// Value for pool_size parameter in Odyssey.
	PoolSize *float64 `json:"poolSize,omitempty" tf:"pool_size,omitempty"`

	// Mode that the connection pooler is working in. See descriptions of all modes in the [documentation for Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool-string.
	PoolingMode *string `json:"poolingMode,omitempty" tf:"pooling_mode,omitempty"`
}

type PoolerConfigObservation struct {

	// Value for pool_client_idle_timeout parameter in Odyssey.
	PoolClientIdleTimeout *float64 `json:"poolClientIdleTimeout,omitempty" tf:"pool_client_idle_timeout,omitempty"`

	// Value for pool_size parameter in Odyssey.
	PoolSize *float64 `json:"poolSize,omitempty" tf:"pool_size,omitempty"`

	// Mode that the connection pooler is working in. See descriptions of all modes in the [documentation for Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool-string.
	PoolingMode *string `json:"poolingMode,omitempty" tf:"pooling_mode,omitempty"`
}

type PoolerConfigParameters struct {

	// Value for pool_client_idle_timeout parameter in Odyssey.
	// +kubebuilder:validation:Optional
	PoolClientIdleTimeout *float64 `json:"poolClientIdleTimeout,omitempty" tf:"pool_client_idle_timeout,omitempty"`

	// Value for pool_size parameter in Odyssey.
	// +kubebuilder:validation:Optional
	PoolSize *float64 `json:"poolSize,omitempty" tf:"pool_size,omitempty"`

	// Mode that the connection pooler is working in. See descriptions of all modes in the [documentation for Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool-string.
	// +kubebuilder:validation:Optional
	PoolingMode *string `json:"poolingMode,omitempty" tf:"pooling_mode,omitempty"`
}

type PxfConfigInitParameters struct {

	// The Tomcat server connection timeout for read operations in seconds. Value is between 5 and 600.
	ConnectionTimeout *float64 `json:"connectionTimeout,omitempty" tf:"connection_timeout,omitempty"`

	// The maximum number of PXF tomcat threads. Value is between 1 and 1024.
	MaxThreads *float64 `json:"maxThreads,omitempty" tf:"max_threads,omitempty"`

	// Identifies whether or not core streaming threads are allowed to time out.
	PoolAllowCoreThreadTimeout *bool `json:"poolAllowCoreThreadTimeout,omitempty" tf:"pool_allow_core_thread_timeout,omitempty"`

	// The number of core streaming threads. Value is between 1 and 1024.
	PoolCoreSize *float64 `json:"poolCoreSize,omitempty" tf:"pool_core_size,omitempty"`

	// The maximum allowed number of core streaming threads. Value is between 1 and 1024.
	PoolMaxSize *float64 `json:"poolMaxSize,omitempty" tf:"pool_max_size,omitempty"`

	// The capacity of the core streaming thread pool queue. Value is positive.
	PoolQueueCapacity *float64 `json:"poolQueueCapacity,omitempty" tf:"pool_queue_capacity,omitempty"`

	// The Tomcat server connection timeout for write operations in seconds. Value is between 5 and 600.
	UploadTimeout *float64 `json:"uploadTimeout,omitempty" tf:"upload_timeout,omitempty"`

	// Maximum JVM heap size for PXF daemon. Value is between 64 and 16384.
	Xms *float64 `json:"xms,omitempty" tf:"xms,omitempty"`

	// Initial JVM heap size for PXF daemon. Value is between 64 and 16384.
	Xmx *float64 `json:"xmx,omitempty" tf:"xmx,omitempty"`
}

type PxfConfigObservation struct {

	// The Tomcat server connection timeout for read operations in seconds. Value is between 5 and 600.
	ConnectionTimeout *float64 `json:"connectionTimeout,omitempty" tf:"connection_timeout,omitempty"`

	// The maximum number of PXF tomcat threads. Value is between 1 and 1024.
	MaxThreads *float64 `json:"maxThreads,omitempty" tf:"max_threads,omitempty"`

	// Identifies whether or not core streaming threads are allowed to time out.
	PoolAllowCoreThreadTimeout *bool `json:"poolAllowCoreThreadTimeout,omitempty" tf:"pool_allow_core_thread_timeout,omitempty"`

	// The number of core streaming threads. Value is between 1 and 1024.
	PoolCoreSize *float64 `json:"poolCoreSize,omitempty" tf:"pool_core_size,omitempty"`

	// The maximum allowed number of core streaming threads. Value is between 1 and 1024.
	PoolMaxSize *float64 `json:"poolMaxSize,omitempty" tf:"pool_max_size,omitempty"`

	// The capacity of the core streaming thread pool queue. Value is positive.
	PoolQueueCapacity *float64 `json:"poolQueueCapacity,omitempty" tf:"pool_queue_capacity,omitempty"`

	// The Tomcat server connection timeout for write operations in seconds. Value is between 5 and 600.
	UploadTimeout *float64 `json:"uploadTimeout,omitempty" tf:"upload_timeout,omitempty"`

	// Maximum JVM heap size for PXF daemon. Value is between 64 and 16384.
	Xms *float64 `json:"xms,omitempty" tf:"xms,omitempty"`

	// Initial JVM heap size for PXF daemon. Value is between 64 and 16384.
	Xmx *float64 `json:"xmx,omitempty" tf:"xmx,omitempty"`
}

type PxfConfigParameters struct {

	// The Tomcat server connection timeout for read operations in seconds. Value is between 5 and 600.
	// +kubebuilder:validation:Optional
	ConnectionTimeout *float64 `json:"connectionTimeout,omitempty" tf:"connection_timeout,omitempty"`

	// The maximum number of PXF tomcat threads. Value is between 1 and 1024.
	// +kubebuilder:validation:Optional
	MaxThreads *float64 `json:"maxThreads,omitempty" tf:"max_threads,omitempty"`

	// Identifies whether or not core streaming threads are allowed to time out.
	// +kubebuilder:validation:Optional
	PoolAllowCoreThreadTimeout *bool `json:"poolAllowCoreThreadTimeout,omitempty" tf:"pool_allow_core_thread_timeout,omitempty"`

	// The number of core streaming threads. Value is between 1 and 1024.
	// +kubebuilder:validation:Optional
	PoolCoreSize *float64 `json:"poolCoreSize,omitempty" tf:"pool_core_size,omitempty"`

	// The maximum allowed number of core streaming threads. Value is between 1 and 1024.
	// +kubebuilder:validation:Optional
	PoolMaxSize *float64 `json:"poolMaxSize,omitempty" tf:"pool_max_size,omitempty"`

	// The capacity of the core streaming thread pool queue. Value is positive.
	// +kubebuilder:validation:Optional
	PoolQueueCapacity *float64 `json:"poolQueueCapacity,omitempty" tf:"pool_queue_capacity,omitempty"`

	// The Tomcat server connection timeout for write operations in seconds. Value is between 5 and 600.
	// +kubebuilder:validation:Optional
	UploadTimeout *float64 `json:"uploadTimeout,omitempty" tf:"upload_timeout,omitempty"`

	// Maximum JVM heap size for PXF daemon. Value is between 64 and 16384.
	// +kubebuilder:validation:Optional
	Xms *float64 `json:"xms,omitempty" tf:"xms,omitempty"`

	// Initial JVM heap size for PXF daemon. Value is between 64 and 16384.
	// +kubebuilder:validation:Optional
	Xmx *float64 `json:"xmx,omitempty" tf:"xmx,omitempty"`
}

type SegmentHostsInitParameters struct {
}

type SegmentHostsObservation struct {

	// (Computed) The fully qualified domain name of the host.
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`
}

type SegmentHostsParameters struct {
}

type SegmentSubclusterInitParameters struct {

	// Resources allocated to hosts for segment subcluster of the Greenplum cluster. The structure is documented below.
	Resources []SegmentSubclusterResourcesInitParameters `json:"resources,omitempty" tf:"resources,omitempty"`
}

type SegmentSubclusterObservation struct {

	// Resources allocated to hosts for segment subcluster of the Greenplum cluster. The structure is documented below.
	Resources []SegmentSubclusterResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`
}

type SegmentSubclusterParameters struct {

	// Resources allocated to hosts for segment subcluster of the Greenplum cluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	Resources []SegmentSubclusterResourcesParameters `json:"resources" tf:"resources,omitempty"`
}

type SegmentSubclusterResourcesInitParameters struct {
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type SegmentSubclusterResourcesObservation struct {
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type SegmentSubclusterResourcesParameters struct {

	// +kubebuilder:validation:Optional
	DiskSize *float64 `json:"diskSize" tf:"disk_size,omitempty"`

	// +kubebuilder:validation:Optional
	DiskTypeID *string `json:"diskTypeId" tf:"disk_type_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourcePresetID *string `json:"resourcePresetId" tf:"resource_preset_id,omitempty"`
}

// GreenplumClusterSpec defines the desired state of GreenplumCluster
type GreenplumClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GreenplumClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GreenplumClusterInitParameters `json:"initProvider,omitempty"`
}

// GreenplumClusterStatus defines the observed state of GreenplumCluster.
type GreenplumClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GreenplumClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GreenplumCluster is the Schema for the GreenplumClusters API. Manages a Greenplum cluster within Yandex.Cloud.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type GreenplumCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.assignPublicIp) || (has(self.initProvider) && has(self.initProvider.assignPublicIp))",message="spec.forProvider.assignPublicIp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.environment) || (has(self.initProvider) && has(self.initProvider.environment))",message="spec.forProvider.environment is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.masterHostCount) || (has(self.initProvider) && has(self.initProvider.masterHostCount))",message="spec.forProvider.masterHostCount is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.masterSubcluster) || (has(self.initProvider) && has(self.initProvider.masterSubcluster))",message="spec.forProvider.masterSubcluster is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.segmentHostCount) || (has(self.initProvider) && has(self.initProvider.segmentHostCount))",message="spec.forProvider.segmentHostCount is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.segmentInHost) || (has(self.initProvider) && has(self.initProvider.segmentInHost))",message="spec.forProvider.segmentInHost is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.segmentSubcluster) || (has(self.initProvider) && has(self.initProvider.segmentSubcluster))",message="spec.forProvider.segmentSubcluster is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userName) || (has(self.initProvider) && has(self.initProvider.userName))",message="spec.forProvider.userName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userPasswordSecretRef)",message="spec.forProvider.userPasswordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   GreenplumClusterSpec   `json:"spec"`
	Status GreenplumClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GreenplumClusterList contains a list of GreenplumClusters
type GreenplumClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GreenplumCluster `json:"items"`
}

// Repository type metadata.
var (
	GreenplumCluster_Kind             = "GreenplumCluster"
	GreenplumCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GreenplumCluster_Kind}.String()
	GreenplumCluster_KindAPIVersion   = GreenplumCluster_Kind + "." + CRDGroupVersion.String()
	GreenplumCluster_GroupVersionKind = CRDGroupVersion.WithKind(GreenplumCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&GreenplumCluster{}, &GreenplumClusterList{})
}
