// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyInitParameters struct {

	// Yandex.Cloud Function version tag for Yandex Cloud Function scaling policy
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// max number of instances in one zone for Yandex.Cloud Function with tag
	ZoneInstancesLimit *float64 `json:"zoneInstancesLimit,omitempty" tf:"zone_instances_limit,omitempty"`

	// max number of requests in one zone for Yandex.Cloud Function with tag
	ZoneRequestsLimit *float64 `json:"zoneRequestsLimit,omitempty" tf:"zone_requests_limit,omitempty"`
}

type PolicyObservation struct {

	// Yandex.Cloud Function version tag for Yandex Cloud Function scaling policy
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// max number of instances in one zone for Yandex.Cloud Function with tag
	ZoneInstancesLimit *float64 `json:"zoneInstancesLimit,omitempty" tf:"zone_instances_limit,omitempty"`

	// max number of requests in one zone for Yandex.Cloud Function with tag
	ZoneRequestsLimit *float64 `json:"zoneRequestsLimit,omitempty" tf:"zone_requests_limit,omitempty"`
}

type PolicyParameters struct {

	// Yandex.Cloud Function version tag for Yandex Cloud Function scaling policy
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag" tf:"tag,omitempty"`

	// max number of instances in one zone for Yandex.Cloud Function with tag
	// +kubebuilder:validation:Optional
	ZoneInstancesLimit *float64 `json:"zoneInstancesLimit,omitempty" tf:"zone_instances_limit,omitempty"`

	// max number of requests in one zone for Yandex.Cloud Function with tag
	// +kubebuilder:validation:Optional
	ZoneRequestsLimit *float64 `json:"zoneRequestsLimit,omitempty" tf:"zone_requests_limit,omitempty"`
}

type ScalingPolicyInitParameters struct {

	// Yandex Cloud Function id used to define function
	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	// list definition for Yandex Cloud Function scaling policies
	Policy []PolicyInitParameters `json:"policy,omitempty" tf:"policy,omitempty"`
}

type ScalingPolicyObservation struct {

	// Yandex Cloud Function id used to define function
	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// list definition for Yandex Cloud Function scaling policies
	Policy []PolicyObservation `json:"policy,omitempty" tf:"policy,omitempty"`
}

type ScalingPolicyParameters struct {

	// Yandex Cloud Function id used to define function
	// +kubebuilder:validation:Optional
	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	// list definition for Yandex Cloud Function scaling policies
	// +kubebuilder:validation:Optional
	Policy []PolicyParameters `json:"policy,omitempty" tf:"policy,omitempty"`
}

// ScalingPolicySpec defines the desired state of ScalingPolicy
type ScalingPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScalingPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ScalingPolicyInitParameters `json:"initProvider,omitempty"`
}

// ScalingPolicyStatus defines the observed state of ScalingPolicy.
type ScalingPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScalingPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ScalingPolicy is the Schema for the ScalingPolicys API. Allows management of a Yandex Cloud Function Scaling Policy.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type ScalingPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.functionId) || (has(self.initProvider) && has(self.initProvider.functionId))",message="spec.forProvider.functionId is a required parameter"
	Spec   ScalingPolicySpec   `json:"spec"`
	Status ScalingPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScalingPolicyList contains a list of ScalingPolicys
type ScalingPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScalingPolicy `json:"items"`
}

// Repository type metadata.
var (
	ScalingPolicy_Kind             = "ScalingPolicy"
	ScalingPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScalingPolicy_Kind}.String()
	ScalingPolicy_KindAPIVersion   = ScalingPolicy_Kind + "." + CRDGroupVersion.String()
	ScalingPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ScalingPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ScalingPolicy{}, &ScalingPolicyList{})
}
