// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1alpha12 "github.com/tagesjump/provider-upjet-yc/apis/iam/v1alpha1"
	v1alpha11 "github.com/tagesjump/provider-upjet-yc/apis/kms/v1alpha1"
	v1alpha1 "github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1"
	iam "github.com/tagesjump/provider-upjet-yc/config/iam"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Secret.
func (mg *Secret) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FolderIDRef,
		Selector:     mg.Spec.ForProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FolderID")
	}
	mg.Spec.ForProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KMSKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.KMSKeyIDRef,
		Selector:     mg.Spec.ForProvider.KMSKeyIDSelector,
		To: reference.To{
			List:    &v1alpha11.SymmetricKeyList{},
			Managed: &v1alpha11.SymmetricKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KMSKeyID")
	}
	mg.Spec.ForProvider.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KMSKeyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FolderIDRef,
		Selector:     mg.Spec.InitProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FolderID")
	}
	mg.Spec.InitProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FolderIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KMSKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.KMSKeyIDRef,
		Selector:     mg.Spec.InitProvider.KMSKeyIDSelector,
		To: reference.To{
			List:    &v1alpha11.SymmetricKeyList{},
			Managed: &v1alpha11.SymmetricKey{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KMSKeyID")
	}
	mg.Spec.InitProvider.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KMSKeyIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SecretIAMBinding.
func (mg *SecretIAMBinding) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Members),
		Extract:       iam.ServiceAccountRefValue(),
		References:    mg.Spec.ForProvider.ServiceAccountRef,
		Selector:      mg.Spec.ForProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &v1alpha12.ServiceAccountList{},
			Managed: &v1alpha12.ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Members")
	}
	mg.Spec.ForProvider.Members = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ServiceAccountRef = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecretID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SecretIDRef,
		Selector:     mg.Spec.ForProvider.SecretIDSelector,
		To: reference.To{
			List:    &SecretList{},
			Managed: &Secret{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecretID")
	}
	mg.Spec.ForProvider.SecretID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecretIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Members),
		Extract:       iam.ServiceAccountRefValue(),
		References:    mg.Spec.InitProvider.ServiceAccountRef,
		Selector:      mg.Spec.InitProvider.ServiceAccountSelector,
		To: reference.To{
			List:    &v1alpha12.ServiceAccountList{},
			Managed: &v1alpha12.ServiceAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Members")
	}
	mg.Spec.InitProvider.Members = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ServiceAccountRef = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SecretID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.SecretIDRef,
		Selector:     mg.Spec.InitProvider.SecretIDSelector,
		To: reference.To{
			List:    &SecretList{},
			Managed: &Secret{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecretID")
	}
	mg.Spec.InitProvider.SecretID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SecretIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SecretVersion.
func (mg *SecretVersion) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecretID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SecretIDRef,
		Selector:     mg.Spec.ForProvider.SecretIDSelector,
		To: reference.To{
			List:    &SecretList{},
			Managed: &Secret{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecretID")
	}
	mg.Spec.ForProvider.SecretID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecretIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SecretID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.SecretIDRef,
		Selector:     mg.Spec.InitProvider.SecretIDSelector,
		To: reference.To{
			List:    &SecretList{},
			Managed: &Secret{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecretID")
	}
	mg.Spec.InitProvider.SecretID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SecretIDRef = rsp.ResolvedReference

	return nil
}
