// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1alpha12 "github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1"
	v1alpha1 "github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1"
	v1alpha11 "github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1"
	common "github.com/tagesjump/provider-upjet-yc/config/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Endpoint.
func (mg *Endpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FolderIDRef,
		Selector:     mg.Spec.ForProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FolderID")
	}
	mg.Spec.ForProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].ClickhouseSource); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].ClickhouseSource[i4].SubnetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Settings[i3].ClickhouseSource[i4].SubnetIDRef,
				Selector:     mg.Spec.ForProvider.Settings[i3].ClickhouseSource[i4].SubnetIDSelector,
				To: reference.To{
					List:    &v1alpha11.SubnetList{},
					Managed: &v1alpha11.Subnet{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].ClickhouseSource[i4].SubnetID")
			}
			mg.Spec.ForProvider.Settings[i3].ClickhouseSource[i4].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings[i3].ClickhouseSource[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].ClickhouseTarget); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].ClickhouseTarget[i4].SubnetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Settings[i3].ClickhouseTarget[i4].SubnetIDRef,
				Selector:     mg.Spec.ForProvider.Settings[i3].ClickhouseTarget[i4].SubnetIDSelector,
				To: reference.To{
					List:    &v1alpha11.SubnetList{},
					Managed: &v1alpha11.Subnet{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].ClickhouseTarget[i4].SubnetID")
			}
			mg.Spec.ForProvider.Settings[i3].ClickhouseTarget[i4].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings[i3].ClickhouseTarget[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MongoSource); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Settings[i3].MongoSource[i4].Connection); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions[i6].MdbClusterID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions[i6].MdbClusterIDRef,
						Selector:     mg.Spec.ForProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions[i6].MdbClusterIDSelector,
						To: reference.To{
							List:    &v1alpha12.MongodbClusterList{},
							Managed: &v1alpha12.MongodbCluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions[i6].MdbClusterID")
					}
					mg.Spec.ForProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions[i6].MdbClusterID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions[i6].MdbClusterIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MongoSource); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].MongoSource[i4].SubnetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Settings[i3].MongoSource[i4].SubnetIDRef,
				Selector:     mg.Spec.ForProvider.Settings[i3].MongoSource[i4].SubnetIDSelector,
				To: reference.To{
					List:    &v1alpha11.SubnetList{},
					Managed: &v1alpha11.Subnet{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MongoSource[i4].SubnetID")
			}
			mg.Spec.ForProvider.Settings[i3].MongoSource[i4].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings[i3].MongoSource[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MongoTarget); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].Connection); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions[i6].MdbClusterID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions[i6].MdbClusterIDRef,
						Selector:     mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions[i6].MdbClusterIDSelector,
						To: reference.To{
							List:    &v1alpha12.MongodbClusterList{},
							Managed: &v1alpha12.MongodbCluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions[i6].MdbClusterID")
					}
					mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions[i6].MdbClusterID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions[i6].MdbClusterIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MongoTarget); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].SubnetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].SubnetIDRef,
				Selector:     mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].SubnetIDSelector,
				To: reference.To{
					List:    &v1alpha11.SubnetList{},
					Managed: &v1alpha11.Subnet{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].SubnetID")
			}
			mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings[i3].MongoTarget[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MySQLSource); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection[i5].MdbClusterID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection[i5].MdbClusterIDRef,
					Selector:     mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection[i5].MdbClusterIDSelector,
					To: reference.To{
						List:    &v1alpha12.MySQLClusterList{},
						Managed: &v1alpha12.MySQLCluster{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection[i5].MdbClusterID")
				}
				mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection[i5].MdbClusterID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection[i5].MdbClusterIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MySQLSource); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise[i6].SubnetID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise[i6].SubnetIDRef,
						Selector:     mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise[i6].SubnetIDSelector,
						To: reference.To{
							List:    &v1alpha11.SubnetList{},
							Managed: &v1alpha11.Subnet{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise[i6].SubnetID")
					}
					mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise[i6].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise[i6].SubnetIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MySQLSource); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Database),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].DatabaseRef,
				Selector:     mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].DatabaseSelector,
				To: reference.To{
					List:    &v1alpha12.MySQLDatabaseList{},
					Managed: &v1alpha12.MySQLDatabase{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Database")
			}
			mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].Database = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].DatabaseRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MySQLSource); i4++ {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].SecurityGroups),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].SecurityGroupsRefs,
				Selector:      mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].SecurityGroupsSelector,
				To: reference.To{
					List:    &v1alpha11.SecurityGroupList{},
					Managed: &v1alpha11.SecurityGroup{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].SecurityGroups")
			}
			mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].SecurityGroupsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MySQLSource); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].User),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].UserRef,
				Selector:     mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].UserSelector,
				To: reference.To{
					List:    &v1alpha12.MySQLUserList{},
					Managed: &v1alpha12.MySQLUser{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].User")
			}
			mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].User = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings[i3].MySQLSource[i4].UserRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MySQLTarget); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection[i5].MdbClusterID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection[i5].MdbClusterIDRef,
					Selector:     mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection[i5].MdbClusterIDSelector,
					To: reference.To{
						List:    &v1alpha12.MySQLClusterList{},
						Managed: &v1alpha12.MySQLCluster{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection[i5].MdbClusterID")
				}
				mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection[i5].MdbClusterID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection[i5].MdbClusterIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MySQLTarget); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise[i6].SubnetID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise[i6].SubnetIDRef,
						Selector:     mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise[i6].SubnetIDSelector,
						To: reference.To{
							List:    &v1alpha11.SubnetList{},
							Managed: &v1alpha11.Subnet{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise[i6].SubnetID")
					}
					mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise[i6].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise[i6].SubnetIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MySQLTarget); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Database),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].DatabaseRef,
				Selector:     mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].DatabaseSelector,
				To: reference.To{
					List:    &v1alpha12.MySQLDatabaseList{},
					Managed: &v1alpha12.MySQLDatabase{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Database")
			}
			mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].Database = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].DatabaseRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MySQLTarget); i4++ {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].SecurityGroups),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].SecurityGroupsRefs,
				Selector:      mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].SecurityGroupsSelector,
				To: reference.To{
					List:    &v1alpha11.SecurityGroupList{},
					Managed: &v1alpha11.SecurityGroup{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].SecurityGroups")
			}
			mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].SecurityGroupsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].MySQLTarget); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].User),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].UserRef,
				Selector:     mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].UserSelector,
				To: reference.To{
					List:    &v1alpha12.MySQLUserList{},
					Managed: &v1alpha12.MySQLUser{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].User")
			}
			mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].User = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings[i3].MySQLTarget[i4].UserRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].PostgresSource); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection[i5].MdbClusterID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection[i5].MdbClusterIDRef,
					Selector:     mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection[i5].MdbClusterIDSelector,
					To: reference.To{
						List:    &v1alpha12.PostgresqlClusterList{},
						Managed: &v1alpha12.PostgresqlCluster{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection[i5].MdbClusterID")
				}
				mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection[i5].MdbClusterID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection[i5].MdbClusterIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].PostgresSource); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise[i6].SubnetID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise[i6].SubnetIDRef,
						Selector:     mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise[i6].SubnetIDSelector,
						To: reference.To{
							List:    &v1alpha11.SubnetList{},
							Managed: &v1alpha11.Subnet{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise[i6].SubnetID")
					}
					mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise[i6].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise[i6].SubnetIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].PostgresSource); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Database),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].DatabaseRef,
				Selector:     mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].DatabaseSelector,
				To: reference.To{
					List:    &v1alpha12.PostgresqlDatabaseList{},
					Managed: &v1alpha12.PostgresqlDatabase{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Database")
			}
			mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].Database = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].DatabaseRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].PostgresSource); i4++ {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].SecurityGroups),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].SecurityGroupsRefs,
				Selector:      mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].SecurityGroupsSelector,
				To: reference.To{
					List:    &v1alpha11.SecurityGroupList{},
					Managed: &v1alpha11.SecurityGroup{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].SecurityGroups")
			}
			mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].SecurityGroupsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].PostgresSource); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].User),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].UserRef,
				Selector:     mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].UserSelector,
				To: reference.To{
					List:    &v1alpha12.PostgresqlUserList{},
					Managed: &v1alpha12.PostgresqlUser{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].User")
			}
			mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].User = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings[i3].PostgresSource[i4].UserRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].PostgresTarget); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection[i5].MdbClusterID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection[i5].MdbClusterIDRef,
					Selector:     mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection[i5].MdbClusterIDSelector,
					To: reference.To{
						List:    &v1alpha12.PostgresqlClusterList{},
						Managed: &v1alpha12.PostgresqlCluster{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection[i5].MdbClusterID")
				}
				mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection[i5].MdbClusterID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection[i5].MdbClusterIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].PostgresTarget); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise[i6].SubnetID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise[i6].SubnetIDRef,
						Selector:     mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise[i6].SubnetIDSelector,
						To: reference.To{
							List:    &v1alpha11.SubnetList{},
							Managed: &v1alpha11.Subnet{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise[i6].SubnetID")
					}
					mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise[i6].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise[i6].SubnetIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].PostgresTarget); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Database),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].DatabaseRef,
				Selector:     mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].DatabaseSelector,
				To: reference.To{
					List:    &v1alpha12.PostgresqlDatabaseList{},
					Managed: &v1alpha12.PostgresqlDatabase{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Database")
			}
			mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].Database = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].DatabaseRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].PostgresTarget); i4++ {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].SecurityGroups),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].SecurityGroupsRefs,
				Selector:      mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].SecurityGroupsSelector,
				To: reference.To{
					List:    &v1alpha11.SecurityGroupList{},
					Managed: &v1alpha11.SecurityGroup{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].SecurityGroups")
			}
			mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].SecurityGroupsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings[i3].PostgresTarget); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].User),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].UserRef,
				Selector:     mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].UserSelector,
				To: reference.To{
					List:    &v1alpha12.PostgresqlUserList{},
					Managed: &v1alpha12.PostgresqlUser{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].User")
			}
			mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].User = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings[i3].PostgresTarget[i4].UserRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FolderIDRef,
		Selector:     mg.Spec.InitProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FolderID")
	}
	mg.Spec.InitProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FolderIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].ClickhouseSource); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].ClickhouseSource[i4].SubnetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Settings[i3].ClickhouseSource[i4].SubnetIDRef,
				Selector:     mg.Spec.InitProvider.Settings[i3].ClickhouseSource[i4].SubnetIDSelector,
				To: reference.To{
					List:    &v1alpha11.SubnetList{},
					Managed: &v1alpha11.Subnet{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].ClickhouseSource[i4].SubnetID")
			}
			mg.Spec.InitProvider.Settings[i3].ClickhouseSource[i4].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings[i3].ClickhouseSource[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].ClickhouseTarget); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].ClickhouseTarget[i4].SubnetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Settings[i3].ClickhouseTarget[i4].SubnetIDRef,
				Selector:     mg.Spec.InitProvider.Settings[i3].ClickhouseTarget[i4].SubnetIDSelector,
				To: reference.To{
					List:    &v1alpha11.SubnetList{},
					Managed: &v1alpha11.Subnet{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].ClickhouseTarget[i4].SubnetID")
			}
			mg.Spec.InitProvider.Settings[i3].ClickhouseTarget[i4].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings[i3].ClickhouseTarget[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MongoSource); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Settings[i3].MongoSource[i4].Connection); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions[i6].MdbClusterID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions[i6].MdbClusterIDRef,
						Selector:     mg.Spec.InitProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions[i6].MdbClusterIDSelector,
						To: reference.To{
							List:    &v1alpha12.MongodbClusterList{},
							Managed: &v1alpha12.MongodbCluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions[i6].MdbClusterID")
					}
					mg.Spec.InitProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions[i6].MdbClusterID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.Settings[i3].MongoSource[i4].Connection[i5].ConnectionOptions[i6].MdbClusterIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MongoSource); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].MongoSource[i4].SubnetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Settings[i3].MongoSource[i4].SubnetIDRef,
				Selector:     mg.Spec.InitProvider.Settings[i3].MongoSource[i4].SubnetIDSelector,
				To: reference.To{
					List:    &v1alpha11.SubnetList{},
					Managed: &v1alpha11.Subnet{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MongoSource[i4].SubnetID")
			}
			mg.Spec.InitProvider.Settings[i3].MongoSource[i4].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings[i3].MongoSource[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MongoTarget); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].Connection); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions[i6].MdbClusterID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions[i6].MdbClusterIDRef,
						Selector:     mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions[i6].MdbClusterIDSelector,
						To: reference.To{
							List:    &v1alpha12.MongodbClusterList{},
							Managed: &v1alpha12.MongodbCluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions[i6].MdbClusterID")
					}
					mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions[i6].MdbClusterID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].Connection[i5].ConnectionOptions[i6].MdbClusterIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MongoTarget); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].SubnetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].SubnetIDRef,
				Selector:     mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].SubnetIDSelector,
				To: reference.To{
					List:    &v1alpha11.SubnetList{},
					Managed: &v1alpha11.Subnet{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].SubnetID")
			}
			mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings[i3].MongoTarget[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MySQLSource); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection[i5].MdbClusterID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection[i5].MdbClusterIDRef,
					Selector:     mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection[i5].MdbClusterIDSelector,
					To: reference.To{
						List:    &v1alpha12.MySQLClusterList{},
						Managed: &v1alpha12.MySQLCluster{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection[i5].MdbClusterID")
				}
				mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection[i5].MdbClusterID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection[i5].MdbClusterIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MySQLSource); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise[i6].SubnetID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise[i6].SubnetIDRef,
						Selector:     mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise[i6].SubnetIDSelector,
						To: reference.To{
							List:    &v1alpha11.SubnetList{},
							Managed: &v1alpha11.Subnet{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise[i6].SubnetID")
					}
					mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise[i6].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Connection[i5].OnPremise[i6].SubnetIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MySQLSource); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Database),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].DatabaseRef,
				Selector:     mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].DatabaseSelector,
				To: reference.To{
					List:    &v1alpha12.MySQLDatabaseList{},
					Managed: &v1alpha12.MySQLDatabase{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Database")
			}
			mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].Database = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].DatabaseRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MySQLSource); i4++ {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].SecurityGroups),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].SecurityGroupsRefs,
				Selector:      mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].SecurityGroupsSelector,
				To: reference.To{
					List:    &v1alpha11.SecurityGroupList{},
					Managed: &v1alpha11.SecurityGroup{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].SecurityGroups")
			}
			mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].SecurityGroupsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MySQLSource); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].User),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].UserRef,
				Selector:     mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].UserSelector,
				To: reference.To{
					List:    &v1alpha12.MySQLUserList{},
					Managed: &v1alpha12.MySQLUser{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].User")
			}
			mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].User = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings[i3].MySQLSource[i4].UserRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MySQLTarget); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection[i5].MdbClusterID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection[i5].MdbClusterIDRef,
					Selector:     mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection[i5].MdbClusterIDSelector,
					To: reference.To{
						List:    &v1alpha12.MySQLClusterList{},
						Managed: &v1alpha12.MySQLCluster{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection[i5].MdbClusterID")
				}
				mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection[i5].MdbClusterID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection[i5].MdbClusterIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MySQLTarget); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise[i6].SubnetID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise[i6].SubnetIDRef,
						Selector:     mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise[i6].SubnetIDSelector,
						To: reference.To{
							List:    &v1alpha11.SubnetList{},
							Managed: &v1alpha11.Subnet{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise[i6].SubnetID")
					}
					mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise[i6].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Connection[i5].OnPremise[i6].SubnetIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MySQLTarget); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Database),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].DatabaseRef,
				Selector:     mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].DatabaseSelector,
				To: reference.To{
					List:    &v1alpha12.MySQLDatabaseList{},
					Managed: &v1alpha12.MySQLDatabase{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Database")
			}
			mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].Database = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].DatabaseRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MySQLTarget); i4++ {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].SecurityGroups),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].SecurityGroupsRefs,
				Selector:      mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].SecurityGroupsSelector,
				To: reference.To{
					List:    &v1alpha11.SecurityGroupList{},
					Managed: &v1alpha11.SecurityGroup{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].SecurityGroups")
			}
			mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].SecurityGroupsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].MySQLTarget); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].User),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].UserRef,
				Selector:     mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].UserSelector,
				To: reference.To{
					List:    &v1alpha12.MySQLUserList{},
					Managed: &v1alpha12.MySQLUser{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].User")
			}
			mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].User = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings[i3].MySQLTarget[i4].UserRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].PostgresSource); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection[i5].MdbClusterID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection[i5].MdbClusterIDRef,
					Selector:     mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection[i5].MdbClusterIDSelector,
					To: reference.To{
						List:    &v1alpha12.PostgresqlClusterList{},
						Managed: &v1alpha12.PostgresqlCluster{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection[i5].MdbClusterID")
				}
				mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection[i5].MdbClusterID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection[i5].MdbClusterIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].PostgresSource); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise[i6].SubnetID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise[i6].SubnetIDRef,
						Selector:     mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise[i6].SubnetIDSelector,
						To: reference.To{
							List:    &v1alpha11.SubnetList{},
							Managed: &v1alpha11.Subnet{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise[i6].SubnetID")
					}
					mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise[i6].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Connection[i5].OnPremise[i6].SubnetIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].PostgresSource); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Database),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].DatabaseRef,
				Selector:     mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].DatabaseSelector,
				To: reference.To{
					List:    &v1alpha12.PostgresqlDatabaseList{},
					Managed: &v1alpha12.PostgresqlDatabase{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Database")
			}
			mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].Database = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].DatabaseRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].PostgresSource); i4++ {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].SecurityGroups),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].SecurityGroupsRefs,
				Selector:      mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].SecurityGroupsSelector,
				To: reference.To{
					List:    &v1alpha11.SecurityGroupList{},
					Managed: &v1alpha11.SecurityGroup{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].SecurityGroups")
			}
			mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].SecurityGroupsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].PostgresSource); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].User),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].UserRef,
				Selector:     mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].UserSelector,
				To: reference.To{
					List:    &v1alpha12.PostgresqlUserList{},
					Managed: &v1alpha12.PostgresqlUser{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].User")
			}
			mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].User = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings[i3].PostgresSource[i4].UserRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].PostgresTarget); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection[i5].MdbClusterID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection[i5].MdbClusterIDRef,
					Selector:     mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection[i5].MdbClusterIDSelector,
					To: reference.To{
						List:    &v1alpha12.PostgresqlClusterList{},
						Managed: &v1alpha12.PostgresqlCluster{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection[i5].MdbClusterID")
				}
				mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection[i5].MdbClusterID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection[i5].MdbClusterIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].PostgresTarget); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise[i6].SubnetID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise[i6].SubnetIDRef,
						Selector:     mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise[i6].SubnetIDSelector,
						To: reference.To{
							List:    &v1alpha11.SubnetList{},
							Managed: &v1alpha11.Subnet{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise[i6].SubnetID")
					}
					mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise[i6].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Connection[i5].OnPremise[i6].SubnetIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].PostgresTarget); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Database),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].DatabaseRef,
				Selector:     mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].DatabaseSelector,
				To: reference.To{
					List:    &v1alpha12.PostgresqlDatabaseList{},
					Managed: &v1alpha12.PostgresqlDatabase{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Database")
			}
			mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].Database = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].DatabaseRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].PostgresTarget); i4++ {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].SecurityGroups),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].SecurityGroupsRefs,
				Selector:      mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].SecurityGroupsSelector,
				To: reference.To{
					List:    &v1alpha11.SecurityGroupList{},
					Managed: &v1alpha11.SecurityGroup{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].SecurityGroups")
			}
			mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].SecurityGroupsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Settings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings[i3].PostgresTarget); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].User),
				Extract:      common.ExtractSpecName(),
				Reference:    mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].UserRef,
				Selector:     mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].UserSelector,
				To: reference.To{
					List:    &v1alpha12.PostgresqlUserList{},
					Managed: &v1alpha12.PostgresqlUser{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].User")
			}
			mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].User = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings[i3].PostgresTarget[i4].UserRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this Transfer.
func (mg *Transfer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FolderIDRef,
		Selector:     mg.Spec.ForProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FolderID")
	}
	mg.Spec.ForProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SourceIDRef,
		Selector:     mg.Spec.ForProvider.SourceIDSelector,
		To: reference.To{
			List:    &EndpointList{},
			Managed: &Endpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SourceID")
	}
	mg.Spec.ForProvider.SourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TargetIDRef,
		Selector:     mg.Spec.ForProvider.TargetIDSelector,
		To: reference.To{
			List:    &EndpointList{},
			Managed: &Endpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetID")
	}
	mg.Spec.ForProvider.TargetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FolderIDRef,
		Selector:     mg.Spec.InitProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha1.FolderList{},
			Managed: &v1alpha1.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FolderID")
	}
	mg.Spec.InitProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FolderIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SourceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.SourceIDRef,
		Selector:     mg.Spec.InitProvider.SourceIDSelector,
		To: reference.To{
			List:    &EndpointList{},
			Managed: &Endpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SourceID")
	}
	mg.Spec.InitProvider.SourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SourceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TargetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.TargetIDRef,
		Selector:     mg.Spec.InitProvider.TargetIDSelector,
		To: reference.To{
			List:    &EndpointList{},
			Managed: &Endpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetID")
	}
	mg.Spec.InitProvider.TargetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetIDRef = rsp.ResolvedReference

	return nil
}
