// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AltNamesInitParameters struct {

	// Name of the endpoint.
	FromName *string `json:"fromName,omitempty" tf:"from_name,omitempty"`

	// Name of the endpoint.
	ToName *string `json:"toName,omitempty" tf:"to_name,omitempty"`
}

type AltNamesObservation struct {

	// Name of the endpoint.
	FromName *string `json:"fromName,omitempty" tf:"from_name,omitempty"`

	// Name of the endpoint.
	ToName *string `json:"toName,omitempty" tf:"to_name,omitempty"`
}

type AltNamesParameters struct {

	// Name of the endpoint.
	// +kubebuilder:validation:Optional
	FromName *string `json:"fromName,omitempty" tf:"from_name,omitempty"`

	// Name of the endpoint.
	// +kubebuilder:validation:Optional
	ToName *string `json:"toName,omitempty" tf:"to_name,omitempty"`
}

type AuditTrailsV1ParserInitParameters struct {
}

type AuditTrailsV1ParserObservation struct {
}

type AuditTrailsV1ParserParameters struct {
}

type AuthInitParameters struct {

	// Connection without authentication data.
	NoAuth []NoAuthInitParameters `json:"noAuth,omitempty" tf:"no_auth,omitempty"`

	// Authentication using sasl.
	Sasl []SaslInitParameters `json:"sasl,omitempty" tf:"sasl,omitempty"`
}

type AuthNoAuthInitParameters struct {
}

type AuthNoAuthObservation struct {
}

type AuthNoAuthParameters struct {
}

type AuthObservation struct {

	// Connection without authentication data.
	NoAuth []NoAuthParameters `json:"noAuth,omitempty" tf:"no_auth,omitempty"`

	// Authentication using sasl.
	Sasl []SaslObservation `json:"sasl,omitempty" tf:"sasl,omitempty"`
}

type AuthParameters struct {

	// Connection without authentication data.
	// +kubebuilder:validation:Optional
	NoAuth []NoAuthParameters `json:"noAuth,omitempty" tf:"no_auth,omitempty"`

	// Authentication using sasl.
	// +kubebuilder:validation:Optional
	Sasl []SaslParameters `json:"sasl,omitempty" tf:"sasl,omitempty"`
}

type AuthSaslInitParameters struct {
	Mechanism *string `json:"mechanism,omitempty" tf:"mechanism,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []AuthSaslPasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type AuthSaslObservation struct {
	Mechanism *string `json:"mechanism,omitempty" tf:"mechanism,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []AuthSaslPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type AuthSaslParameters struct {

	// +kubebuilder:validation:Optional
	Mechanism *string `json:"mechanism,omitempty" tf:"mechanism,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []AuthSaslPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type AuthSaslPasswordInitParameters struct {
}

type AuthSaslPasswordObservation struct {
}

type AuthSaslPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type ClickhouseSourceInitParameters struct {

	// Connection settings.
	Connection []ConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type ClickhouseSourceObservation struct {

	// Connection settings.
	Connection []ConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type ClickhouseSourceParameters struct {

	// Connection settings.
	// +kubebuilder:validation:Optional
	Connection []ConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	// +kubebuilder:validation:Optional
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	// +kubebuilder:validation:Optional
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type ClickhouseTargetConnectionInitParameters struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []ConnectionConnectionOptionsInitParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type ClickhouseTargetConnectionObservation struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []ConnectionConnectionOptionsObservation `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type ClickhouseTargetConnectionParameters struct {

	// Connection options. The structure is documented below.
	// +kubebuilder:validation:Optional
	ConnectionOptions []ConnectionConnectionOptionsParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type ClickhouseTargetInitParameters struct {

	// Table renaming rules. The structure is documented below.
	AltNames []AltNamesInitParameters `json:"altNames,omitempty" tf:"alt_names,omitempty"`

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Name of the ClickHouse cluster. For managed ClickHouse clusters defaults to managed cluster ID.
	ClickhouseClusterName *string `json:"clickhouseClusterName,omitempty" tf:"clickhouse_cluster_name,omitempty"`

	// Connection settings.
	Connection []ClickhouseTargetConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Shard selection rules for the data being transferred. The structure is documented below.
	Sharding []ShardingInitParameters `json:"sharding,omitempty" tf:"sharding,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type ClickhouseTargetObservation struct {

	// Table renaming rules. The structure is documented below.
	AltNames []AltNamesObservation `json:"altNames,omitempty" tf:"alt_names,omitempty"`

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Name of the ClickHouse cluster. For managed ClickHouse clusters defaults to managed cluster ID.
	ClickhouseClusterName *string `json:"clickhouseClusterName,omitempty" tf:"clickhouse_cluster_name,omitempty"`

	// Connection settings.
	Connection []ClickhouseTargetConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Shard selection rules for the data being transferred. The structure is documented below.
	Sharding []ShardingObservation `json:"sharding,omitempty" tf:"sharding,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type ClickhouseTargetParameters struct {

	// Table renaming rules. The structure is documented below.
	// +kubebuilder:validation:Optional
	AltNames []AltNamesParameters `json:"altNames,omitempty" tf:"alt_names,omitempty"`

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	// +kubebuilder:validation:Optional
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Name of the ClickHouse cluster. For managed ClickHouse clusters defaults to managed cluster ID.
	// +kubebuilder:validation:Optional
	ClickhouseClusterName *string `json:"clickhouseClusterName,omitempty" tf:"clickhouse_cluster_name,omitempty"`

	// Connection settings.
	// +kubebuilder:validation:Optional
	Connection []ClickhouseTargetConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Shard selection rules for the data being transferred. The structure is documented below.
	// +kubebuilder:validation:Optional
	Sharding []ShardingParameters `json:"sharding,omitempty" tf:"sharding,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type CloudLoggingParserInitParameters struct {
}

type CloudLoggingParserObservation struct {
}

type CloudLoggingParserParameters struct {
}

type CollectionsInitParameters struct {

	// Collection name.
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type CollectionsObservation struct {

	// Collection name.
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type CollectionsParameters struct {

	// Collection name.
	// +kubebuilder:validation:Optional
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type ColumnValueHashInitParameters struct {

	// The name of the column to calculate hash from.
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`
}

type ColumnValueHashObservation struct {

	// The name of the column to calculate hash from.
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`
}

type ColumnValueHashParameters struct {

	// The name of the column to calculate hash from.
	// +kubebuilder:validation:Optional
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`
}

type ColumnValueInitParameters struct {

	// The string value of the column.
	StringValue *string `json:"stringValue,omitempty" tf:"string_value,omitempty"`
}

type ColumnValueObservation struct {

	// The string value of the column.
	StringValue *string `json:"stringValue,omitempty" tf:"string_value,omitempty"`
}

type ColumnValueParameters struct {

	// The string value of the column.
	// +kubebuilder:validation:Optional
	StringValue *string `json:"stringValue,omitempty" tf:"string_value,omitempty"`
}

type ConnectionConnectionOptionsInitParameters struct {

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []ConnectionOptionsOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []ConnectionOptionsPasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionConnectionOptionsObservation struct {

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []ConnectionOptionsOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []ConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []ConnectionOptionsOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []ConnectionOptionsOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	// +kubebuilder:validation:Optional
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []ConnectionOptionsOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseTLSModeDisabledInitParameters struct {
}

type ConnectionConnectionOptionsOnPremiseTLSModeDisabledObservation struct {
}

type ConnectionConnectionOptionsOnPremiseTLSModeDisabledParameters struct {
}

type ConnectionConnectionOptionsOnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []ConnectionConnectionOptionsOnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []ConnectionConnectionOptionsOnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []ConnectionConnectionOptionsOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []ConnectionConnectionOptionsOnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []ConnectionConnectionOptionsOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []ConnectionConnectionOptionsOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionConnectionOptionsParameters struct {

	// -  Database.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []ConnectionOptionsOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []ConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionConnectionOptionsPasswordInitParameters struct {
}

type ConnectionConnectionOptionsPasswordObservation struct {
}

type ConnectionConnectionOptionsPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type ConnectionInitParameters struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []ConnectionOptionsInitParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type ConnectionObservation struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []ConnectionOptionsObservation `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type ConnectionOnPremiseInitParameters struct {

	// List of Kafka broker URLs.
	BrokerUrls []*string `json:"brokerUrls,omitempty" tf:"broker_urls,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []ConnectionOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOnPremiseObservation struct {

	// List of Kafka broker URLs.
	BrokerUrls []*string `json:"brokerUrls,omitempty" tf:"broker_urls,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []ConnectionOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOnPremiseParameters struct {

	// List of Kafka broker URLs.
	// +kubebuilder:validation:Optional
	BrokerUrls []*string `json:"brokerUrls,omitempty" tf:"broker_urls,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []ConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOnPremiseTLSModeDisabledInitParameters struct {
}

type ConnectionOnPremiseTLSModeDisabledObservation struct {
}

type ConnectionOnPremiseTLSModeDisabledParameters struct {
}

type ConnectionOnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []OnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []OnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []OnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []OnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []OnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []OnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOptionsInitParameters struct {

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []OnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []PasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionOptionsObservation struct {

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []OnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []PasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionOptionsOnPremiseInitParameters struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	Shards []OnPremiseShardsInitParameters `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []OnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOptionsOnPremiseObservation struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	Shards []OnPremiseShardsObservation `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []OnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOptionsOnPremiseParameters struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	// +kubebuilder:validation:Optional
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	// +kubebuilder:validation:Optional
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	// +kubebuilder:validation:Optional
	Shards []OnPremiseShardsParameters `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []OnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeDisabledInitParameters struct {
}

type ConnectionOptionsOnPremiseTLSModeDisabledObservation struct {
}

type ConnectionOptionsOnPremiseTLSModeDisabledParameters struct {
}

type ConnectionOptionsOnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []ConnectionOptionsOnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []ConnectionOptionsOnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []ConnectionOptionsOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []ConnectionOptionsOnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []ConnectionOptionsOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []ConnectionOptionsOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOptionsParameters struct {

	// -  Database.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []OnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []PasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionOptionsPasswordInitParameters struct {
}

type ConnectionOptionsPasswordObservation struct {
}

type ConnectionOptionsPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type ConnectionParameters struct {

	// Connection options. The structure is documented below.
	// +kubebuilder:validation:Optional
	ConnectionOptions []ConnectionOptionsParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type CustomMappingInitParameters struct {

	// The name of the column to calculate hash from.
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`

	// The mapping of the specified column values to the shard names. The structure is documented below.
	Mapping []MappingInitParameters `json:"mapping,omitempty" tf:"mapping,omitempty"`
}

type CustomMappingObservation struct {

	// The name of the column to calculate hash from.
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`

	// The mapping of the specified column values to the shard names. The structure is documented below.
	Mapping []MappingObservation `json:"mapping,omitempty" tf:"mapping,omitempty"`
}

type CustomMappingParameters struct {

	// The name of the column to calculate hash from.
	// +kubebuilder:validation:Optional
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`

	// The mapping of the specified column values to the shard names. The structure is documented below.
	// +kubebuilder:validation:Optional
	Mapping []MappingParameters `json:"mapping,omitempty" tf:"mapping,omitempty"`
}

type DataSchemaFieldsFieldsInitParameters struct {

	// Mark field as Primary Key.
	Key *bool `json:"key,omitempty" tf:"key,omitempty"`

	// Field name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// -  A path where resulting tables are stored.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Mark field as required.
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DataSchemaFieldsFieldsObservation struct {

	// Mark field as Primary Key.
	Key *bool `json:"key,omitempty" tf:"key,omitempty"`

	// Field name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// -  A path where resulting tables are stored.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Mark field as required.
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DataSchemaFieldsFieldsParameters struct {

	// Mark field as Primary Key.
	// +kubebuilder:validation:Optional
	Key *bool `json:"key,omitempty" tf:"key,omitempty"`

	// Field name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// -  A path where resulting tables are stored.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Mark field as required.
	// +kubebuilder:validation:Optional
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DataSchemaFieldsInitParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []DataSchemaFieldsFieldsInitParameters `json:"fields,omitempty" tf:"fields,omitempty"`
}

type DataSchemaFieldsObservation struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []DataSchemaFieldsFieldsObservation `json:"fields,omitempty" tf:"fields,omitempty"`
}

type DataSchemaFieldsParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	// +kubebuilder:validation:Optional
	Fields []DataSchemaFieldsFieldsParameters `json:"fields,omitempty" tf:"fields,omitempty"`
}

type DataSchemaInitParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []FieldsInitParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Description of the data schema as JSON specification.
	JSONFields *string `json:"jsonFields,omitempty" tf:"json_fields,omitempty"`
}

type DataSchemaObservation struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []FieldsObservation `json:"fields,omitempty" tf:"fields,omitempty"`

	// Description of the data schema as JSON specification.
	JSONFields *string `json:"jsonFields,omitempty" tf:"json_fields,omitempty"`
}

type DataSchemaParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	// +kubebuilder:validation:Optional
	Fields []FieldsParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Description of the data schema as JSON specification.
	// +kubebuilder:validation:Optional
	JSONFields *string `json:"jsonFields,omitempty" tf:"json_fields,omitempty"`
}

type DisabledInitParameters struct {
}

type DisabledObservation struct {
}

type DisabledParameters struct {
}

type EnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type EnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type EnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type EndpointInitParameters struct {

	// Arbitrary description text for the endpoint.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the Data Transfer endpoint.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the endpoint.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Settings for the endpoint. The structure is documented below.
	Settings []SettingsInitParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type EndpointObservation struct {

	// Arbitrary description text for the endpoint.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// (Computed) Identifier of a new Data Transfer endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of key/value label pairs to assign to the Data Transfer endpoint.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the endpoint.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Settings for the endpoint. The structure is documented below.
	Settings []SettingsObservation `json:"settings,omitempty" tf:"settings,omitempty"`
}

type EndpointParameters struct {

	// Arbitrary description text for the endpoint.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the Data Transfer endpoint.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the endpoint.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Settings for the endpoint. The structure is documented below.
	// +kubebuilder:validation:Optional
	Settings []SettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type ExcludedCollectionsInitParameters struct {

	// Collection name.
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type ExcludedCollectionsObservation struct {

	// Collection name.
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type ExcludedCollectionsParameters struct {

	// Collection name.
	// +kubebuilder:validation:Optional
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type FieldsFieldsInitParameters struct {

	// Mark field as Primary Key.
	Key *bool `json:"key,omitempty" tf:"key,omitempty"`

	// Field name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// -  A path where resulting tables are stored.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Mark field as required.
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FieldsFieldsObservation struct {

	// Mark field as Primary Key.
	Key *bool `json:"key,omitempty" tf:"key,omitempty"`

	// Field name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// -  A path where resulting tables are stored.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Mark field as required.
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FieldsFieldsParameters struct {

	// Mark field as Primary Key.
	// +kubebuilder:validation:Optional
	Key *bool `json:"key,omitempty" tf:"key,omitempty"`

	// Field name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// -  A path where resulting tables are stored.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Mark field as required.
	// +kubebuilder:validation:Optional
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FieldsInitParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []FieldsFieldsInitParameters `json:"fields,omitempty" tf:"fields,omitempty"`
}

type FieldsObservation struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []FieldsFieldsObservation `json:"fields,omitempty" tf:"fields,omitempty"`
}

type FieldsParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	// +kubebuilder:validation:Optional
	Fields []FieldsFieldsParameters `json:"fields,omitempty" tf:"fields,omitempty"`
}

type JSONParserDataSchemaFieldsFieldsInitParameters struct {

	// Mark field as Primary Key.
	Key *bool `json:"key,omitempty" tf:"key,omitempty"`

	// Field name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// -  A path where resulting tables are stored.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Mark field as required.
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type JSONParserDataSchemaFieldsFieldsObservation struct {

	// Mark field as Primary Key.
	Key *bool `json:"key,omitempty" tf:"key,omitempty"`

	// Field name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// -  A path where resulting tables are stored.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Mark field as required.
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type JSONParserDataSchemaFieldsFieldsParameters struct {

	// Mark field as Primary Key.
	// +kubebuilder:validation:Optional
	Key *bool `json:"key,omitempty" tf:"key,omitempty"`

	// Field name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// -  A path where resulting tables are stored.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Mark field as required.
	// +kubebuilder:validation:Optional
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type JSONParserDataSchemaFieldsInitParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []JSONParserDataSchemaFieldsFieldsInitParameters `json:"fields,omitempty" tf:"fields,omitempty"`
}

type JSONParserDataSchemaFieldsObservation struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []JSONParserDataSchemaFieldsFieldsObservation `json:"fields,omitempty" tf:"fields,omitempty"`
}

type JSONParserDataSchemaFieldsParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	// +kubebuilder:validation:Optional
	Fields []JSONParserDataSchemaFieldsFieldsParameters `json:"fields,omitempty" tf:"fields,omitempty"`
}

type JSONParserDataSchemaInitParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []JSONParserDataSchemaFieldsInitParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Description of the data schema as JSON specification.
	JSONFields *string `json:"jsonFields,omitempty" tf:"json_fields,omitempty"`
}

type JSONParserDataSchemaObservation struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []JSONParserDataSchemaFieldsObservation `json:"fields,omitempty" tf:"fields,omitempty"`

	// Description of the data schema as JSON specification.
	JSONFields *string `json:"jsonFields,omitempty" tf:"json_fields,omitempty"`
}

type JSONParserDataSchemaParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	// +kubebuilder:validation:Optional
	Fields []JSONParserDataSchemaFieldsParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Description of the data schema as JSON specification.
	// +kubebuilder:validation:Optional
	JSONFields *string `json:"jsonFields,omitempty" tf:"json_fields,omitempty"`
}

type JSONParserInitParameters struct {

	// Add fields, that are not in the schema, into the _rest column.
	AddRestColumn *bool `json:"addRestColumn,omitempty" tf:"add_rest_column,omitempty"`

	// Data parsing scheme.The structure is documented below.
	DataSchema []DataSchemaInitParameters `json:"dataSchema,omitempty" tf:"data_schema,omitempty"`

	// Allow null keys. If false - null keys will be putted to unparsed data
	NullKeysAllowed *bool `json:"nullKeysAllowed,omitempty" tf:"null_keys_allowed,omitempty"`

	// Allow unescape string values.
	UnescapeStringValues *bool `json:"unescapeStringValues,omitempty" tf:"unescape_string_values,omitempty"`
}

type JSONParserObservation struct {

	// Add fields, that are not in the schema, into the _rest column.
	AddRestColumn *bool `json:"addRestColumn,omitempty" tf:"add_rest_column,omitempty"`

	// Data parsing scheme.The structure is documented below.
	DataSchema []DataSchemaObservation `json:"dataSchema,omitempty" tf:"data_schema,omitempty"`

	// Allow null keys. If false - null keys will be putted to unparsed data
	NullKeysAllowed *bool `json:"nullKeysAllowed,omitempty" tf:"null_keys_allowed,omitempty"`

	// Allow unescape string values.
	UnescapeStringValues *bool `json:"unescapeStringValues,omitempty" tf:"unescape_string_values,omitempty"`
}

type JSONParserParameters struct {

	// Add fields, that are not in the schema, into the _rest column.
	// +kubebuilder:validation:Optional
	AddRestColumn *bool `json:"addRestColumn,omitempty" tf:"add_rest_column,omitempty"`

	// Data parsing scheme.The structure is documented below.
	// +kubebuilder:validation:Optional
	DataSchema []DataSchemaParameters `json:"dataSchema,omitempty" tf:"data_schema,omitempty"`

	// Allow null keys. If false - null keys will be putted to unparsed data
	// +kubebuilder:validation:Optional
	NullKeysAllowed *bool `json:"nullKeysAllowed,omitempty" tf:"null_keys_allowed,omitempty"`

	// Allow unescape string values.
	// +kubebuilder:validation:Optional
	UnescapeStringValues *bool `json:"unescapeStringValues,omitempty" tf:"unescape_string_values,omitempty"`
}

type KafkaSourceConnectionInitParameters struct {

	// Identifier of the Managed Kafka cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []ConnectionOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type KafkaSourceConnectionObservation struct {

	// Identifier of the Managed Kafka cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []ConnectionOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type KafkaSourceConnectionParameters struct {

	// Identifier of the Managed Kafka cluster.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []ConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type KafkaSourceInitParameters struct {

	// Authentication data.
	Auth []AuthInitParameters `json:"auth,omitempty" tf:"auth,omitempty"`

	// Connection settings.
	Connection []KafkaSourceConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Data parsing rules.
	Parser []ParserInitParameters `json:"parser,omitempty" tf:"parser,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Full topic name
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`

	// The list of full source topic names.
	TopicNames []*string `json:"topicNames,omitempty" tf:"topic_names,omitempty"`

	// Transform data with a custom Cloud Function.
	Transformer []TransformerInitParameters `json:"transformer,omitempty" tf:"transformer,omitempty"`
}

type KafkaSourceObservation struct {

	// Authentication data.
	Auth []AuthObservation `json:"auth,omitempty" tf:"auth,omitempty"`

	// Connection settings.
	Connection []KafkaSourceConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Data parsing rules.
	Parser []ParserObservation `json:"parser,omitempty" tf:"parser,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Full topic name
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`

	// The list of full source topic names.
	TopicNames []*string `json:"topicNames,omitempty" tf:"topic_names,omitempty"`

	// Transform data with a custom Cloud Function.
	Transformer []TransformerObservation `json:"transformer,omitempty" tf:"transformer,omitempty"`
}

type KafkaSourceParameters struct {

	// Authentication data.
	// +kubebuilder:validation:Optional
	Auth []AuthParameters `json:"auth,omitempty" tf:"auth,omitempty"`

	// Connection settings.
	// +kubebuilder:validation:Optional
	Connection []KafkaSourceConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Data parsing rules.
	// +kubebuilder:validation:Optional
	Parser []ParserParameters `json:"parser,omitempty" tf:"parser,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Full topic name
	// +kubebuilder:validation:Optional
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`

	// The list of full source topic names.
	// +kubebuilder:validation:Optional
	TopicNames []*string `json:"topicNames,omitempty" tf:"topic_names,omitempty"`

	// Transform data with a custom Cloud Function.
	// +kubebuilder:validation:Optional
	Transformer []TransformerParameters `json:"transformer,omitempty" tf:"transformer,omitempty"`
}

type KafkaTargetAuthInitParameters struct {

	// Connection without authentication data.
	NoAuth []AuthNoAuthInitParameters `json:"noAuth,omitempty" tf:"no_auth,omitempty"`

	// Authentication using sasl.
	Sasl []AuthSaslInitParameters `json:"sasl,omitempty" tf:"sasl,omitempty"`
}

type KafkaTargetAuthObservation struct {

	// Connection without authentication data.
	NoAuth []AuthNoAuthParameters `json:"noAuth,omitempty" tf:"no_auth,omitempty"`

	// Authentication using sasl.
	Sasl []AuthSaslObservation `json:"sasl,omitempty" tf:"sasl,omitempty"`
}

type KafkaTargetAuthParameters struct {

	// Connection without authentication data.
	// +kubebuilder:validation:Optional
	NoAuth []AuthNoAuthParameters `json:"noAuth,omitempty" tf:"no_auth,omitempty"`

	// Authentication using sasl.
	// +kubebuilder:validation:Optional
	Sasl []AuthSaslParameters `json:"sasl,omitempty" tf:"sasl,omitempty"`
}

type KafkaTargetConnectionInitParameters struct {

	// Identifier of the Managed Kafka cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []KafkaTargetConnectionOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type KafkaTargetConnectionObservation struct {

	// Identifier of the Managed Kafka cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []KafkaTargetConnectionOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type KafkaTargetConnectionOnPremiseInitParameters struct {

	// List of Kafka broker URLs.
	BrokerUrls []*string `json:"brokerUrls,omitempty" tf:"broker_urls,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []KafkaTargetConnectionOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type KafkaTargetConnectionOnPremiseObservation struct {

	// List of Kafka broker URLs.
	BrokerUrls []*string `json:"brokerUrls,omitempty" tf:"broker_urls,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []KafkaTargetConnectionOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type KafkaTargetConnectionOnPremiseParameters struct {

	// List of Kafka broker URLs.
	// +kubebuilder:validation:Optional
	BrokerUrls []*string `json:"brokerUrls,omitempty" tf:"broker_urls,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []KafkaTargetConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type KafkaTargetConnectionOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []ConnectionOnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []ConnectionOnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type KafkaTargetConnectionOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []ConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []ConnectionOnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type KafkaTargetConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []ConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []ConnectionOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type KafkaTargetConnectionParameters struct {

	// Identifier of the Managed Kafka cluster.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []KafkaTargetConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type KafkaTargetInitParameters struct {

	// Authentication data.
	Auth []KafkaTargetAuthInitParameters `json:"auth,omitempty" tf:"auth,omitempty"`

	// Connection settings.
	Connection []KafkaTargetConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Data serialization format.
	Serializer []SerializerInitParameters `json:"serializer,omitempty" tf:"serializer,omitempty"`

	// Target topic settings.
	TopicSettings []TopicSettingsInitParameters `json:"topicSettings,omitempty" tf:"topic_settings,omitempty"`
}

type KafkaTargetObservation struct {

	// Authentication data.
	Auth []KafkaTargetAuthObservation `json:"auth,omitempty" tf:"auth,omitempty"`

	// Connection settings.
	Connection []KafkaTargetConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Data serialization format.
	Serializer []SerializerObservation `json:"serializer,omitempty" tf:"serializer,omitempty"`

	// Target topic settings.
	TopicSettings []TopicSettingsObservation `json:"topicSettings,omitempty" tf:"topic_settings,omitempty"`
}

type KafkaTargetParameters struct {

	// Authentication data.
	// +kubebuilder:validation:Optional
	Auth []KafkaTargetAuthParameters `json:"auth,omitempty" tf:"auth,omitempty"`

	// Connection settings.
	// +kubebuilder:validation:Optional
	Connection []KafkaTargetConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Data serialization format.
	// +kubebuilder:validation:Optional
	Serializer []SerializerParameters `json:"serializer,omitempty" tf:"serializer,omitempty"`

	// Target topic settings.
	// +kubebuilder:validation:Optional
	TopicSettings []TopicSettingsParameters `json:"topicSettings,omitempty" tf:"topic_settings,omitempty"`
}

type MappingInitParameters struct {

	// The value of the column. Currently only the string columns are supported. The structure is documented below.
	ColumnValue []ColumnValueInitParameters `json:"columnValue,omitempty" tf:"column_value,omitempty"`

	// The name of the shard into which all the rows with the specified column_value will be written.
	ShardName *string `json:"shardName,omitempty" tf:"shard_name,omitempty"`
}

type MappingObservation struct {

	// The value of the column. Currently only the string columns are supported. The structure is documented below.
	ColumnValue []ColumnValueObservation `json:"columnValue,omitempty" tf:"column_value,omitempty"`

	// The name of the shard into which all the rows with the specified column_value will be written.
	ShardName *string `json:"shardName,omitempty" tf:"shard_name,omitempty"`
}

type MappingParameters struct {

	// The value of the column. Currently only the string columns are supported. The structure is documented below.
	// +kubebuilder:validation:Optional
	ColumnValue []ColumnValueParameters `json:"columnValue,omitempty" tf:"column_value,omitempty"`

	// The name of the shard into which all the rows with the specified column_value will be written.
	// +kubebuilder:validation:Optional
	ShardName *string `json:"shardName,omitempty" tf:"shard_name,omitempty"`
}

type MongoSourceConnectionConnectionOptionsInitParameters struct {

	// Name of the database associated with the credentials.
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MongodbCluster
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []ConnectionConnectionOptionsOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []ConnectionConnectionOptionsPasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoSourceConnectionConnectionOptionsObservation struct {

	// Name of the database associated with the credentials.
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []ConnectionConnectionOptionsOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []ConnectionConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoSourceConnectionConnectionOptionsParameters struct {

	// Name of the database associated with the credentials.
	// +kubebuilder:validation:Optional
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MongodbCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []ConnectionConnectionOptionsOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []ConnectionConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoSourceConnectionInitParameters struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []MongoSourceConnectionConnectionOptionsInitParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoSourceConnectionObservation struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []MongoSourceConnectionConnectionOptionsObservation `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoSourceConnectionParameters struct {

	// Connection options. The structure is documented below.
	// +kubebuilder:validation:Optional
	ConnectionOptions []MongoSourceConnectionConnectionOptionsParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoSourceInitParameters struct {

	// The list of the MongoDB collections that should be transferred. If omitted, all available collections will be transferred. The structure of the list item is documented below.
	Collections []CollectionsInitParameters `json:"collections,omitempty" tf:"collections,omitempty"`

	// Connection settings.
	Connection []MongoSourceConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// The list of the MongoDB collections that should not be transferred.
	ExcludedCollections []ExcludedCollectionsInitParameters `json:"excludedCollections,omitempty" tf:"excluded_collections,omitempty"`

	// whether the secondary server should be preferred to the primary when copying data.
	SecondaryPreferredMode *bool `json:"secondaryPreferredMode,omitempty" tf:"secondary_preferred_mode,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type MongoSourceObservation struct {

	// The list of the MongoDB collections that should be transferred. If omitted, all available collections will be transferred. The structure of the list item is documented below.
	Collections []CollectionsObservation `json:"collections,omitempty" tf:"collections,omitempty"`

	// Connection settings.
	Connection []MongoSourceConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// The list of the MongoDB collections that should not be transferred.
	ExcludedCollections []ExcludedCollectionsObservation `json:"excludedCollections,omitempty" tf:"excluded_collections,omitempty"`

	// whether the secondary server should be preferred to the primary when copying data.
	SecondaryPreferredMode *bool `json:"secondaryPreferredMode,omitempty" tf:"secondary_preferred_mode,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type MongoSourceParameters struct {

	// The list of the MongoDB collections that should be transferred. If omitted, all available collections will be transferred. The structure of the list item is documented below.
	// +kubebuilder:validation:Optional
	Collections []CollectionsParameters `json:"collections,omitempty" tf:"collections,omitempty"`

	// Connection settings.
	// +kubebuilder:validation:Optional
	Connection []MongoSourceConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// The list of the MongoDB collections that should not be transferred.
	// +kubebuilder:validation:Optional
	ExcludedCollections []ExcludedCollectionsParameters `json:"excludedCollections,omitempty" tf:"excluded_collections,omitempty"`

	// whether the secondary server should be preferred to the primary when copying data.
	// +kubebuilder:validation:Optional
	SecondaryPreferredMode *bool `json:"secondaryPreferredMode,omitempty" tf:"secondary_preferred_mode,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type MongoTargetConnectionConnectionOptionsInitParameters struct {

	// Name of the database associated with the credentials.
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MongodbCluster
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []MongoTargetConnectionConnectionOptionsOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []MongoTargetConnectionConnectionOptionsPasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoTargetConnectionConnectionOptionsObservation struct {

	// Name of the database associated with the credentials.
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []MongoTargetConnectionConnectionOptionsOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []MongoTargetConnectionConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoTargetConnectionConnectionOptionsOnPremiseInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []ConnectionConnectionOptionsOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MongoTargetConnectionConnectionOptionsOnPremiseObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []ConnectionConnectionOptionsOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MongoTargetConnectionConnectionOptionsOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	// +kubebuilder:validation:Optional
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []ConnectionConnectionOptionsOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MongoTargetConnectionConnectionOptionsParameters struct {

	// Name of the database associated with the credentials.
	// +kubebuilder:validation:Optional
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MongodbCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []MongoTargetConnectionConnectionOptionsOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []MongoTargetConnectionConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoTargetConnectionConnectionOptionsPasswordInitParameters struct {
}

type MongoTargetConnectionConnectionOptionsPasswordObservation struct {
}

type MongoTargetConnectionConnectionOptionsPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type MongoTargetConnectionInitParameters struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []MongoTargetConnectionConnectionOptionsInitParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoTargetConnectionObservation struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []MongoTargetConnectionConnectionOptionsObservation `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoTargetConnectionParameters struct {

	// Connection options. The structure is documented below.
	// +kubebuilder:validation:Optional
	ConnectionOptions []MongoTargetConnectionConnectionOptionsParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoTargetInitParameters struct {

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Connection settings.
	Connection []MongoTargetConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type MongoTargetObservation struct {

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Connection settings.
	Connection []MongoTargetConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type MongoTargetParameters struct {

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	// +kubebuilder:validation:Optional
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Connection settings.
	// +kubebuilder:validation:Optional
	Connection []MongoTargetConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Database.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type MySQLSourceConnectionInitParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MySQLCluster
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []MySQLSourceConnectionOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLSourceConnectionObservation struct {

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []MySQLSourceConnectionOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLSourceConnectionOnPremiseInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []MySQLSourceConnectionOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MySQLSourceConnectionOnPremiseObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []MySQLSourceConnectionOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MySQLSourceConnectionOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []MySQLSourceConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MySQLSourceConnectionOnPremiseTLSModeDisabledInitParameters struct {
}

type MySQLSourceConnectionOnPremiseTLSModeDisabledObservation struct {
}

type MySQLSourceConnectionOnPremiseTLSModeDisabledParameters struct {
}

type MySQLSourceConnectionOnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type MySQLSourceConnectionOnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type MySQLSourceConnectionOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type MySQLSourceConnectionOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []MySQLSourceConnectionOnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []MySQLSourceConnectionOnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MySQLSourceConnectionOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []MySQLSourceConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []MySQLSourceConnectionOnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MySQLSourceConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []MySQLSourceConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []MySQLSourceConnectionOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MySQLSourceConnectionParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MySQLCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []MySQLSourceConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLSourceInitParameters struct {

	// Connection settings.
	Connection []MySQLSourceConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Database.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MySQLDatabase
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Opposite of include_table_regex. The tables matching the specified regular expressions will not be transferred.
	ExcludeTablesRegex []*string `json:"excludeTablesRegex,omitempty" tf:"exclude_tables_regex,omitempty"`

	// List of regular expressions of table names which should be transferred. A table name is formatted as schemaname.tablename. For example, a single regular expression may look like ^mydb.employees$.
	IncludeTablesRegex []*string `json:"includeTablesRegex,omitempty" tf:"include_tables_regex,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	ObjectTransferSettings []ObjectTransferSettingsInitParameters `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []MySQLSourcePasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.SecurityGroup
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// The name of the database where technical tables (__tm_keeper, __tm_gtid_keeper) will be created. Default is the value of the attribute database.
	ServiceDatabase *string `json:"serviceDatabase,omitempty" tf:"service_database,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MySQLUser
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type MySQLSourceObservation struct {

	// Connection settings.
	Connection []MySQLSourceConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Opposite of include_table_regex. The tables matching the specified regular expressions will not be transferred.
	ExcludeTablesRegex []*string `json:"excludeTablesRegex,omitempty" tf:"exclude_tables_regex,omitempty"`

	// List of regular expressions of table names which should be transferred. A table name is formatted as schemaname.tablename. For example, a single regular expression may look like ^mydb.employees$.
	IncludeTablesRegex []*string `json:"includeTablesRegex,omitempty" tf:"include_tables_regex,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	ObjectTransferSettings []ObjectTransferSettingsObservation `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []MySQLSourcePasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// The name of the database where technical tables (__tm_keeper, __tm_gtid_keeper) will be created. Default is the value of the attribute database.
	ServiceDatabase *string `json:"serviceDatabase,omitempty" tf:"service_database,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MySQLSourceParameters struct {

	// Connection settings.
	// +kubebuilder:validation:Optional
	Connection []MySQLSourceConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Database.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MySQLDatabase
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Opposite of include_table_regex. The tables matching the specified regular expressions will not be transferred.
	// +kubebuilder:validation:Optional
	ExcludeTablesRegex []*string `json:"excludeTablesRegex,omitempty" tf:"exclude_tables_regex,omitempty"`

	// List of regular expressions of table names which should be transferred. A table name is formatted as schemaname.tablename. For example, a single regular expression may look like ^mydb.employees$.
	// +kubebuilder:validation:Optional
	IncludeTablesRegex []*string `json:"includeTablesRegex,omitempty" tf:"include_tables_regex,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	// +kubebuilder:validation:Optional
	ObjectTransferSettings []ObjectTransferSettingsParameters `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []MySQLSourcePasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// The name of the database where technical tables (__tm_keeper, __tm_gtid_keeper) will be created. Default is the value of the attribute database.
	// +kubebuilder:validation:Optional
	ServiceDatabase *string `json:"serviceDatabase,omitempty" tf:"service_database,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MySQLUser
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type MySQLSourcePasswordInitParameters struct {
}

type MySQLSourcePasswordObservation struct {
}

type MySQLSourcePasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type MySQLTargetConnectionInitParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MySQLCluster
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []MySQLTargetConnectionOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLTargetConnectionObservation struct {

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []MySQLTargetConnectionOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLTargetConnectionOnPremiseInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []MySQLTargetConnectionOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MySQLTargetConnectionOnPremiseObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []MySQLTargetConnectionOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MySQLTargetConnectionOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []MySQLTargetConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeDisabledInitParameters struct {
}

type MySQLTargetConnectionOnPremiseTLSModeDisabledObservation struct {
}

type MySQLTargetConnectionOnPremiseTLSModeDisabledParameters struct {
}

type MySQLTargetConnectionOnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []MySQLTargetConnectionOnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []MySQLTargetConnectionOnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []MySQLTargetConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []MySQLTargetConnectionOnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []MySQLTargetConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []MySQLTargetConnectionOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MySQLTargetConnectionParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MySQLCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []MySQLTargetConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLTargetInitParameters struct {

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Connection settings.
	Connection []MySQLTargetConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Database.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MySQLDatabase
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []MySQLTargetPasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// sql_mode to use when interacting with the server. Defaults to "NO_AUTO_VALUE_ON_ZERO,NO_DIR_IN_CREATE,NO_ENGINE_SUBSTITUTION".
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.SecurityGroup
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// The name of the database where technical tables (__tm_keeper, __tm_gtid_keeper) will be created. Default is the value of the attribute database.
	ServiceDatabase *string `json:"serviceDatabase,omitempty" tf:"service_database,omitempty"`

	// When true, disables foreign key checks. See foreign_key_checks. False by default.
	SkipConstraintChecks *bool `json:"skipConstraintChecks,omitempty" tf:"skip_constraint_checks,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MySQLUser
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type MySQLTargetObservation struct {

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Connection settings.
	Connection []MySQLTargetConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []MySQLTargetPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// sql_mode to use when interacting with the server. Defaults to "NO_AUTO_VALUE_ON_ZERO,NO_DIR_IN_CREATE,NO_ENGINE_SUBSTITUTION".
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// The name of the database where technical tables (__tm_keeper, __tm_gtid_keeper) will be created. Default is the value of the attribute database.
	ServiceDatabase *string `json:"serviceDatabase,omitempty" tf:"service_database,omitempty"`

	// When true, disables foreign key checks. See foreign_key_checks. False by default.
	SkipConstraintChecks *bool `json:"skipConstraintChecks,omitempty" tf:"skip_constraint_checks,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MySQLTargetParameters struct {

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	// +kubebuilder:validation:Optional
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Connection settings.
	// +kubebuilder:validation:Optional
	Connection []MySQLTargetConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Database.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MySQLDatabase
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []MySQLTargetPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// sql_mode to use when interacting with the server. Defaults to "NO_AUTO_VALUE_ON_ZERO,NO_DIR_IN_CREATE,NO_ENGINE_SUBSTITUTION".
	// +kubebuilder:validation:Optional
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// The name of the database where technical tables (__tm_keeper, __tm_gtid_keeper) will be created. Default is the value of the attribute database.
	// +kubebuilder:validation:Optional
	ServiceDatabase *string `json:"serviceDatabase,omitempty" tf:"service_database,omitempty"`

	// When true, disables foreign key checks. See foreign_key_checks. False by default.
	// +kubebuilder:validation:Optional
	SkipConstraintChecks *bool `json:"skipConstraintChecks,omitempty" tf:"skip_constraint_checks,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.MySQLUser
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type MySQLTargetPasswordInitParameters struct {
}

type MySQLTargetPasswordObservation struct {
}

type MySQLTargetPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type NoAuthInitParameters struct {
}

type NoAuthObservation struct {
}

type NoAuthParameters struct {
}

type ObjectTransferSettingsInitParameters struct {
	Routine *string `json:"routine,omitempty" tf:"routine,omitempty"`

	Tables *string `json:"tables,omitempty" tf:"tables,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type ObjectTransferSettingsObservation struct {
	Routine *string `json:"routine,omitempty" tf:"routine,omitempty"`

	Tables *string `json:"tables,omitempty" tf:"tables,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type ObjectTransferSettingsParameters struct {

	// +kubebuilder:validation:Optional
	Routine *string `json:"routine,omitempty" tf:"routine,omitempty"`

	// +kubebuilder:validation:Optional
	Tables *string `json:"tables,omitempty" tf:"tables,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	// +kubebuilder:validation:Optional
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// +kubebuilder:validation:Optional
	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type OnPremiseInitParameters struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	Shards []ShardsInitParameters `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []TLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type OnPremiseObservation struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	Shards []ShardsObservation `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []TLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type OnPremiseParameters struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	// +kubebuilder:validation:Optional
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	// +kubebuilder:validation:Optional
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	// +kubebuilder:validation:Optional
	Shards []ShardsParameters `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []TLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type OnPremiseShardsInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Field name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type OnPremiseShardsObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Field name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type OnPremiseShardsParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Field name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type OnPremiseTLSModeDisabledInitParameters struct {
}

type OnPremiseTLSModeDisabledObservation struct {
}

type OnPremiseTLSModeDisabledParameters struct {
}

type OnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type OnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type OnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type OnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []TLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []TLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type OnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []TLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []TLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type OnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []TLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []TLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ParserAuditTrailsV1ParserInitParameters struct {
}

type ParserAuditTrailsV1ParserObservation struct {
}

type ParserAuditTrailsV1ParserParameters struct {
}

type ParserCloudLoggingParserInitParameters struct {
}

type ParserCloudLoggingParserObservation struct {
}

type ParserCloudLoggingParserParameters struct {
}

type ParserInitParameters struct {

	// Parse Audit Trails data. Empty struct.
	AuditTrailsV1Parser []AuditTrailsV1ParserInitParameters `json:"auditTrailsV1Parser,omitempty" tf:"audit_trails_v1_parser,omitempty"`

	// Parse Cloud Logging data. Empty struct.
	CloudLoggingParser []CloudLoggingParserInitParameters `json:"cloudLoggingParser,omitempty" tf:"cloud_logging_parser,omitempty"`

	// Parse data in json format.
	JSONParser []JSONParserInitParameters `json:"jsonParser,omitempty" tf:"json_parser,omitempty"`

	// Parse data if tskv format.
	TskvParser []TskvParserInitParameters `json:"tskvParser,omitempty" tf:"tskv_parser,omitempty"`
}

type ParserJSONParserInitParameters struct {

	// Add fields, that are not in the schema, into the _rest column.
	AddRestColumn *bool `json:"addRestColumn,omitempty" tf:"add_rest_column,omitempty"`

	// Data parsing scheme.The structure is documented below.
	DataSchema []JSONParserDataSchemaInitParameters `json:"dataSchema,omitempty" tf:"data_schema,omitempty"`

	// Allow null keys. If false - null keys will be putted to unparsed data
	NullKeysAllowed *bool `json:"nullKeysAllowed,omitempty" tf:"null_keys_allowed,omitempty"`

	// Allow unescape string values.
	UnescapeStringValues *bool `json:"unescapeStringValues,omitempty" tf:"unescape_string_values,omitempty"`
}

type ParserJSONParserObservation struct {

	// Add fields, that are not in the schema, into the _rest column.
	AddRestColumn *bool `json:"addRestColumn,omitempty" tf:"add_rest_column,omitempty"`

	// Data parsing scheme.The structure is documented below.
	DataSchema []JSONParserDataSchemaObservation `json:"dataSchema,omitempty" tf:"data_schema,omitempty"`

	// Allow null keys. If false - null keys will be putted to unparsed data
	NullKeysAllowed *bool `json:"nullKeysAllowed,omitempty" tf:"null_keys_allowed,omitempty"`

	// Allow unescape string values.
	UnescapeStringValues *bool `json:"unescapeStringValues,omitempty" tf:"unescape_string_values,omitempty"`
}

type ParserJSONParserParameters struct {

	// Add fields, that are not in the schema, into the _rest column.
	// +kubebuilder:validation:Optional
	AddRestColumn *bool `json:"addRestColumn,omitempty" tf:"add_rest_column,omitempty"`

	// Data parsing scheme.The structure is documented below.
	// +kubebuilder:validation:Optional
	DataSchema []JSONParserDataSchemaParameters `json:"dataSchema,omitempty" tf:"data_schema,omitempty"`

	// Allow null keys. If false - null keys will be putted to unparsed data
	// +kubebuilder:validation:Optional
	NullKeysAllowed *bool `json:"nullKeysAllowed,omitempty" tf:"null_keys_allowed,omitempty"`

	// Allow unescape string values.
	// +kubebuilder:validation:Optional
	UnescapeStringValues *bool `json:"unescapeStringValues,omitempty" tf:"unescape_string_values,omitempty"`
}

type ParserObservation struct {

	// Parse Audit Trails data. Empty struct.
	AuditTrailsV1Parser []AuditTrailsV1ParserParameters `json:"auditTrailsV1Parser,omitempty" tf:"audit_trails_v1_parser,omitempty"`

	// Parse Cloud Logging data. Empty struct.
	CloudLoggingParser []CloudLoggingParserParameters `json:"cloudLoggingParser,omitempty" tf:"cloud_logging_parser,omitempty"`

	// Parse data in json format.
	JSONParser []JSONParserObservation `json:"jsonParser,omitempty" tf:"json_parser,omitempty"`

	// Parse data if tskv format.
	TskvParser []TskvParserObservation `json:"tskvParser,omitempty" tf:"tskv_parser,omitempty"`
}

type ParserParameters struct {

	// Parse Audit Trails data. Empty struct.
	// +kubebuilder:validation:Optional
	AuditTrailsV1Parser []AuditTrailsV1ParserParameters `json:"auditTrailsV1Parser,omitempty" tf:"audit_trails_v1_parser,omitempty"`

	// Parse Cloud Logging data. Empty struct.
	// +kubebuilder:validation:Optional
	CloudLoggingParser []CloudLoggingParserParameters `json:"cloudLoggingParser,omitempty" tf:"cloud_logging_parser,omitempty"`

	// Parse data in json format.
	// +kubebuilder:validation:Optional
	JSONParser []JSONParserParameters `json:"jsonParser,omitempty" tf:"json_parser,omitempty"`

	// Parse data if tskv format.
	// +kubebuilder:validation:Optional
	TskvParser []TskvParserParameters `json:"tskvParser,omitempty" tf:"tskv_parser,omitempty"`
}

type ParserTskvParserDataSchemaInitParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []TskvParserDataSchemaFieldsInitParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Description of the data schema as JSON specification.
	JSONFields *string `json:"jsonFields,omitempty" tf:"json_fields,omitempty"`
}

type ParserTskvParserDataSchemaObservation struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []TskvParserDataSchemaFieldsObservation `json:"fields,omitempty" tf:"fields,omitempty"`

	// Description of the data schema as JSON specification.
	JSONFields *string `json:"jsonFields,omitempty" tf:"json_fields,omitempty"`
}

type ParserTskvParserDataSchemaParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	// +kubebuilder:validation:Optional
	Fields []TskvParserDataSchemaFieldsParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Description of the data schema as JSON specification.
	// +kubebuilder:validation:Optional
	JSONFields *string `json:"jsonFields,omitempty" tf:"json_fields,omitempty"`
}

type ParserTskvParserInitParameters struct {

	// Add fields, that are not in the schema, into the _rest column.
	AddRestColumn *bool `json:"addRestColumn,omitempty" tf:"add_rest_column,omitempty"`

	// Data parsing scheme.The structure is documented below.
	DataSchema []ParserTskvParserDataSchemaInitParameters `json:"dataSchema,omitempty" tf:"data_schema,omitempty"`

	// Allow null keys. If false - null keys will be putted to unparsed data
	NullKeysAllowed *bool `json:"nullKeysAllowed,omitempty" tf:"null_keys_allowed,omitempty"`

	// Allow unescape string values.
	UnescapeStringValues *bool `json:"unescapeStringValues,omitempty" tf:"unescape_string_values,omitempty"`
}

type ParserTskvParserObservation struct {

	// Add fields, that are not in the schema, into the _rest column.
	AddRestColumn *bool `json:"addRestColumn,omitempty" tf:"add_rest_column,omitempty"`

	// Data parsing scheme.The structure is documented below.
	DataSchema []ParserTskvParserDataSchemaObservation `json:"dataSchema,omitempty" tf:"data_schema,omitempty"`

	// Allow null keys. If false - null keys will be putted to unparsed data
	NullKeysAllowed *bool `json:"nullKeysAllowed,omitempty" tf:"null_keys_allowed,omitempty"`

	// Allow unescape string values.
	UnescapeStringValues *bool `json:"unescapeStringValues,omitempty" tf:"unescape_string_values,omitempty"`
}

type ParserTskvParserParameters struct {

	// Add fields, that are not in the schema, into the _rest column.
	// +kubebuilder:validation:Optional
	AddRestColumn *bool `json:"addRestColumn,omitempty" tf:"add_rest_column,omitempty"`

	// Data parsing scheme.The structure is documented below.
	// +kubebuilder:validation:Optional
	DataSchema []ParserTskvParserDataSchemaParameters `json:"dataSchema,omitempty" tf:"data_schema,omitempty"`

	// Allow null keys. If false - null keys will be putted to unparsed data
	// +kubebuilder:validation:Optional
	NullKeysAllowed *bool `json:"nullKeysAllowed,omitempty" tf:"null_keys_allowed,omitempty"`

	// Allow unescape string values.
	// +kubebuilder:validation:Optional
	UnescapeStringValues *bool `json:"unescapeStringValues,omitempty" tf:"unescape_string_values,omitempty"`
}

type PasswordInitParameters struct {
}

type PasswordObservation struct {
}

type PasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type PostgresSourceConnectionInitParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.PostgresqlCluster
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []PostgresSourceConnectionOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresSourceConnectionObservation struct {

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []PostgresSourceConnectionOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresSourceConnectionOnPremiseInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []PostgresSourceConnectionOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresSourceConnectionOnPremiseObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []PostgresSourceConnectionOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresSourceConnectionOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []PostgresSourceConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeDisabledInitParameters struct {
}

type PostgresSourceConnectionOnPremiseTLSModeDisabledObservation struct {
}

type PostgresSourceConnectionOnPremiseTLSModeDisabledParameters struct {
}

type PostgresSourceConnectionOnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []PostgresSourceConnectionOnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []PostgresSourceConnectionOnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []PostgresSourceConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []PostgresSourceConnectionOnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []PostgresSourceConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []PostgresSourceConnectionOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresSourceConnectionParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.PostgresqlCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []PostgresSourceConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresSourceInitParameters struct {

	// Connection settings. The structure is documented below.
	Connection []PostgresSourceConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.PostgresqlDatabase
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	ObjectTransferSettings []PostgresSourceObjectTransferSettingsInitParameters `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []PostgresSourcePasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.SecurityGroup
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// Name of the database schema in which auxiliary tables needed for the transfer will be created. Empty service_schema implies schema "public".
	ServiceSchema *string `json:"serviceSchema,omitempty" tf:"service_schema,omitempty"`

	// Maximum WAL size held by the replication slot, in gigabytes. Exceeding this limit will result in a replication failure and deletion of the replication slot. Unlimited by default.
	SlotGigabyteLagLimit *float64 `json:"slotGigabyteLagLimit,omitempty" tf:"slot_gigabyte_lag_limit,omitempty"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.PostgresqlUser
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type PostgresSourceObjectTransferSettingsInitParameters struct {

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	Cast *string `json:"cast,omitempty" tf:"cast,omitempty"`

	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	Constraint *string `json:"constraint,omitempty" tf:"constraint,omitempty"`

	DefaultValues *string `json:"defaultValues,omitempty" tf:"default_values,omitempty"`

	FkConstraint *string `json:"fkConstraint,omitempty" tf:"fk_constraint,omitempty"`

	Function *string `json:"function,omitempty" tf:"function,omitempty"`

	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	MaterializedView *string `json:"materializedView,omitempty" tf:"materialized_view,omitempty"`

	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	PrimaryKey *string `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`

	Sequence *string `json:"sequence,omitempty" tf:"sequence,omitempty"`

	SequenceOwnedBy *string `json:"sequenceOwnedBy,omitempty" tf:"sequence_owned_by,omitempty"`

	SequenceSet *string `json:"sequenceSet,omitempty" tf:"sequence_set,omitempty"`

	Table *string `json:"table,omitempty" tf:"table,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type PostgresSourceObjectTransferSettingsObservation struct {

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	Cast *string `json:"cast,omitempty" tf:"cast,omitempty"`

	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	Constraint *string `json:"constraint,omitempty" tf:"constraint,omitempty"`

	DefaultValues *string `json:"defaultValues,omitempty" tf:"default_values,omitempty"`

	FkConstraint *string `json:"fkConstraint,omitempty" tf:"fk_constraint,omitempty"`

	Function *string `json:"function,omitempty" tf:"function,omitempty"`

	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	MaterializedView *string `json:"materializedView,omitempty" tf:"materialized_view,omitempty"`

	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	PrimaryKey *string `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`

	Sequence *string `json:"sequence,omitempty" tf:"sequence,omitempty"`

	SequenceOwnedBy *string `json:"sequenceOwnedBy,omitempty" tf:"sequence_owned_by,omitempty"`

	SequenceSet *string `json:"sequenceSet,omitempty" tf:"sequence_set,omitempty"`

	Table *string `json:"table,omitempty" tf:"table,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type PostgresSourceObjectTransferSettingsParameters struct {

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	// +kubebuilder:validation:Optional
	Cast *string `json:"cast,omitempty" tf:"cast,omitempty"`

	// +kubebuilder:validation:Optional
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// +kubebuilder:validation:Optional
	Constraint *string `json:"constraint,omitempty" tf:"constraint,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultValues *string `json:"defaultValues,omitempty" tf:"default_values,omitempty"`

	// +kubebuilder:validation:Optional
	FkConstraint *string `json:"fkConstraint,omitempty" tf:"fk_constraint,omitempty"`

	// +kubebuilder:validation:Optional
	Function *string `json:"function,omitempty" tf:"function,omitempty"`

	// +kubebuilder:validation:Optional
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// +kubebuilder:validation:Optional
	MaterializedView *string `json:"materializedView,omitempty" tf:"materialized_view,omitempty"`

	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// +kubebuilder:validation:Optional
	PrimaryKey *string `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// +kubebuilder:validation:Optional
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`

	// +kubebuilder:validation:Optional
	Sequence *string `json:"sequence,omitempty" tf:"sequence,omitempty"`

	// +kubebuilder:validation:Optional
	SequenceOwnedBy *string `json:"sequenceOwnedBy,omitempty" tf:"sequence_owned_by,omitempty"`

	// +kubebuilder:validation:Optional
	SequenceSet *string `json:"sequenceSet,omitempty" tf:"sequence_set,omitempty"`

	// +kubebuilder:validation:Optional
	Table *string `json:"table,omitempty" tf:"table,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	// +kubebuilder:validation:Optional
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type PostgresSourceObservation struct {

	// Connection settings. The structure is documented below.
	Connection []PostgresSourceConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	ObjectTransferSettings []PostgresSourceObjectTransferSettingsObservation `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []PostgresSourcePasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Name of the database schema in which auxiliary tables needed for the transfer will be created. Empty service_schema implies schema "public".
	ServiceSchema *string `json:"serviceSchema,omitempty" tf:"service_schema,omitempty"`

	// Maximum WAL size held by the replication slot, in gigabytes. Exceeding this limit will result in a replication failure and deletion of the replication slot. Unlimited by default.
	SlotGigabyteLagLimit *float64 `json:"slotGigabyteLagLimit,omitempty" tf:"slot_gigabyte_lag_limit,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type PostgresSourceParameters struct {

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []PostgresSourceConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.PostgresqlDatabase
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	// +kubebuilder:validation:Optional
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	// +kubebuilder:validation:Optional
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	// +kubebuilder:validation:Optional
	ObjectTransferSettings []PostgresSourceObjectTransferSettingsParameters `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []PostgresSourcePasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// Name of the database schema in which auxiliary tables needed for the transfer will be created. Empty service_schema implies schema "public".
	// +kubebuilder:validation:Optional
	ServiceSchema *string `json:"serviceSchema,omitempty" tf:"service_schema,omitempty"`

	// Maximum WAL size held by the replication slot, in gigabytes. Exceeding this limit will result in a replication failure and deletion of the replication slot. Unlimited by default.
	// +kubebuilder:validation:Optional
	SlotGigabyteLagLimit *float64 `json:"slotGigabyteLagLimit,omitempty" tf:"slot_gigabyte_lag_limit,omitempty"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.PostgresqlUser
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type PostgresSourcePasswordInitParameters struct {
}

type PostgresSourcePasswordObservation struct {
}

type PostgresSourcePasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type PostgresTargetConnectionInitParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.PostgresqlCluster
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []PostgresTargetConnectionOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresTargetConnectionObservation struct {

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []PostgresTargetConnectionOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresTargetConnectionOnPremiseInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []PostgresTargetConnectionOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresTargetConnectionOnPremiseObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []PostgresTargetConnectionOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresTargetConnectionOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []PostgresTargetConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeDisabledInitParameters struct {
}

type PostgresTargetConnectionOnPremiseTLSModeDisabledObservation struct {
}

type PostgresTargetConnectionOnPremiseTLSModeDisabledParameters struct {
}

type PostgresTargetConnectionOnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []PostgresTargetConnectionOnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []PostgresTargetConnectionOnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []PostgresTargetConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []PostgresTargetConnectionOnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []PostgresTargetConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []PostgresTargetConnectionOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresTargetConnectionParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.PostgresqlCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []PostgresTargetConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresTargetInitParameters struct {

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Connection settings.
	Connection []PostgresTargetConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Database.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.PostgresqlDatabase
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []PostgresTargetPasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.SecurityGroup
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.PostgresqlUser
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type PostgresTargetObservation struct {

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Connection settings.
	Connection []PostgresTargetConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []PostgresTargetPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type PostgresTargetParameters struct {

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	// +kubebuilder:validation:Optional
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Connection settings.
	// +kubebuilder:validation:Optional
	Connection []PostgresTargetConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// -  Database.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.PostgresqlDatabase
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []PostgresTargetPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/mdb/v1alpha1.PostgresqlUser
	// +crossplane:generate:reference:extractor=github.com/tagesjump/provider-upjet-yc/config/common.ExtractSpecName()
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type PostgresTargetPasswordInitParameters struct {
}

type PostgresTargetPasswordObservation struct {
}

type PostgresTargetPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type RoundRobinInitParameters struct {
}

type RoundRobinObservation struct {
}

type RoundRobinParameters struct {
}

type SaslInitParameters struct {
	Mechanism *string `json:"mechanism,omitempty" tf:"mechanism,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []SaslPasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type SaslObservation struct {
	Mechanism *string `json:"mechanism,omitempty" tf:"mechanism,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []SaslPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type SaslParameters struct {

	// +kubebuilder:validation:Optional
	Mechanism *string `json:"mechanism,omitempty" tf:"mechanism,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []SaslPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type SaslPasswordInitParameters struct {
}

type SaslPasswordObservation struct {
}

type SaslPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type SerializerAutoInitParameters struct {
}

type SerializerAutoObservation struct {
}

type SerializerAutoParameters struct {
}

type SerializerDebeziumInitParameters struct {

	// A list of debezium parameters set by the structure of the key and value string fields.
	SerializerParameters []SerializerParametersInitParameters `json:"serializerParameters,omitempty" tf:"serializer_parameters,omitempty"`
}

type SerializerDebeziumObservation struct {

	// A list of debezium parameters set by the structure of the key and value string fields.
	SerializerParameters []SerializerParametersObservation `json:"serializerParameters,omitempty" tf:"serializer_parameters,omitempty"`
}

type SerializerDebeziumParameters struct {

	// A list of debezium parameters set by the structure of the key and value string fields.
	// +kubebuilder:validation:Optional
	SerializerParameters []SerializerParametersParameters `json:"serializerParameters,omitempty" tf:"serializer_parameters,omitempty"`
}

type SerializerDebeziumSerializerParametersInitParameters struct {

	// Mark field as Primary Key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SerializerDebeziumSerializerParametersObservation struct {

	// Mark field as Primary Key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SerializerDebeziumSerializerParametersParameters struct {

	// Mark field as Primary Key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SerializerInitParameters struct {

	// Empty block. Select data serialization format automatically.
	SerializerAuto []SerializerAutoInitParameters `json:"serializerAuto,omitempty" tf:"serializer_auto,omitempty"`

	// Serialize data in json format. The structure is documented below.
	SerializerDebezium []SerializerDebeziumInitParameters `json:"serializerDebezium,omitempty" tf:"serializer_debezium,omitempty"`

	// Empty block. Serialize data in json format.
	SerializerJSON []SerializerJSONInitParameters `json:"serializerJson,omitempty" tf:"serializer_json,omitempty"`
}

type SerializerJSONInitParameters struct {
}

type SerializerJSONObservation struct {
}

type SerializerJSONParameters struct {
}

type SerializerObservation struct {

	// Empty block. Select data serialization format automatically.
	SerializerAuto []SerializerAutoParameters `json:"serializerAuto,omitempty" tf:"serializer_auto,omitempty"`

	// Serialize data in json format. The structure is documented below.
	SerializerDebezium []SerializerDebeziumObservation `json:"serializerDebezium,omitempty" tf:"serializer_debezium,omitempty"`

	// Empty block. Serialize data in json format.
	SerializerJSON []SerializerJSONParameters `json:"serializerJson,omitempty" tf:"serializer_json,omitempty"`
}

type SerializerParameters struct {

	// Empty block. Select data serialization format automatically.
	// +kubebuilder:validation:Optional
	SerializerAuto []SerializerAutoParameters `json:"serializerAuto,omitempty" tf:"serializer_auto,omitempty"`

	// Serialize data in json format. The structure is documented below.
	// +kubebuilder:validation:Optional
	SerializerDebezium []SerializerDebeziumParameters `json:"serializerDebezium,omitempty" tf:"serializer_debezium,omitempty"`

	// Empty block. Serialize data in json format.
	// +kubebuilder:validation:Optional
	SerializerJSON []SerializerJSONParameters `json:"serializerJson,omitempty" tf:"serializer_json,omitempty"`
}

type SerializerParametersInitParameters struct {

	// Mark field as Primary Key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SerializerParametersObservation struct {

	// Mark field as Primary Key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SerializerParametersParameters struct {

	// Mark field as Primary Key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SerializerSerializerAutoInitParameters struct {
}

type SerializerSerializerAutoObservation struct {
}

type SerializerSerializerAutoParameters struct {
}

type SerializerSerializerDebeziumInitParameters struct {

	// A list of debezium parameters set by the structure of the key and value string fields.
	SerializerParameters []SerializerDebeziumSerializerParametersInitParameters `json:"serializerParameters,omitempty" tf:"serializer_parameters,omitempty"`
}

type SerializerSerializerDebeziumObservation struct {

	// A list of debezium parameters set by the structure of the key and value string fields.
	SerializerParameters []SerializerDebeziumSerializerParametersObservation `json:"serializerParameters,omitempty" tf:"serializer_parameters,omitempty"`
}

type SerializerSerializerDebeziumParameters struct {

	// A list of debezium parameters set by the structure of the key and value string fields.
	// +kubebuilder:validation:Optional
	SerializerParameters []SerializerDebeziumSerializerParametersParameters `json:"serializerParameters,omitempty" tf:"serializer_parameters,omitempty"`
}

type SerializerSerializerJSONInitParameters struct {
}

type SerializerSerializerJSONObservation struct {
}

type SerializerSerializerJSONParameters struct {
}

type SettingsInitParameters struct {

	// Settings specific to the ClickHouse source endpoint.
	ClickhouseSource []ClickhouseSourceInitParameters `json:"clickhouseSource,omitempty" tf:"clickhouse_source,omitempty"`

	// Settings specific to the ClickHouse target endpoint.
	ClickhouseTarget []ClickhouseTargetInitParameters `json:"clickhouseTarget,omitempty" tf:"clickhouse_target,omitempty"`

	// Settings specific to the Kafka source endpoint.
	KafkaSource []KafkaSourceInitParameters `json:"kafkaSource,omitempty" tf:"kafka_source,omitempty"`

	// Settings specific to the Kafka target endpoint.
	KafkaTarget []KafkaTargetInitParameters `json:"kafkaTarget,omitempty" tf:"kafka_target,omitempty"`

	// Settings specific to the MongoDB source endpoint.
	MongoSource []MongoSourceInitParameters `json:"mongoSource,omitempty" tf:"mongo_source,omitempty"`

	// Settings specific to the MongoDB target endpoint.
	MongoTarget []MongoTargetInitParameters `json:"mongoTarget,omitempty" tf:"mongo_target,omitempty"`

	// Settings specific to the MySQL source endpoint.
	MySQLSource []MySQLSourceInitParameters `json:"mysqlSource,omitempty" tf:"mysql_source,omitempty"`

	// Settings specific to the MySQL target endpoint.
	MySQLTarget []MySQLTargetInitParameters `json:"mysqlTarget,omitempty" tf:"mysql_target,omitempty"`

	// Settings specific to the PostgreSQL source endpoint.
	PostgresSource []PostgresSourceInitParameters `json:"postgresSource,omitempty" tf:"postgres_source,omitempty"`

	// Settings specific to the PostgreSQL target endpoint.
	PostgresTarget []PostgresTargetInitParameters `json:"postgresTarget,omitempty" tf:"postgres_target,omitempty"`

	// Settings specific to the YDB source endpoint.
	YdbSource []YdbSourceInitParameters `json:"ydbSource,omitempty" tf:"ydb_source,omitempty"`

	// Settings specific to the YDB target endpoint.
	YdbTarget []YdbTargetInitParameters `json:"ydbTarget,omitempty" tf:"ydb_target,omitempty"`

	// Settings specific to the YDS source endpoint.
	YdsSource []YdsSourceInitParameters `json:"ydsSource,omitempty" tf:"yds_source,omitempty"`

	// Settings specific to the YDS target endpoint.
	YdsTarget []YdsTargetInitParameters `json:"ydsTarget,omitempty" tf:"yds_target,omitempty"`
}

type SettingsObservation struct {

	// Settings specific to the ClickHouse source endpoint.
	ClickhouseSource []ClickhouseSourceObservation `json:"clickhouseSource,omitempty" tf:"clickhouse_source,omitempty"`

	// Settings specific to the ClickHouse target endpoint.
	ClickhouseTarget []ClickhouseTargetObservation `json:"clickhouseTarget,omitempty" tf:"clickhouse_target,omitempty"`

	// Settings specific to the Kafka source endpoint.
	KafkaSource []KafkaSourceObservation `json:"kafkaSource,omitempty" tf:"kafka_source,omitempty"`

	// Settings specific to the Kafka target endpoint.
	KafkaTarget []KafkaTargetObservation `json:"kafkaTarget,omitempty" tf:"kafka_target,omitempty"`

	// Settings specific to the MongoDB source endpoint.
	MongoSource []MongoSourceObservation `json:"mongoSource,omitempty" tf:"mongo_source,omitempty"`

	// Settings specific to the MongoDB target endpoint.
	MongoTarget []MongoTargetObservation `json:"mongoTarget,omitempty" tf:"mongo_target,omitempty"`

	// Settings specific to the MySQL source endpoint.
	MySQLSource []MySQLSourceObservation `json:"mysqlSource,omitempty" tf:"mysql_source,omitempty"`

	// Settings specific to the MySQL target endpoint.
	MySQLTarget []MySQLTargetObservation `json:"mysqlTarget,omitempty" tf:"mysql_target,omitempty"`

	// Settings specific to the PostgreSQL source endpoint.
	PostgresSource []PostgresSourceObservation `json:"postgresSource,omitempty" tf:"postgres_source,omitempty"`

	// Settings specific to the PostgreSQL target endpoint.
	PostgresTarget []PostgresTargetObservation `json:"postgresTarget,omitempty" tf:"postgres_target,omitempty"`

	// Settings specific to the YDB source endpoint.
	YdbSource []YdbSourceObservation `json:"ydbSource,omitempty" tf:"ydb_source,omitempty"`

	// Settings specific to the YDB target endpoint.
	YdbTarget []YdbTargetObservation `json:"ydbTarget,omitempty" tf:"ydb_target,omitempty"`

	// Settings specific to the YDS source endpoint.
	YdsSource []YdsSourceObservation `json:"ydsSource,omitempty" tf:"yds_source,omitempty"`

	// Settings specific to the YDS target endpoint.
	YdsTarget []YdsTargetObservation `json:"ydsTarget,omitempty" tf:"yds_target,omitempty"`
}

type SettingsParameters struct {

	// Settings specific to the ClickHouse source endpoint.
	// +kubebuilder:validation:Optional
	ClickhouseSource []ClickhouseSourceParameters `json:"clickhouseSource,omitempty" tf:"clickhouse_source,omitempty"`

	// Settings specific to the ClickHouse target endpoint.
	// +kubebuilder:validation:Optional
	ClickhouseTarget []ClickhouseTargetParameters `json:"clickhouseTarget,omitempty" tf:"clickhouse_target,omitempty"`

	// Settings specific to the Kafka source endpoint.
	// +kubebuilder:validation:Optional
	KafkaSource []KafkaSourceParameters `json:"kafkaSource,omitempty" tf:"kafka_source,omitempty"`

	// Settings specific to the Kafka target endpoint.
	// +kubebuilder:validation:Optional
	KafkaTarget []KafkaTargetParameters `json:"kafkaTarget,omitempty" tf:"kafka_target,omitempty"`

	// Settings specific to the MongoDB source endpoint.
	// +kubebuilder:validation:Optional
	MongoSource []MongoSourceParameters `json:"mongoSource,omitempty" tf:"mongo_source,omitempty"`

	// Settings specific to the MongoDB target endpoint.
	// +kubebuilder:validation:Optional
	MongoTarget []MongoTargetParameters `json:"mongoTarget,omitempty" tf:"mongo_target,omitempty"`

	// Settings specific to the MySQL source endpoint.
	// +kubebuilder:validation:Optional
	MySQLSource []MySQLSourceParameters `json:"mysqlSource,omitempty" tf:"mysql_source,omitempty"`

	// Settings specific to the MySQL target endpoint.
	// +kubebuilder:validation:Optional
	MySQLTarget []MySQLTargetParameters `json:"mysqlTarget,omitempty" tf:"mysql_target,omitempty"`

	// Settings specific to the PostgreSQL source endpoint.
	// +kubebuilder:validation:Optional
	PostgresSource []PostgresSourceParameters `json:"postgresSource,omitempty" tf:"postgres_source,omitempty"`

	// Settings specific to the PostgreSQL target endpoint.
	// +kubebuilder:validation:Optional
	PostgresTarget []PostgresTargetParameters `json:"postgresTarget,omitempty" tf:"postgres_target,omitempty"`

	// Settings specific to the YDB source endpoint.
	// +kubebuilder:validation:Optional
	YdbSource []YdbSourceParameters `json:"ydbSource,omitempty" tf:"ydb_source,omitempty"`

	// Settings specific to the YDB target endpoint.
	// +kubebuilder:validation:Optional
	YdbTarget []YdbTargetParameters `json:"ydbTarget,omitempty" tf:"ydb_target,omitempty"`

	// Settings specific to the YDS source endpoint.
	// +kubebuilder:validation:Optional
	YdsSource []YdsSourceParameters `json:"ydsSource,omitempty" tf:"yds_source,omitempty"`

	// Settings specific to the YDS target endpoint.
	// +kubebuilder:validation:Optional
	YdsTarget []YdsTargetParameters `json:"ydsTarget,omitempty" tf:"yds_target,omitempty"`
}

type ShardingInitParameters struct {

	// Shard data by the hash value of the specified column. The structure is documented below.
	ColumnValueHash []ColumnValueHashInitParameters `json:"columnValueHash,omitempty" tf:"column_value_hash,omitempty"`

	// A custom shard mapping by the value of the specified column. The structure is documented below.
	CustomMapping []CustomMappingInitParameters `json:"customMapping,omitempty" tf:"custom_mapping,omitempty"`

	// robin manner. Specify as an empty block to enable.
	RoundRobin []RoundRobinInitParameters `json:"roundRobin,omitempty" tf:"round_robin,omitempty"`

	// Shard data by ID of the transfer.
	TransferID []TransferIDInitParameters `json:"transferId,omitempty" tf:"transfer_id,omitempty"`
}

type ShardingObservation struct {

	// Shard data by the hash value of the specified column. The structure is documented below.
	ColumnValueHash []ColumnValueHashObservation `json:"columnValueHash,omitempty" tf:"column_value_hash,omitempty"`

	// A custom shard mapping by the value of the specified column. The structure is documented below.
	CustomMapping []CustomMappingObservation `json:"customMapping,omitempty" tf:"custom_mapping,omitempty"`

	// robin manner. Specify as an empty block to enable.
	RoundRobin []RoundRobinParameters `json:"roundRobin,omitempty" tf:"round_robin,omitempty"`

	// Shard data by ID of the transfer.
	TransferID []TransferIDParameters `json:"transferId,omitempty" tf:"transfer_id,omitempty"`
}

type ShardingParameters struct {

	// Shard data by the hash value of the specified column. The structure is documented below.
	// +kubebuilder:validation:Optional
	ColumnValueHash []ColumnValueHashParameters `json:"columnValueHash,omitempty" tf:"column_value_hash,omitempty"`

	// A custom shard mapping by the value of the specified column. The structure is documented below.
	// +kubebuilder:validation:Optional
	CustomMapping []CustomMappingParameters `json:"customMapping,omitempty" tf:"custom_mapping,omitempty"`

	// robin manner. Specify as an empty block to enable.
	// +kubebuilder:validation:Optional
	RoundRobin []RoundRobinParameters `json:"roundRobin,omitempty" tf:"round_robin,omitempty"`

	// Shard data by ID of the transfer.
	// +kubebuilder:validation:Optional
	TransferID []TransferIDParameters `json:"transferId,omitempty" tf:"transfer_id,omitempty"`
}

type ShardsInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Field name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ShardsObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Field name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ShardsParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Field name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TLSModeDisabledInitParameters struct {
}

type TLSModeDisabledObservation struct {
}

type TLSModeDisabledParameters struct {
}

type TLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type TLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type TLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type TLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []DisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []EnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type TLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []DisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []EnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type TLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []DisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []EnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type TopicInitParameters struct {

	// -  Save transaction order
	SaveTxOrder *bool `json:"saveTxOrder,omitempty" tf:"save_tx_order,omitempty"`

	// Full topic name
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type TopicObservation struct {

	// -  Save transaction order
	SaveTxOrder *bool `json:"saveTxOrder,omitempty" tf:"save_tx_order,omitempty"`

	// Full topic name
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type TopicParameters struct {

	// -  Save transaction order
	// +kubebuilder:validation:Optional
	SaveTxOrder *bool `json:"saveTxOrder,omitempty" tf:"save_tx_order,omitempty"`

	// Full topic name
	// +kubebuilder:validation:Optional
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type TopicSettingsInitParameters struct {

	// All messages will be sent to one topic. The structure is documented below.
	Topic []TopicInitParameters `json:"topic,omitempty" tf:"topic,omitempty"`

	// Topic name prefix. Messages will be sent to topic with name <topic_prefix>..<table_name>.
	TopicPrefix *string `json:"topicPrefix,omitempty" tf:"topic_prefix,omitempty"`
}

type TopicSettingsObservation struct {

	// All messages will be sent to one topic. The structure is documented below.
	Topic []TopicObservation `json:"topic,omitempty" tf:"topic,omitempty"`

	// Topic name prefix. Messages will be sent to topic with name <topic_prefix>..<table_name>.
	TopicPrefix *string `json:"topicPrefix,omitempty" tf:"topic_prefix,omitempty"`
}

type TopicSettingsParameters struct {

	// All messages will be sent to one topic. The structure is documented below.
	// +kubebuilder:validation:Optional
	Topic []TopicParameters `json:"topic,omitempty" tf:"topic,omitempty"`

	// Topic name prefix. Messages will be sent to topic with name <topic_prefix>..<table_name>.
	// +kubebuilder:validation:Optional
	TopicPrefix *string `json:"topicPrefix,omitempty" tf:"topic_prefix,omitempty"`
}

type TransferIDInitParameters struct {
}

type TransferIDObservation struct {
}

type TransferIDParameters struct {
}

type TransformerInitParameters struct {
	BufferFlushInterval *string `json:"bufferFlushInterval,omitempty" tf:"buffer_flush_interval,omitempty"`

	BufferSize *string `json:"bufferSize,omitempty" tf:"buffer_size,omitempty"`

	CloudFunction *string `json:"cloudFunction,omitempty" tf:"cloud_function,omitempty"`

	InvocationTimeout *string `json:"invocationTimeout,omitempty" tf:"invocation_timeout,omitempty"`

	NumberOfRetries *float64 `json:"numberOfRetries,omitempty" tf:"number_of_retries,omitempty"`

	// -  Service account ID for interaction with database.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`
}

type TransformerObservation struct {
	BufferFlushInterval *string `json:"bufferFlushInterval,omitempty" tf:"buffer_flush_interval,omitempty"`

	BufferSize *string `json:"bufferSize,omitempty" tf:"buffer_size,omitempty"`

	CloudFunction *string `json:"cloudFunction,omitempty" tf:"cloud_function,omitempty"`

	InvocationTimeout *string `json:"invocationTimeout,omitempty" tf:"invocation_timeout,omitempty"`

	NumberOfRetries *float64 `json:"numberOfRetries,omitempty" tf:"number_of_retries,omitempty"`

	// -  Service account ID for interaction with database.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`
}

type TransformerParameters struct {

	// +kubebuilder:validation:Optional
	BufferFlushInterval *string `json:"bufferFlushInterval,omitempty" tf:"buffer_flush_interval,omitempty"`

	// +kubebuilder:validation:Optional
	BufferSize *string `json:"bufferSize,omitempty" tf:"buffer_size,omitempty"`

	// +kubebuilder:validation:Optional
	CloudFunction *string `json:"cloudFunction,omitempty" tf:"cloud_function,omitempty"`

	// +kubebuilder:validation:Optional
	InvocationTimeout *string `json:"invocationTimeout,omitempty" tf:"invocation_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	NumberOfRetries *float64 `json:"numberOfRetries,omitempty" tf:"number_of_retries,omitempty"`

	// -  Service account ID for interaction with database.
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`
}

type TskvParserDataSchemaFieldsFieldsInitParameters struct {

	// Mark field as Primary Key.
	Key *bool `json:"key,omitempty" tf:"key,omitempty"`

	// Field name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// -  A path where resulting tables are stored.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Mark field as required.
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TskvParserDataSchemaFieldsFieldsObservation struct {

	// Mark field as Primary Key.
	Key *bool `json:"key,omitempty" tf:"key,omitempty"`

	// Field name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// -  A path where resulting tables are stored.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Mark field as required.
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TskvParserDataSchemaFieldsFieldsParameters struct {

	// Mark field as Primary Key.
	// +kubebuilder:validation:Optional
	Key *bool `json:"key,omitempty" tf:"key,omitempty"`

	// Field name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// -  A path where resulting tables are stored.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Mark field as required.
	// +kubebuilder:validation:Optional
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Field type, one of: INT64, INT32, INT16, INT8, UINT64, UINT32, UINT16, UINT8, DOUBLE, BOOLEAN, STRING, UTF8, ANY, DATETIME.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TskvParserDataSchemaFieldsInitParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []TskvParserDataSchemaFieldsFieldsInitParameters `json:"fields,omitempty" tf:"fields,omitempty"`
}

type TskvParserDataSchemaFieldsObservation struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []TskvParserDataSchemaFieldsFieldsObservation `json:"fields,omitempty" tf:"fields,omitempty"`
}

type TskvParserDataSchemaFieldsParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	// +kubebuilder:validation:Optional
	Fields []TskvParserDataSchemaFieldsFieldsParameters `json:"fields,omitempty" tf:"fields,omitempty"`
}

type TskvParserDataSchemaInitParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []DataSchemaFieldsInitParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Description of the data schema as JSON specification.
	JSONFields *string `json:"jsonFields,omitempty" tf:"json_fields,omitempty"`
}

type TskvParserDataSchemaObservation struct {

	// Description of the data schema in the array of fields structure (documented below).
	Fields []DataSchemaFieldsObservation `json:"fields,omitempty" tf:"fields,omitempty"`

	// Description of the data schema as JSON specification.
	JSONFields *string `json:"jsonFields,omitempty" tf:"json_fields,omitempty"`
}

type TskvParserDataSchemaParameters struct {

	// Description of the data schema in the array of fields structure (documented below).
	// +kubebuilder:validation:Optional
	Fields []DataSchemaFieldsParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Description of the data schema as JSON specification.
	// +kubebuilder:validation:Optional
	JSONFields *string `json:"jsonFields,omitempty" tf:"json_fields,omitempty"`
}

type TskvParserInitParameters struct {

	// Add fields, that are not in the schema, into the _rest column.
	AddRestColumn *bool `json:"addRestColumn,omitempty" tf:"add_rest_column,omitempty"`

	// Data parsing scheme.The structure is documented below.
	DataSchema []TskvParserDataSchemaInitParameters `json:"dataSchema,omitempty" tf:"data_schema,omitempty"`

	// Allow null keys. If false - null keys will be putted to unparsed data
	NullKeysAllowed *bool `json:"nullKeysAllowed,omitempty" tf:"null_keys_allowed,omitempty"`

	// Allow unescape string values.
	UnescapeStringValues *bool `json:"unescapeStringValues,omitempty" tf:"unescape_string_values,omitempty"`
}

type TskvParserObservation struct {

	// Add fields, that are not in the schema, into the _rest column.
	AddRestColumn *bool `json:"addRestColumn,omitempty" tf:"add_rest_column,omitempty"`

	// Data parsing scheme.The structure is documented below.
	DataSchema []TskvParserDataSchemaObservation `json:"dataSchema,omitempty" tf:"data_schema,omitempty"`

	// Allow null keys. If false - null keys will be putted to unparsed data
	NullKeysAllowed *bool `json:"nullKeysAllowed,omitempty" tf:"null_keys_allowed,omitempty"`

	// Allow unescape string values.
	UnescapeStringValues *bool `json:"unescapeStringValues,omitempty" tf:"unescape_string_values,omitempty"`
}

type TskvParserParameters struct {

	// Add fields, that are not in the schema, into the _rest column.
	// +kubebuilder:validation:Optional
	AddRestColumn *bool `json:"addRestColumn,omitempty" tf:"add_rest_column,omitempty"`

	// Data parsing scheme.The structure is documented below.
	// +kubebuilder:validation:Optional
	DataSchema []TskvParserDataSchemaParameters `json:"dataSchema,omitempty" tf:"data_schema,omitempty"`

	// Allow null keys. If false - null keys will be putted to unparsed data
	// +kubebuilder:validation:Optional
	NullKeysAllowed *bool `json:"nullKeysAllowed,omitempty" tf:"null_keys_allowed,omitempty"`

	// Allow unescape string values.
	// +kubebuilder:validation:Optional
	UnescapeStringValues *bool `json:"unescapeStringValues,omitempty" tf:"unescape_string_values,omitempty"`
}

type YdbSourceInitParameters struct {

	// -  Custom name for changefeed.
	ChangefeedCustomName *string `json:"changefeedCustomName,omitempty" tf:"changefeed_custom_name,omitempty"`

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  Instance of YDB. Example: "my-cute-ydb.cloud.yandex.ru:2135".
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// -  A list of paths which should be uploaded. When not specified, all available tables are uploaded.
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Service account ID for interaction with database.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type YdbSourceObservation struct {

	// -  Custom name for changefeed.
	ChangefeedCustomName *string `json:"changefeedCustomName,omitempty" tf:"changefeed_custom_name,omitempty"`

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  Instance of YDB. Example: "my-cute-ydb.cloud.yandex.ru:2135".
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// -  A list of paths which should be uploaded. When not specified, all available tables are uploaded.
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Service account ID for interaction with database.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type YdbSourceParameters struct {

	// -  Custom name for changefeed.
	// +kubebuilder:validation:Optional
	ChangefeedCustomName *string `json:"changefeedCustomName,omitempty" tf:"changefeed_custom_name,omitempty"`

	// -  Database.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  Instance of YDB. Example: "my-cute-ydb.cloud.yandex.ru:2135".
	// +kubebuilder:validation:Optional
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// -  A list of paths which should be uploaded. When not specified, all available tables are uploaded.
	// +kubebuilder:validation:Optional
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`

	// -  Authentication key.
	// +kubebuilder:validation:Optional
	SaKeyContentSecretRef *v1.SecretKeySelector `json:"saKeyContentSecretRef,omitempty" tf:"-"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Service account ID for interaction with database.
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type YdbTargetInitParameters struct {

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  Compression that will be used for default columns family on YDB table creation One of "YDB_DEFAULT_COMPRESSION_UNSPECIFIED", "YDB_DEFAULT_COMPRESSION_DISABLED", "YDB_DEFAULT_COMPRESSION_LZ4".
	DefaultCompression *string `json:"defaultCompression,omitempty" tf:"default_compression,omitempty"`

	// -  Instance of YDB. Example: "my-cute-ydb.cloud.yandex.ru:2135".
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// -  Whether a column-oriented (i.e. OLAP) tables should be created. Default is false (create row-oriented OLTP tables).
	IsTableColumnOriented *bool `json:"isTableColumnOriented,omitempty" tf:"is_table_column_oriented,omitempty"`

	// -  A path where resulting tables are stored.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Service account ID for interaction with database.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type YdbTargetObservation struct {

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  Compression that will be used for default columns family on YDB table creation One of "YDB_DEFAULT_COMPRESSION_UNSPECIFIED", "YDB_DEFAULT_COMPRESSION_DISABLED", "YDB_DEFAULT_COMPRESSION_LZ4".
	DefaultCompression *string `json:"defaultCompression,omitempty" tf:"default_compression,omitempty"`

	// -  Instance of YDB. Example: "my-cute-ydb.cloud.yandex.ru:2135".
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// -  Whether a column-oriented (i.e. OLAP) tables should be created. Default is false (create row-oriented OLTP tables).
	IsTableColumnOriented *bool `json:"isTableColumnOriented,omitempty" tf:"is_table_column_oriented,omitempty"`

	// -  A path where resulting tables are stored.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Service account ID for interaction with database.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type YdbTargetParameters struct {

	// -  How to clean collections when activating the transfer. One of "YDB_CLEANUP_POLICY_DISABLED" or "YDB_CLEANUP_POLICY_DROP".
	// +kubebuilder:validation:Optional
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// -  Database.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  Compression that will be used for default columns family on YDB table creation One of "YDB_DEFAULT_COMPRESSION_UNSPECIFIED", "YDB_DEFAULT_COMPRESSION_DISABLED", "YDB_DEFAULT_COMPRESSION_LZ4".
	// +kubebuilder:validation:Optional
	DefaultCompression *string `json:"defaultCompression,omitempty" tf:"default_compression,omitempty"`

	// -  Instance of YDB. Example: "my-cute-ydb.cloud.yandex.ru:2135".
	// +kubebuilder:validation:Optional
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// -  Whether a column-oriented (i.e. OLAP) tables should be created. Default is false (create row-oriented OLTP tables).
	// +kubebuilder:validation:Optional
	IsTableColumnOriented *bool `json:"isTableColumnOriented,omitempty" tf:"is_table_column_oriented,omitempty"`

	// -  A path where resulting tables are stored.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// -  Authentication key.
	// +kubebuilder:validation:Optional
	SaKeyContentSecretRef *v1.SecretKeySelector `json:"saKeyContentSecretRef,omitempty" tf:"-"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Service account ID for interaction with database.
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type YdsSourceInitParameters struct {

	// -  Should continue working, if consumer read lag exceed TTL of topic.
	AllowTTLRewind *bool `json:"allowTtlRewind,omitempty" tf:"allow_ttl_rewind,omitempty"`

	// -  Consumer.
	Consumer *string `json:"consumer,omitempty" tf:"consumer,omitempty"`

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  YDS Endpoint.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// -  Data parsing rules.
	Parser []YdsSourceParserInitParameters `json:"parser,omitempty" tf:"parser,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Service account ID for interaction with database.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// -  Stream.
	Stream *string `json:"stream,omitempty" tf:"stream,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// -  List of supported compression codec.
	SupportedCodecs []*string `json:"supportedCodecs,omitempty" tf:"supported_codecs,omitempty"`
}

type YdsSourceObservation struct {

	// -  Should continue working, if consumer read lag exceed TTL of topic.
	AllowTTLRewind *bool `json:"allowTtlRewind,omitempty" tf:"allow_ttl_rewind,omitempty"`

	// -  Consumer.
	Consumer *string `json:"consumer,omitempty" tf:"consumer,omitempty"`

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  YDS Endpoint.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// -  Data parsing rules.
	Parser []YdsSourceParserObservation `json:"parser,omitempty" tf:"parser,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Service account ID for interaction with database.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// -  Stream.
	Stream *string `json:"stream,omitempty" tf:"stream,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// -  List of supported compression codec.
	SupportedCodecs []*string `json:"supportedCodecs,omitempty" tf:"supported_codecs,omitempty"`
}

type YdsSourceParameters struct {

	// -  Should continue working, if consumer read lag exceed TTL of topic.
	// +kubebuilder:validation:Optional
	AllowTTLRewind *bool `json:"allowTtlRewind,omitempty" tf:"allow_ttl_rewind,omitempty"`

	// -  Consumer.
	// +kubebuilder:validation:Optional
	Consumer *string `json:"consumer,omitempty" tf:"consumer,omitempty"`

	// -  Database.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  YDS Endpoint.
	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// -  Data parsing rules.
	// +kubebuilder:validation:Optional
	Parser []YdsSourceParserParameters `json:"parser,omitempty" tf:"parser,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Service account ID for interaction with database.
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// -  Stream.
	// +kubebuilder:validation:Optional
	Stream *string `json:"stream,omitempty" tf:"stream,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// -  List of supported compression codec.
	// +kubebuilder:validation:Optional
	SupportedCodecs []*string `json:"supportedCodecs,omitempty" tf:"supported_codecs,omitempty"`
}

type YdsSourceParserInitParameters struct {

	// Parse Audit Trails data. Empty struct.
	AuditTrailsV1Parser []ParserAuditTrailsV1ParserInitParameters `json:"auditTrailsV1Parser,omitempty" tf:"audit_trails_v1_parser,omitempty"`

	// Parse Cloud Logging data. Empty struct.
	CloudLoggingParser []ParserCloudLoggingParserInitParameters `json:"cloudLoggingParser,omitempty" tf:"cloud_logging_parser,omitempty"`

	// Parse data in json format.
	JSONParser []ParserJSONParserInitParameters `json:"jsonParser,omitempty" tf:"json_parser,omitempty"`

	// Parse data if tskv format.
	TskvParser []ParserTskvParserInitParameters `json:"tskvParser,omitempty" tf:"tskv_parser,omitempty"`
}

type YdsSourceParserObservation struct {

	// Parse Audit Trails data. Empty struct.
	AuditTrailsV1Parser []ParserAuditTrailsV1ParserParameters `json:"auditTrailsV1Parser,omitempty" tf:"audit_trails_v1_parser,omitempty"`

	// Parse Cloud Logging data. Empty struct.
	CloudLoggingParser []ParserCloudLoggingParserParameters `json:"cloudLoggingParser,omitempty" tf:"cloud_logging_parser,omitempty"`

	// Parse data in json format.
	JSONParser []ParserJSONParserObservation `json:"jsonParser,omitempty" tf:"json_parser,omitempty"`

	// Parse data if tskv format.
	TskvParser []ParserTskvParserObservation `json:"tskvParser,omitempty" tf:"tskv_parser,omitempty"`
}

type YdsSourceParserParameters struct {

	// Parse Audit Trails data. Empty struct.
	// +kubebuilder:validation:Optional
	AuditTrailsV1Parser []ParserAuditTrailsV1ParserParameters `json:"auditTrailsV1Parser,omitempty" tf:"audit_trails_v1_parser,omitempty"`

	// Parse Cloud Logging data. Empty struct.
	// +kubebuilder:validation:Optional
	CloudLoggingParser []ParserCloudLoggingParserParameters `json:"cloudLoggingParser,omitempty" tf:"cloud_logging_parser,omitempty"`

	// Parse data in json format.
	// +kubebuilder:validation:Optional
	JSONParser []ParserJSONParserParameters `json:"jsonParser,omitempty" tf:"json_parser,omitempty"`

	// Parse data if tskv format.
	// +kubebuilder:validation:Optional
	TskvParser []ParserTskvParserParameters `json:"tskvParser,omitempty" tf:"tskv_parser,omitempty"`
}

type YdsTargetInitParameters struct {

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  YDS Endpoint.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// -  Save transaction order
	SaveTxOrder *bool `json:"saveTxOrder,omitempty" tf:"save_tx_order,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Data serialization format.
	Serializer []YdsTargetSerializerInitParameters `json:"serializer,omitempty" tf:"serializer,omitempty"`

	// -  Service account ID for interaction with database.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// -  Stream.
	Stream *string `json:"stream,omitempty" tf:"stream,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type YdsTargetObservation struct {

	// -  Database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  YDS Endpoint.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// -  Save transaction order
	SaveTxOrder *bool `json:"saveTxOrder,omitempty" tf:"save_tx_order,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Data serialization format.
	Serializer []YdsTargetSerializerObservation `json:"serializer,omitempty" tf:"serializer,omitempty"`

	// -  Service account ID for interaction with database.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// -  Stream.
	Stream *string `json:"stream,omitempty" tf:"stream,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type YdsTargetParameters struct {

	// -  Database.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// -  YDS Endpoint.
	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// -  Save transaction order
	// +kubebuilder:validation:Optional
	SaveTxOrder *bool `json:"saveTxOrder,omitempty" tf:"save_tx_order,omitempty"`

	// -  List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// -  Data serialization format.
	// +kubebuilder:validation:Optional
	Serializer []YdsTargetSerializerParameters `json:"serializer,omitempty" tf:"serializer,omitempty"`

	// -  Service account ID for interaction with database.
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// -  Stream.
	// +kubebuilder:validation:Optional
	Stream *string `json:"stream,omitempty" tf:"stream,omitempty"`

	// -  Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type YdsTargetSerializerInitParameters struct {

	// Empty block. Select data serialization format automatically.
	SerializerAuto []SerializerSerializerAutoInitParameters `json:"serializerAuto,omitempty" tf:"serializer_auto,omitempty"`

	// Serialize data in json format. The structure is documented below.
	SerializerDebezium []SerializerSerializerDebeziumInitParameters `json:"serializerDebezium,omitempty" tf:"serializer_debezium,omitempty"`

	// Empty block. Serialize data in json format.
	SerializerJSON []SerializerSerializerJSONInitParameters `json:"serializerJson,omitempty" tf:"serializer_json,omitempty"`
}

type YdsTargetSerializerObservation struct {

	// Empty block. Select data serialization format automatically.
	SerializerAuto []SerializerSerializerAutoParameters `json:"serializerAuto,omitempty" tf:"serializer_auto,omitempty"`

	// Serialize data in json format. The structure is documented below.
	SerializerDebezium []SerializerSerializerDebeziumObservation `json:"serializerDebezium,omitempty" tf:"serializer_debezium,omitempty"`

	// Empty block. Serialize data in json format.
	SerializerJSON []SerializerSerializerJSONParameters `json:"serializerJson,omitempty" tf:"serializer_json,omitempty"`
}

type YdsTargetSerializerParameters struct {

	// Empty block. Select data serialization format automatically.
	// +kubebuilder:validation:Optional
	SerializerAuto []SerializerSerializerAutoParameters `json:"serializerAuto,omitempty" tf:"serializer_auto,omitempty"`

	// Serialize data in json format. The structure is documented below.
	// +kubebuilder:validation:Optional
	SerializerDebezium []SerializerSerializerDebeziumParameters `json:"serializerDebezium,omitempty" tf:"serializer_debezium,omitempty"`

	// Empty block. Serialize data in json format.
	// +kubebuilder:validation:Optional
	SerializerJSON []SerializerSerializerJSONParameters `json:"serializerJson,omitempty" tf:"serializer_json,omitempty"`
}

// EndpointSpec defines the desired state of Endpoint
type EndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EndpointInitParameters `json:"initProvider,omitempty"`
}

// EndpointStatus defines the observed state of Endpoint.
type EndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Endpoint is the Schema for the Endpoints API. Manages a Data Transfer endpoint within Yandex.Cloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type Endpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointSpec   `json:"spec"`
	Status            EndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointList contains a list of Endpoints
type EndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Endpoint `json:"items"`
}

// Repository type metadata.
var (
	Endpoint_Kind             = "Endpoint"
	Endpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Endpoint_Kind}.String()
	Endpoint_KindAPIVersion   = Endpoint_Kind + "." + CRDGroupVersion.String()
	Endpoint_GroupVersionKind = CRDGroupVersion.WithKind(Endpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&Endpoint{}, &EndpointList{})
}
