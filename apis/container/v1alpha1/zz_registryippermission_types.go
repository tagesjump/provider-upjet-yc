// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RegistryIPPermissionInitParameters struct {

	// List of configured CIDRs, from which pull is allowed.
	// +listType=set
	Pull []*string `json:"pull,omitempty" tf:"pull,omitempty"`

	// List of configured CIDRs, from which push is allowed.
	// +listType=set
	Push []*string `json:"push,omitempty" tf:"push,omitempty"`

	// The ID of the registry that ip restrictions applied to.
	// +crossplane:generate:reference:type=Registry
	RegistryID *string `json:"registryId,omitempty" tf:"registry_id,omitempty"`

	// Reference to a Registry to populate registryId.
	// +kubebuilder:validation:Optional
	RegistryIDRef *v1.Reference `json:"registryIdRef,omitempty" tf:"-"`

	// Selector for a Registry to populate registryId.
	// +kubebuilder:validation:Optional
	RegistryIDSelector *v1.Selector `json:"registryIdSelector,omitempty" tf:"-"`
}

type RegistryIPPermissionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of configured CIDRs, from which pull is allowed.
	// +listType=set
	Pull []*string `json:"pull,omitempty" tf:"pull,omitempty"`

	// List of configured CIDRs, from which push is allowed.
	// +listType=set
	Push []*string `json:"push,omitempty" tf:"push,omitempty"`

	// The ID of the registry that ip restrictions applied to.
	RegistryID *string `json:"registryId,omitempty" tf:"registry_id,omitempty"`
}

type RegistryIPPermissionParameters struct {

	// List of configured CIDRs, from which pull is allowed.
	// +kubebuilder:validation:Optional
	// +listType=set
	Pull []*string `json:"pull,omitempty" tf:"pull,omitempty"`

	// List of configured CIDRs, from which push is allowed.
	// +kubebuilder:validation:Optional
	// +listType=set
	Push []*string `json:"push,omitempty" tf:"push,omitempty"`

	// The ID of the registry that ip restrictions applied to.
	// +crossplane:generate:reference:type=Registry
	// +kubebuilder:validation:Optional
	RegistryID *string `json:"registryId,omitempty" tf:"registry_id,omitempty"`

	// Reference to a Registry to populate registryId.
	// +kubebuilder:validation:Optional
	RegistryIDRef *v1.Reference `json:"registryIdRef,omitempty" tf:"-"`

	// Selector for a Registry to populate registryId.
	// +kubebuilder:validation:Optional
	RegistryIDSelector *v1.Selector `json:"registryIdSelector,omitempty" tf:"-"`
}

// RegistryIPPermissionSpec defines the desired state of RegistryIPPermission
type RegistryIPPermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegistryIPPermissionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RegistryIPPermissionInitParameters `json:"initProvider,omitempty"`
}

// RegistryIPPermissionStatus defines the observed state of RegistryIPPermission.
type RegistryIPPermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegistryIPPermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RegistryIPPermission is the Schema for the RegistryIPPermissions API. Creates a new Container Registry IP Permission.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type RegistryIPPermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegistryIPPermissionSpec   `json:"spec"`
	Status            RegistryIPPermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegistryIPPermissionList contains a list of RegistryIPPermissions
type RegistryIPPermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegistryIPPermission `json:"items"`
}

// Repository type metadata.
var (
	RegistryIPPermission_Kind             = "RegistryIPPermission"
	RegistryIPPermission_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RegistryIPPermission_Kind}.String()
	RegistryIPPermission_KindAPIVersion   = RegistryIPPermission_Kind + "." + CRDGroupVersion.String()
	RegistryIPPermission_GroupVersionKind = CRDGroupVersion.WithKind(RegistryIPPermission_Kind)
)

func init() {
	SchemeBuilder.Register(&RegistryIPPermission{}, &RegistryIPPermissionList{})
}
