// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1alpha11 "github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1"
	v1alpha1 "github.com/tagesjump/provider-upjet-yc/apis/vpc/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Agent.
func (mg *Agent) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ComputeInstance); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ComputeInstance[i3].NetworkInterface); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ComputeInstance[i3].NetworkInterface[i4].SubnetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ComputeInstance[i3].NetworkInterface[i4].SubnetIDRef,
				Selector:     mg.Spec.ForProvider.ComputeInstance[i3].NetworkInterface[i4].SubnetIDSelector,
				To: reference.To{
					List:    &v1alpha1.SubnetList{},
					Managed: &v1alpha1.Subnet{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ComputeInstance[i3].NetworkInterface[i4].SubnetID")
			}
			mg.Spec.ForProvider.ComputeInstance[i3].NetworkInterface[i4].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ComputeInstance[i3].NetworkInterface[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ComputeInstance); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ComputeInstance[i3].ServiceAccountID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ComputeInstance[i3].ServiceAccountIDRef,
			Selector:     mg.Spec.ForProvider.ComputeInstance[i3].ServiceAccountIDSelector,
			To: reference.To{
				List:    &v1alpha1.SecurityGroupList{},
				Managed: &v1alpha1.SecurityGroup{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ComputeInstance[i3].ServiceAccountID")
		}
		mg.Spec.ForProvider.ComputeInstance[i3].ServiceAccountID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ComputeInstance[i3].ServiceAccountIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FolderIDRef,
		Selector:     mg.Spec.ForProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha11.FolderList{},
			Managed: &v1alpha11.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FolderID")
	}
	mg.Spec.ForProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ComputeInstance); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ComputeInstance[i3].NetworkInterface); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ComputeInstance[i3].NetworkInterface[i4].SubnetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ComputeInstance[i3].NetworkInterface[i4].SubnetIDRef,
				Selector:     mg.Spec.InitProvider.ComputeInstance[i3].NetworkInterface[i4].SubnetIDSelector,
				To: reference.To{
					List:    &v1alpha1.SubnetList{},
					Managed: &v1alpha1.Subnet{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ComputeInstance[i3].NetworkInterface[i4].SubnetID")
			}
			mg.Spec.InitProvider.ComputeInstance[i3].NetworkInterface[i4].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ComputeInstance[i3].NetworkInterface[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ComputeInstance); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ComputeInstance[i3].ServiceAccountID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ComputeInstance[i3].ServiceAccountIDRef,
			Selector:     mg.Spec.InitProvider.ComputeInstance[i3].ServiceAccountIDSelector,
			To: reference.To{
				List:    &v1alpha1.SecurityGroupList{},
				Managed: &v1alpha1.SecurityGroup{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ComputeInstance[i3].ServiceAccountID")
		}
		mg.Spec.InitProvider.ComputeInstance[i3].ServiceAccountID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ComputeInstance[i3].ServiceAccountIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FolderID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FolderIDRef,
		Selector:     mg.Spec.InitProvider.FolderIDSelector,
		To: reference.To{
			List:    &v1alpha11.FolderList{},
			Managed: &v1alpha11.Folder{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FolderID")
	}
	mg.Spec.InitProvider.FolderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FolderIDRef = rsp.ResolvedReference

	return nil
}
