// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AnyFilterInitParameters struct {

	// ID of the parent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type AnyFilterObservation struct {

	// ID of the parent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type AnyFilterParameters struct {

	// ID of the parent resource.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`
}

type AnyFiltersInitParameters struct {

	// ID of the parent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type AnyFiltersObservation struct {

	// ID of the parent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type AnyFiltersParameters struct {

	// ID of the parent resource.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`
}

type CategoriesInitParameters struct {

	// Type of the event by its relation to the cloud resource model. Possible values: CONTROL_PLANE/DATA_PLANE
	Plane *string `json:"plane,omitempty" tf:"plane,omitempty"`

	// Type of the event by its operation effect on the resource. Possible values: READ/WRITE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CategoriesObservation struct {

	// Type of the event by its relation to the cloud resource model. Possible values: CONTROL_PLANE/DATA_PLANE
	Plane *string `json:"plane,omitempty" tf:"plane,omitempty"`

	// Type of the event by its operation effect on the resource. Possible values: READ/WRITE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CategoriesParameters struct {

	// Type of the event by its relation to the cloud resource model. Possible values: CONTROL_PLANE/DATA_PLANE
	// +kubebuilder:validation:Optional
	Plane *string `json:"plane" tf:"plane,omitempty"`

	// Type of the event by its operation effect on the resource. Possible values: READ/WRITE
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type DataStreamDestinationInitParameters struct {

	// ID of the YDB hosting the destination data stream.
	DatabaseID *string `json:"databaseId,omitempty" tf:"database_id,omitempty"`

	// Name of the YDS stream belonging to the specified YDB.
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`
}

type DataStreamDestinationObservation struct {

	// ID of the YDB hosting the destination data stream.
	DatabaseID *string `json:"databaseId,omitempty" tf:"database_id,omitempty"`

	// Name of the YDS stream belonging to the specified YDB.
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`
}

type DataStreamDestinationParameters struct {

	// ID of the YDB hosting the destination data stream.
	// +kubebuilder:validation:Optional
	DatabaseID *string `json:"databaseId" tf:"database_id,omitempty"`

	// Name of the YDS stream belonging to the specified YDB.
	// +kubebuilder:validation:Optional
	StreamName *string `json:"streamName" tf:"stream_name,omitempty"`
}

type EventFiltersInitParameters struct {

	// List of structures describing categories of gathered data plane events
	Categories []CategoriesInitParameters `json:"categories,omitempty" tf:"categories,omitempty"`

	// Structure describing filtering process for default control plane events. If omitted, the trail will not deliver this category
	PathFilter []PathFilterInitParameters `json:"pathFilter,omitempty" tf:"path_filter,omitempty"`

	// ID of the service which events will be gathered
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type EventFiltersObservation struct {

	// List of structures describing categories of gathered data plane events
	Categories []CategoriesObservation `json:"categories,omitempty" tf:"categories,omitempty"`

	// Structure describing filtering process for default control plane events. If omitted, the trail will not deliver this category
	PathFilter []PathFilterObservation `json:"pathFilter,omitempty" tf:"path_filter,omitempty"`

	// ID of the service which events will be gathered
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type EventFiltersParameters struct {

	// List of structures describing categories of gathered data plane events
	// +kubebuilder:validation:Optional
	Categories []CategoriesParameters `json:"categories" tf:"categories,omitempty"`

	// Structure describing filtering process for default control plane events. If omitted, the trail will not deliver this category
	// +kubebuilder:validation:Optional
	PathFilter []PathFilterParameters `json:"pathFilter" tf:"path_filter,omitempty"`

	// ID of the service which events will be gathered
	// +kubebuilder:validation:Optional
	Service *string `json:"service" tf:"service,omitempty"`
}

type FilterInitParameters struct {

	// Structure describing filtering process for the service-specific data plane events
	EventFilters []EventFiltersInitParameters `json:"eventFilters,omitempty" tf:"event_filters,omitempty"`

	// Structure describing filtering process for default control plane events. If omitted, the trail will not deliver this category
	PathFilter []FilterPathFilterInitParameters `json:"pathFilter,omitempty" tf:"path_filter,omitempty"`
}

type FilterObservation struct {

	// Structure describing filtering process for the service-specific data plane events
	EventFilters []EventFiltersObservation `json:"eventFilters,omitempty" tf:"event_filters,omitempty"`

	// Structure describing filtering process for default control plane events. If omitted, the trail will not deliver this category
	PathFilter []FilterPathFilterObservation `json:"pathFilter,omitempty" tf:"path_filter,omitempty"`
}

type FilterParameters struct {

	// Structure describing filtering process for the service-specific data plane events
	// +kubebuilder:validation:Optional
	EventFilters []EventFiltersParameters `json:"eventFilters,omitempty" tf:"event_filters,omitempty"`

	// Structure describing filtering process for default control plane events. If omitted, the trail will not deliver this category
	// +kubebuilder:validation:Optional
	PathFilter []FilterPathFilterParameters `json:"pathFilter,omitempty" tf:"path_filter,omitempty"`
}

type FilterPathFilterInitParameters struct {

	// Structure describing that events will be gathered from all cloud resources that belong to the parent resource. Mutually exclusive with some_filter.
	AnyFilter []PathFilterAnyFilterInitParameters `json:"anyFilter,omitempty" tf:"any_filter,omitempty"`

	// Structure describing that events will be gathered from some of the cloud resources that belong to the parent resource. Mutually exclusive with any_filter.
	SomeFilter []PathFilterSomeFilterInitParameters `json:"someFilter,omitempty" tf:"some_filter,omitempty"`
}

type FilterPathFilterObservation struct {

	// Structure describing that events will be gathered from all cloud resources that belong to the parent resource. Mutually exclusive with some_filter.
	AnyFilter []PathFilterAnyFilterObservation `json:"anyFilter,omitempty" tf:"any_filter,omitempty"`

	// Structure describing that events will be gathered from some of the cloud resources that belong to the parent resource. Mutually exclusive with any_filter.
	SomeFilter []PathFilterSomeFilterObservation `json:"someFilter,omitempty" tf:"some_filter,omitempty"`
}

type FilterPathFilterParameters struct {

	// Structure describing that events will be gathered from all cloud resources that belong to the parent resource. Mutually exclusive with some_filter.
	// +kubebuilder:validation:Optional
	AnyFilter []PathFilterAnyFilterParameters `json:"anyFilter,omitempty" tf:"any_filter,omitempty"`

	// Structure describing that events will be gathered from some of the cloud resources that belong to the parent resource. Mutually exclusive with any_filter.
	// +kubebuilder:validation:Optional
	SomeFilter []PathFilterSomeFilterParameters `json:"someFilter,omitempty" tf:"some_filter,omitempty"`
}

type LoggingDestinationInitParameters struct {

	// ID of the destination Cloud Logging Group
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`
}

type LoggingDestinationObservation struct {

	// ID of the destination Cloud Logging Group
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`
}

type LoggingDestinationParameters struct {

	// ID of the destination Cloud Logging Group
	// +kubebuilder:validation:Optional
	LogGroupID *string `json:"logGroupId" tf:"log_group_id,omitempty"`
}

type PathFilterAnyFilterInitParameters struct {

	// ID of the parent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type PathFilterAnyFilterObservation struct {

	// ID of the parent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type PathFilterAnyFilterParameters struct {

	// ID of the parent resource.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`
}

type PathFilterInitParameters struct {

	// Structure describing that events will be gathered from all cloud resources that belong to the parent resource. Mutually exclusive with some_filter.
	AnyFilter []AnyFilterInitParameters `json:"anyFilter,omitempty" tf:"any_filter,omitempty"`

	// Structure describing that events will be gathered from some of the cloud resources that belong to the parent resource. Mutually exclusive with any_filter.
	SomeFilter []SomeFilterInitParameters `json:"someFilter,omitempty" tf:"some_filter,omitempty"`
}

type PathFilterObservation struct {

	// Structure describing that events will be gathered from all cloud resources that belong to the parent resource. Mutually exclusive with some_filter.
	AnyFilter []AnyFilterObservation `json:"anyFilter,omitempty" tf:"any_filter,omitempty"`

	// Structure describing that events will be gathered from some of the cloud resources that belong to the parent resource. Mutually exclusive with any_filter.
	SomeFilter []SomeFilterObservation `json:"someFilter,omitempty" tf:"some_filter,omitempty"`
}

type PathFilterParameters struct {

	// Structure describing that events will be gathered from all cloud resources that belong to the parent resource. Mutually exclusive with some_filter.
	// +kubebuilder:validation:Optional
	AnyFilter []AnyFilterParameters `json:"anyFilter,omitempty" tf:"any_filter,omitempty"`

	// Structure describing that events will be gathered from some of the cloud resources that belong to the parent resource. Mutually exclusive with any_filter.
	// +kubebuilder:validation:Optional
	SomeFilter []SomeFilterParameters `json:"someFilter,omitempty" tf:"some_filter,omitempty"`
}

type PathFilterSomeFilterInitParameters struct {

	// List of child resources from which events will be gathered
	AnyFilters []SomeFilterAnyFiltersInitParameters `json:"anyFilters,omitempty" tf:"any_filters,omitempty"`

	// ID of the parent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type PathFilterSomeFilterObservation struct {

	// List of child resources from which events will be gathered
	AnyFilters []SomeFilterAnyFiltersObservation `json:"anyFilters,omitempty" tf:"any_filters,omitempty"`

	// ID of the parent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type PathFilterSomeFilterParameters struct {

	// List of child resources from which events will be gathered
	// +kubebuilder:validation:Optional
	AnyFilters []SomeFilterAnyFiltersParameters `json:"anyFilters" tf:"any_filters,omitempty"`

	// ID of the parent resource.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`
}

type SomeFilterAnyFiltersInitParameters struct {

	// ID of the parent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type SomeFilterAnyFiltersObservation struct {

	// ID of the parent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type SomeFilterAnyFiltersParameters struct {

	// ID of the parent resource.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`
}

type SomeFilterInitParameters struct {

	// List of child resources from which events will be gathered
	AnyFilters []AnyFiltersInitParameters `json:"anyFilters,omitempty" tf:"any_filters,omitempty"`

	// ID of the parent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type SomeFilterObservation struct {

	// List of child resources from which events will be gathered
	AnyFilters []AnyFiltersObservation `json:"anyFilters,omitempty" tf:"any_filters,omitempty"`

	// ID of the parent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type SomeFilterParameters struct {

	// List of child resources from which events will be gathered
	// +kubebuilder:validation:Optional
	AnyFilters []AnyFiltersParameters `json:"anyFilters" tf:"any_filters,omitempty"`

	// ID of the parent resource.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// Resource type of the parent resource.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`
}

type StorageDestinationInitParameters struct {

	// Name of the destination bucket
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Additional prefix of the uploaded objects. If not specified, objects will be uploaded with prefix equal to trail_id
	ObjectPrefix *string `json:"objectPrefix,omitempty" tf:"object_prefix,omitempty"`
}

type StorageDestinationObservation struct {

	// Name of the destination bucket
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Additional prefix of the uploaded objects. If not specified, objects will be uploaded with prefix equal to trail_id
	ObjectPrefix *string `json:"objectPrefix,omitempty" tf:"object_prefix,omitempty"`
}

type StorageDestinationParameters struct {

	// Name of the destination bucket
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// Additional prefix of the uploaded objects. If not specified, objects will be uploaded with prefix equal to trail_id
	// +kubebuilder:validation:Optional
	ObjectPrefix *string `json:"objectPrefix,omitempty" tf:"object_prefix,omitempty"`
}

type TrailsTrailInitParameters struct {

	// Structure describing destination data stream of the trail. Mutually exclusive with logging_destination and storage_destination.
	DataStreamDestination []DataStreamDestinationInitParameters `json:"dataStreamDestination,omitempty" tf:"data_stream_destination,omitempty"`

	// Description of the trail.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Structure describing event filtering process for the trail.
	Filter []FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// ID of the folder to which the trail belongs.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// Labels defined by the user.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Structure describing destination log group of the trail. Mutually exclusive with storage_destination and data_stream_destination.
	LoggingDestination []LoggingDestinationInitParameters `json:"loggingDestination,omitempty" tf:"logging_destination,omitempty"`

	// Name of the trail.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the IAM service account that is used by the trail.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// Structure describing destination bucket of the trail. Mutually exclusive with logging_destination and data_stream_destination.
	StorageDestination []StorageDestinationInitParameters `json:"storageDestination,omitempty" tf:"storage_destination,omitempty"`
}

type TrailsTrailObservation struct {

	// Structure describing destination data stream of the trail. Mutually exclusive with logging_destination and storage_destination.
	DataStreamDestination []DataStreamDestinationObservation `json:"dataStreamDestination,omitempty" tf:"data_stream_destination,omitempty"`

	// Description of the trail.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Structure describing event filtering process for the trail.
	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// ID of the folder to which the trail belongs.
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Labels defined by the user.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Structure describing destination log group of the trail. Mutually exclusive with storage_destination and data_stream_destination.
	LoggingDestination []LoggingDestinationObservation `json:"loggingDestination,omitempty" tf:"logging_destination,omitempty"`

	// Name of the trail.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the IAM service account that is used by the trail.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// Status of this trail.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Structure describing destination bucket of the trail. Mutually exclusive with logging_destination and data_stream_destination.
	StorageDestination []StorageDestinationObservation `json:"storageDestination,omitempty" tf:"storage_destination,omitempty"`

	// ID of the trail resource.
	TrailID *string `json:"trailId,omitempty" tf:"trail_id,omitempty"`
}

type TrailsTrailParameters struct {

	// Structure describing destination data stream of the trail. Mutually exclusive with logging_destination and storage_destination.
	// +kubebuilder:validation:Optional
	DataStreamDestination []DataStreamDestinationParameters `json:"dataStreamDestination,omitempty" tf:"data_stream_destination,omitempty"`

	// Description of the trail.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Structure describing event filtering process for the trail.
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// ID of the folder to which the trail belongs.
	// +crossplane:generate:reference:type=github.com/tagesjump/provider-upjet-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// Labels defined by the user.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Structure describing destination log group of the trail. Mutually exclusive with storage_destination and data_stream_destination.
	// +kubebuilder:validation:Optional
	LoggingDestination []LoggingDestinationParameters `json:"loggingDestination,omitempty" tf:"logging_destination,omitempty"`

	// Name of the trail.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the IAM service account that is used by the trail.
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// Structure describing destination bucket of the trail. Mutually exclusive with logging_destination and data_stream_destination.
	// +kubebuilder:validation:Optional
	StorageDestination []StorageDestinationParameters `json:"storageDestination,omitempty" tf:"storage_destination,omitempty"`
}

// TrailsTrailSpec defines the desired state of TrailsTrail
type TrailsTrailSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrailsTrailParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrailsTrailInitParameters `json:"initProvider,omitempty"`
}

// TrailsTrailStatus defines the observed state of TrailsTrail.
type TrailsTrailStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrailsTrailObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrailsTrail is the Schema for the TrailsTrails API. Manages a trail resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type TrailsTrail struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.filter) || (has(self.initProvider) && has(self.initProvider.filter))",message="spec.forProvider.filter is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceAccountId) || (has(self.initProvider) && has(self.initProvider.serviceAccountId))",message="spec.forProvider.serviceAccountId is a required parameter"
	Spec   TrailsTrailSpec   `json:"spec"`
	Status TrailsTrailStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrailsTrailList contains a list of TrailsTrails
type TrailsTrailList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrailsTrail `json:"items"`
}

// Repository type metadata.
var (
	TrailsTrail_Kind             = "TrailsTrail"
	TrailsTrail_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrailsTrail_Kind}.String()
	TrailsTrail_KindAPIVersion   = TrailsTrail_Kind + "." + CRDGroupVersion.String()
	TrailsTrail_GroupVersionKind = CRDGroupVersion.WithKind(TrailsTrail_Kind)
)

func init() {
	SchemeBuilder.Register(&TrailsTrail{}, &TrailsTrailList{})
}
