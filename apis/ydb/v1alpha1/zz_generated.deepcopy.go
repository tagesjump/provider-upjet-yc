//go:build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ColumnInitParameters) DeepCopyInto(out *ColumnInitParameters) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NotNull != nil {
		in, out := &in.NotNull, &out.NotNull
		*out = new(bool)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ColumnInitParameters.
func (in *ColumnInitParameters) DeepCopy() *ColumnInitParameters {
	if in == nil {
		return nil
	}
	out := new(ColumnInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ColumnObservation) DeepCopyInto(out *ColumnObservation) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NotNull != nil {
		in, out := &in.NotNull, &out.NotNull
		*out = new(bool)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ColumnObservation.
func (in *ColumnObservation) DeepCopy() *ColumnObservation {
	if in == nil {
		return nil
	}
	out := new(ColumnObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ColumnParameters) DeepCopyInto(out *ColumnParameters) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NotNull != nil {
		in, out := &in.NotNull, &out.NotNull
		*out = new(bool)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ColumnParameters.
func (in *ColumnParameters) DeepCopy() *ColumnParameters {
	if in == nil {
		return nil
	}
	out := new(ColumnParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsumerInitParameters) DeepCopyInto(out *ConsumerInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.StartingMessageTimestampMs != nil {
		in, out := &in.StartingMessageTimestampMs, &out.StartingMessageTimestampMs
		*out = new(float64)
		**out = **in
	}
	if in.SupportedCodecs != nil {
		in, out := &in.SupportedCodecs, &out.SupportedCodecs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsumerInitParameters.
func (in *ConsumerInitParameters) DeepCopy() *ConsumerInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConsumerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsumerObservation) DeepCopyInto(out *ConsumerObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.StartingMessageTimestampMs != nil {
		in, out := &in.StartingMessageTimestampMs, &out.StartingMessageTimestampMs
		*out = new(float64)
		**out = **in
	}
	if in.SupportedCodecs != nil {
		in, out := &in.SupportedCodecs, &out.SupportedCodecs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsumerObservation.
func (in *ConsumerObservation) DeepCopy() *ConsumerObservation {
	if in == nil {
		return nil
	}
	out := new(ConsumerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsumerParameters) DeepCopyInto(out *ConsumerParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.StartingMessageTimestampMs != nil {
		in, out := &in.StartingMessageTimestampMs, &out.StartingMessageTimestampMs
		*out = new(float64)
		**out = **in
	}
	if in.SupportedCodecs != nil {
		in, out := &in.SupportedCodecs, &out.SupportedCodecs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsumerParameters.
func (in *ConsumerParameters) DeepCopy() *ConsumerParameters {
	if in == nil {
		return nil
	}
	out := new(ConsumerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseDedicated) DeepCopyInto(out *DatabaseDedicated) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseDedicated.
func (in *DatabaseDedicated) DeepCopy() *DatabaseDedicated {
	if in == nil {
		return nil
	}
	out := new(DatabaseDedicated)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseDedicated) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseDedicatedInitParameters) DeepCopyInto(out *DatabaseDedicatedInitParameters) {
	*out = *in
	if in.AssignPublicIps != nil {
		in, out := &in.AssignPublicIps, &out.AssignPublicIps
		*out = new(bool)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = make([]LocationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LocationID != nil {
		in, out := &in.LocationID, &out.LocationID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
	if in.ScalePolicy != nil {
		in, out := &in.ScalePolicy, &out.ScalePolicy
		*out = make([]ScalePolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SleepAfter != nil {
		in, out := &in.SleepAfter, &out.SleepAfter
		*out = new(float64)
		**out = **in
	}
	if in.StorageConfig != nil {
		in, out := &in.StorageConfig, &out.StorageConfig
		*out = make([]StorageConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetIdsRefs != nil {
		in, out := &in.SubnetIdsRefs, &out.SubnetIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIdsSelector != nil {
		in, out := &in.SubnetIdsSelector, &out.SubnetIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseDedicatedInitParameters.
func (in *DatabaseDedicatedInitParameters) DeepCopy() *DatabaseDedicatedInitParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseDedicatedInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseDedicatedList) DeepCopyInto(out *DatabaseDedicatedList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DatabaseDedicated, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseDedicatedList.
func (in *DatabaseDedicatedList) DeepCopy() *DatabaseDedicatedList {
	if in == nil {
		return nil
	}
	out := new(DatabaseDedicatedList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseDedicatedList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseDedicatedObservation) DeepCopyInto(out *DatabaseDedicatedObservation) {
	*out = *in
	if in.AssignPublicIps != nil {
		in, out := &in.AssignPublicIps, &out.AssignPublicIps
		*out = new(bool)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.DatabasePath != nil {
		in, out := &in.DatabasePath, &out.DatabasePath
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = make([]LocationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LocationID != nil {
		in, out := &in.LocationID, &out.LocationID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
	if in.ScalePolicy != nil {
		in, out := &in.ScalePolicy, &out.ScalePolicy
		*out = make([]ScalePolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SleepAfter != nil {
		in, out := &in.SleepAfter, &out.SleepAfter
		*out = new(float64)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.StorageConfig != nil {
		in, out := &in.StorageConfig, &out.StorageConfig
		*out = make([]StorageConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TLSEnabled != nil {
		in, out := &in.TLSEnabled, &out.TLSEnabled
		*out = new(bool)
		**out = **in
	}
	if in.YdbAPIEndpoint != nil {
		in, out := &in.YdbAPIEndpoint, &out.YdbAPIEndpoint
		*out = new(string)
		**out = **in
	}
	if in.YdbFullEndpoint != nil {
		in, out := &in.YdbFullEndpoint, &out.YdbFullEndpoint
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseDedicatedObservation.
func (in *DatabaseDedicatedObservation) DeepCopy() *DatabaseDedicatedObservation {
	if in == nil {
		return nil
	}
	out := new(DatabaseDedicatedObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseDedicatedParameters) DeepCopyInto(out *DatabaseDedicatedParameters) {
	*out = *in
	if in.AssignPublicIps != nil {
		in, out := &in.AssignPublicIps, &out.AssignPublicIps
		*out = new(bool)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = make([]LocationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LocationID != nil {
		in, out := &in.LocationID, &out.LocationID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
	if in.ScalePolicy != nil {
		in, out := &in.ScalePolicy, &out.ScalePolicy
		*out = make([]ScalePolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SleepAfter != nil {
		in, out := &in.SleepAfter, &out.SleepAfter
		*out = new(float64)
		**out = **in
	}
	if in.StorageConfig != nil {
		in, out := &in.StorageConfig, &out.StorageConfig
		*out = make([]StorageConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetIdsRefs != nil {
		in, out := &in.SubnetIdsRefs, &out.SubnetIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIdsSelector != nil {
		in, out := &in.SubnetIdsSelector, &out.SubnetIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseDedicatedParameters.
func (in *DatabaseDedicatedParameters) DeepCopy() *DatabaseDedicatedParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseDedicatedParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseDedicatedSpec) DeepCopyInto(out *DatabaseDedicatedSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseDedicatedSpec.
func (in *DatabaseDedicatedSpec) DeepCopy() *DatabaseDedicatedSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseDedicatedSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseDedicatedStatus) DeepCopyInto(out *DatabaseDedicatedStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseDedicatedStatus.
func (in *DatabaseDedicatedStatus) DeepCopy() *DatabaseDedicatedStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseDedicatedStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseIAMBinding) DeepCopyInto(out *DatabaseIAMBinding) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseIAMBinding.
func (in *DatabaseIAMBinding) DeepCopy() *DatabaseIAMBinding {
	if in == nil {
		return nil
	}
	out := new(DatabaseIAMBinding)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseIAMBinding) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseIAMBindingInitParameters) DeepCopyInto(out *DatabaseIAMBindingInitParameters) {
	*out = *in
	if in.DatabaseID != nil {
		in, out := &in.DatabaseID, &out.DatabaseID
		*out = new(string)
		**out = **in
	}
	if in.DatabaseIDRef != nil {
		in, out := &in.DatabaseIDRef, &out.DatabaseIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DatabaseIDSelector != nil {
		in, out := &in.DatabaseIDSelector, &out.DatabaseIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Members != nil {
		in, out := &in.Members, &out.Members
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountRef != nil {
		in, out := &in.ServiceAccountRef, &out.ServiceAccountRef
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceAccountSelector != nil {
		in, out := &in.ServiceAccountSelector, &out.ServiceAccountSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SleepAfter != nil {
		in, out := &in.SleepAfter, &out.SleepAfter
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseIAMBindingInitParameters.
func (in *DatabaseIAMBindingInitParameters) DeepCopy() *DatabaseIAMBindingInitParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseIAMBindingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseIAMBindingList) DeepCopyInto(out *DatabaseIAMBindingList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DatabaseIAMBinding, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseIAMBindingList.
func (in *DatabaseIAMBindingList) DeepCopy() *DatabaseIAMBindingList {
	if in == nil {
		return nil
	}
	out := new(DatabaseIAMBindingList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseIAMBindingList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseIAMBindingObservation) DeepCopyInto(out *DatabaseIAMBindingObservation) {
	*out = *in
	if in.DatabaseID != nil {
		in, out := &in.DatabaseID, &out.DatabaseID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Members != nil {
		in, out := &in.Members, &out.Members
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.SleepAfter != nil {
		in, out := &in.SleepAfter, &out.SleepAfter
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseIAMBindingObservation.
func (in *DatabaseIAMBindingObservation) DeepCopy() *DatabaseIAMBindingObservation {
	if in == nil {
		return nil
	}
	out := new(DatabaseIAMBindingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseIAMBindingParameters) DeepCopyInto(out *DatabaseIAMBindingParameters) {
	*out = *in
	if in.DatabaseID != nil {
		in, out := &in.DatabaseID, &out.DatabaseID
		*out = new(string)
		**out = **in
	}
	if in.DatabaseIDRef != nil {
		in, out := &in.DatabaseIDRef, &out.DatabaseIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DatabaseIDSelector != nil {
		in, out := &in.DatabaseIDSelector, &out.DatabaseIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Members != nil {
		in, out := &in.Members, &out.Members
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountRef != nil {
		in, out := &in.ServiceAccountRef, &out.ServiceAccountRef
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceAccountSelector != nil {
		in, out := &in.ServiceAccountSelector, &out.ServiceAccountSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SleepAfter != nil {
		in, out := &in.SleepAfter, &out.SleepAfter
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseIAMBindingParameters.
func (in *DatabaseIAMBindingParameters) DeepCopy() *DatabaseIAMBindingParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseIAMBindingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseIAMBindingSpec) DeepCopyInto(out *DatabaseIAMBindingSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseIAMBindingSpec.
func (in *DatabaseIAMBindingSpec) DeepCopy() *DatabaseIAMBindingSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseIAMBindingSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseIAMBindingStatus) DeepCopyInto(out *DatabaseIAMBindingStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseIAMBindingStatus.
func (in *DatabaseIAMBindingStatus) DeepCopy() *DatabaseIAMBindingStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseIAMBindingStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseServerless) DeepCopyInto(out *DatabaseServerless) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseServerless.
func (in *DatabaseServerless) DeepCopy() *DatabaseServerless {
	if in == nil {
		return nil
	}
	out := new(DatabaseServerless)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseServerless) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseServerlessInitParameters) DeepCopyInto(out *DatabaseServerlessInitParameters) {
	*out = *in
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LocationID != nil {
		in, out := &in.LocationID, &out.LocationID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ServerlessDatabase != nil {
		in, out := &in.ServerlessDatabase, &out.ServerlessDatabase
		*out = make([]ServerlessDatabaseInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SleepAfter != nil {
		in, out := &in.SleepAfter, &out.SleepAfter
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseServerlessInitParameters.
func (in *DatabaseServerlessInitParameters) DeepCopy() *DatabaseServerlessInitParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseServerlessInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseServerlessList) DeepCopyInto(out *DatabaseServerlessList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DatabaseServerless, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseServerlessList.
func (in *DatabaseServerlessList) DeepCopy() *DatabaseServerlessList {
	if in == nil {
		return nil
	}
	out := new(DatabaseServerlessList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseServerlessList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseServerlessObservation) DeepCopyInto(out *DatabaseServerlessObservation) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.DatabasePath != nil {
		in, out := &in.DatabasePath, &out.DatabasePath
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DocumentAPIEndpoint != nil {
		in, out := &in.DocumentAPIEndpoint, &out.DocumentAPIEndpoint
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LocationID != nil {
		in, out := &in.LocationID, &out.LocationID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ServerlessDatabase != nil {
		in, out := &in.ServerlessDatabase, &out.ServerlessDatabase
		*out = make([]ServerlessDatabaseObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SleepAfter != nil {
		in, out := &in.SleepAfter, &out.SleepAfter
		*out = new(float64)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.TLSEnabled != nil {
		in, out := &in.TLSEnabled, &out.TLSEnabled
		*out = new(bool)
		**out = **in
	}
	if in.YdbAPIEndpoint != nil {
		in, out := &in.YdbAPIEndpoint, &out.YdbAPIEndpoint
		*out = new(string)
		**out = **in
	}
	if in.YdbFullEndpoint != nil {
		in, out := &in.YdbFullEndpoint, &out.YdbFullEndpoint
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseServerlessObservation.
func (in *DatabaseServerlessObservation) DeepCopy() *DatabaseServerlessObservation {
	if in == nil {
		return nil
	}
	out := new(DatabaseServerlessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseServerlessParameters) DeepCopyInto(out *DatabaseServerlessParameters) {
	*out = *in
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LocationID != nil {
		in, out := &in.LocationID, &out.LocationID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ServerlessDatabase != nil {
		in, out := &in.ServerlessDatabase, &out.ServerlessDatabase
		*out = make([]ServerlessDatabaseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SleepAfter != nil {
		in, out := &in.SleepAfter, &out.SleepAfter
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseServerlessParameters.
func (in *DatabaseServerlessParameters) DeepCopy() *DatabaseServerlessParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseServerlessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseServerlessSpec) DeepCopyInto(out *DatabaseServerlessSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseServerlessSpec.
func (in *DatabaseServerlessSpec) DeepCopy() *DatabaseServerlessSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseServerlessSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseServerlessStatus) DeepCopyInto(out *DatabaseServerlessStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseServerlessStatus.
func (in *DatabaseServerlessStatus) DeepCopy() *DatabaseServerlessStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseServerlessStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FamilyInitParameters) DeepCopyInto(out *FamilyInitParameters) {
	*out = *in
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FamilyInitParameters.
func (in *FamilyInitParameters) DeepCopy() *FamilyInitParameters {
	if in == nil {
		return nil
	}
	out := new(FamilyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FamilyObservation) DeepCopyInto(out *FamilyObservation) {
	*out = *in
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FamilyObservation.
func (in *FamilyObservation) DeepCopy() *FamilyObservation {
	if in == nil {
		return nil
	}
	out := new(FamilyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FamilyParameters) DeepCopyInto(out *FamilyParameters) {
	*out = *in
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FamilyParameters.
func (in *FamilyParameters) DeepCopy() *FamilyParameters {
	if in == nil {
		return nil
	}
	out := new(FamilyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FixedScaleInitParameters) DeepCopyInto(out *FixedScaleInitParameters) {
	*out = *in
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FixedScaleInitParameters.
func (in *FixedScaleInitParameters) DeepCopy() *FixedScaleInitParameters {
	if in == nil {
		return nil
	}
	out := new(FixedScaleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FixedScaleObservation) DeepCopyInto(out *FixedScaleObservation) {
	*out = *in
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FixedScaleObservation.
func (in *FixedScaleObservation) DeepCopy() *FixedScaleObservation {
	if in == nil {
		return nil
	}
	out := new(FixedScaleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FixedScaleParameters) DeepCopyInto(out *FixedScaleParameters) {
	*out = *in
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FixedScaleParameters.
func (in *FixedScaleParameters) DeepCopy() *FixedScaleParameters {
	if in == nil {
		return nil
	}
	out := new(FixedScaleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocationInitParameters) DeepCopyInto(out *LocationInitParameters) {
	*out = *in
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = make([]RegionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocationInitParameters.
func (in *LocationInitParameters) DeepCopy() *LocationInitParameters {
	if in == nil {
		return nil
	}
	out := new(LocationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocationObservation) DeepCopyInto(out *LocationObservation) {
	*out = *in
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = make([]RegionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocationObservation.
func (in *LocationObservation) DeepCopy() *LocationObservation {
	if in == nil {
		return nil
	}
	out := new(LocationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocationParameters) DeepCopyInto(out *LocationParameters) {
	*out = *in
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = make([]RegionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocationParameters.
func (in *LocationParameters) DeepCopy() *LocationParameters {
	if in == nil {
		return nil
	}
	out := new(LocationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitionAtKeysInitParameters) DeepCopyInto(out *PartitionAtKeysInitParameters) {
	*out = *in
	if in.Keys != nil {
		in, out := &in.Keys, &out.Keys
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitionAtKeysInitParameters.
func (in *PartitionAtKeysInitParameters) DeepCopy() *PartitionAtKeysInitParameters {
	if in == nil {
		return nil
	}
	out := new(PartitionAtKeysInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitionAtKeysObservation) DeepCopyInto(out *PartitionAtKeysObservation) {
	*out = *in
	if in.Keys != nil {
		in, out := &in.Keys, &out.Keys
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitionAtKeysObservation.
func (in *PartitionAtKeysObservation) DeepCopy() *PartitionAtKeysObservation {
	if in == nil {
		return nil
	}
	out := new(PartitionAtKeysObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitionAtKeysParameters) DeepCopyInto(out *PartitionAtKeysParameters) {
	*out = *in
	if in.Keys != nil {
		in, out := &in.Keys, &out.Keys
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitionAtKeysParameters.
func (in *PartitionAtKeysParameters) DeepCopy() *PartitionAtKeysParameters {
	if in == nil {
		return nil
	}
	out := new(PartitionAtKeysParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitioningSettingsInitParameters) DeepCopyInto(out *PartitioningSettingsInitParameters) {
	*out = *in
	if in.AutoPartitioningByLoad != nil {
		in, out := &in.AutoPartitioningByLoad, &out.AutoPartitioningByLoad
		*out = new(bool)
		**out = **in
	}
	if in.AutoPartitioningBySizeEnabled != nil {
		in, out := &in.AutoPartitioningBySizeEnabled, &out.AutoPartitioningBySizeEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AutoPartitioningMaxPartitionsCount != nil {
		in, out := &in.AutoPartitioningMaxPartitionsCount, &out.AutoPartitioningMaxPartitionsCount
		*out = new(float64)
		**out = **in
	}
	if in.AutoPartitioningMinPartitionsCount != nil {
		in, out := &in.AutoPartitioningMinPartitionsCount, &out.AutoPartitioningMinPartitionsCount
		*out = new(float64)
		**out = **in
	}
	if in.AutoPartitioningPartitionSizeMb != nil {
		in, out := &in.AutoPartitioningPartitionSizeMb, &out.AutoPartitioningPartitionSizeMb
		*out = new(float64)
		**out = **in
	}
	if in.PartitionAtKeys != nil {
		in, out := &in.PartitionAtKeys, &out.PartitionAtKeys
		*out = make([]PartitionAtKeysInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UniformPartitions != nil {
		in, out := &in.UniformPartitions, &out.UniformPartitions
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitioningSettingsInitParameters.
func (in *PartitioningSettingsInitParameters) DeepCopy() *PartitioningSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(PartitioningSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitioningSettingsObservation) DeepCopyInto(out *PartitioningSettingsObservation) {
	*out = *in
	if in.AutoPartitioningByLoad != nil {
		in, out := &in.AutoPartitioningByLoad, &out.AutoPartitioningByLoad
		*out = new(bool)
		**out = **in
	}
	if in.AutoPartitioningBySizeEnabled != nil {
		in, out := &in.AutoPartitioningBySizeEnabled, &out.AutoPartitioningBySizeEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AutoPartitioningMaxPartitionsCount != nil {
		in, out := &in.AutoPartitioningMaxPartitionsCount, &out.AutoPartitioningMaxPartitionsCount
		*out = new(float64)
		**out = **in
	}
	if in.AutoPartitioningMinPartitionsCount != nil {
		in, out := &in.AutoPartitioningMinPartitionsCount, &out.AutoPartitioningMinPartitionsCount
		*out = new(float64)
		**out = **in
	}
	if in.AutoPartitioningPartitionSizeMb != nil {
		in, out := &in.AutoPartitioningPartitionSizeMb, &out.AutoPartitioningPartitionSizeMb
		*out = new(float64)
		**out = **in
	}
	if in.PartitionAtKeys != nil {
		in, out := &in.PartitionAtKeys, &out.PartitionAtKeys
		*out = make([]PartitionAtKeysObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UniformPartitions != nil {
		in, out := &in.UniformPartitions, &out.UniformPartitions
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitioningSettingsObservation.
func (in *PartitioningSettingsObservation) DeepCopy() *PartitioningSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(PartitioningSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitioningSettingsParameters) DeepCopyInto(out *PartitioningSettingsParameters) {
	*out = *in
	if in.AutoPartitioningByLoad != nil {
		in, out := &in.AutoPartitioningByLoad, &out.AutoPartitioningByLoad
		*out = new(bool)
		**out = **in
	}
	if in.AutoPartitioningBySizeEnabled != nil {
		in, out := &in.AutoPartitioningBySizeEnabled, &out.AutoPartitioningBySizeEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AutoPartitioningMaxPartitionsCount != nil {
		in, out := &in.AutoPartitioningMaxPartitionsCount, &out.AutoPartitioningMaxPartitionsCount
		*out = new(float64)
		**out = **in
	}
	if in.AutoPartitioningMinPartitionsCount != nil {
		in, out := &in.AutoPartitioningMinPartitionsCount, &out.AutoPartitioningMinPartitionsCount
		*out = new(float64)
		**out = **in
	}
	if in.AutoPartitioningPartitionSizeMb != nil {
		in, out := &in.AutoPartitioningPartitionSizeMb, &out.AutoPartitioningPartitionSizeMb
		*out = new(float64)
		**out = **in
	}
	if in.PartitionAtKeys != nil {
		in, out := &in.PartitionAtKeys, &out.PartitionAtKeys
		*out = make([]PartitionAtKeysParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UniformPartitions != nil {
		in, out := &in.UniformPartitions, &out.UniformPartitions
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitioningSettingsParameters.
func (in *PartitioningSettingsParameters) DeepCopy() *PartitioningSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(PartitioningSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RegionInitParameters) DeepCopyInto(out *RegionInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RegionInitParameters.
func (in *RegionInitParameters) DeepCopy() *RegionInitParameters {
	if in == nil {
		return nil
	}
	out := new(RegionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RegionObservation) DeepCopyInto(out *RegionObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RegionObservation.
func (in *RegionObservation) DeepCopy() *RegionObservation {
	if in == nil {
		return nil
	}
	out := new(RegionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RegionParameters) DeepCopyInto(out *RegionParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RegionParameters.
func (in *RegionParameters) DeepCopy() *RegionParameters {
	if in == nil {
		return nil
	}
	out := new(RegionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScalePolicyInitParameters) DeepCopyInto(out *ScalePolicyInitParameters) {
	*out = *in
	if in.FixedScale != nil {
		in, out := &in.FixedScale, &out.FixedScale
		*out = make([]FixedScaleInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScalePolicyInitParameters.
func (in *ScalePolicyInitParameters) DeepCopy() *ScalePolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(ScalePolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScalePolicyObservation) DeepCopyInto(out *ScalePolicyObservation) {
	*out = *in
	if in.FixedScale != nil {
		in, out := &in.FixedScale, &out.FixedScale
		*out = make([]FixedScaleObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScalePolicyObservation.
func (in *ScalePolicyObservation) DeepCopy() *ScalePolicyObservation {
	if in == nil {
		return nil
	}
	out := new(ScalePolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScalePolicyParameters) DeepCopyInto(out *ScalePolicyParameters) {
	*out = *in
	if in.FixedScale != nil {
		in, out := &in.FixedScale, &out.FixedScale
		*out = make([]FixedScaleParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScalePolicyParameters.
func (in *ScalePolicyParameters) DeepCopy() *ScalePolicyParameters {
	if in == nil {
		return nil
	}
	out := new(ScalePolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessDatabaseInitParameters) DeepCopyInto(out *ServerlessDatabaseInitParameters) {
	*out = *in
	if in.EnableThrottlingRcuLimit != nil {
		in, out := &in.EnableThrottlingRcuLimit, &out.EnableThrottlingRcuLimit
		*out = new(bool)
		**out = **in
	}
	if in.ProvisionedRcuLimit != nil {
		in, out := &in.ProvisionedRcuLimit, &out.ProvisionedRcuLimit
		*out = new(float64)
		**out = **in
	}
	if in.StorageSizeLimit != nil {
		in, out := &in.StorageSizeLimit, &out.StorageSizeLimit
		*out = new(float64)
		**out = **in
	}
	if in.ThrottlingRcuLimit != nil {
		in, out := &in.ThrottlingRcuLimit, &out.ThrottlingRcuLimit
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessDatabaseInitParameters.
func (in *ServerlessDatabaseInitParameters) DeepCopy() *ServerlessDatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessDatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessDatabaseObservation) DeepCopyInto(out *ServerlessDatabaseObservation) {
	*out = *in
	if in.EnableThrottlingRcuLimit != nil {
		in, out := &in.EnableThrottlingRcuLimit, &out.EnableThrottlingRcuLimit
		*out = new(bool)
		**out = **in
	}
	if in.ProvisionedRcuLimit != nil {
		in, out := &in.ProvisionedRcuLimit, &out.ProvisionedRcuLimit
		*out = new(float64)
		**out = **in
	}
	if in.StorageSizeLimit != nil {
		in, out := &in.StorageSizeLimit, &out.StorageSizeLimit
		*out = new(float64)
		**out = **in
	}
	if in.ThrottlingRcuLimit != nil {
		in, out := &in.ThrottlingRcuLimit, &out.ThrottlingRcuLimit
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessDatabaseObservation.
func (in *ServerlessDatabaseObservation) DeepCopy() *ServerlessDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(ServerlessDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessDatabaseParameters) DeepCopyInto(out *ServerlessDatabaseParameters) {
	*out = *in
	if in.EnableThrottlingRcuLimit != nil {
		in, out := &in.EnableThrottlingRcuLimit, &out.EnableThrottlingRcuLimit
		*out = new(bool)
		**out = **in
	}
	if in.ProvisionedRcuLimit != nil {
		in, out := &in.ProvisionedRcuLimit, &out.ProvisionedRcuLimit
		*out = new(float64)
		**out = **in
	}
	if in.StorageSizeLimit != nil {
		in, out := &in.StorageSizeLimit, &out.StorageSizeLimit
		*out = new(float64)
		**out = **in
	}
	if in.ThrottlingRcuLimit != nil {
		in, out := &in.ThrottlingRcuLimit, &out.ThrottlingRcuLimit
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessDatabaseParameters.
func (in *ServerlessDatabaseParameters) DeepCopy() *ServerlessDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageConfigInitParameters) DeepCopyInto(out *StorageConfigInitParameters) {
	*out = *in
	if in.GroupCount != nil {
		in, out := &in.GroupCount, &out.GroupCount
		*out = new(float64)
		**out = **in
	}
	if in.StorageTypeID != nil {
		in, out := &in.StorageTypeID, &out.StorageTypeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageConfigInitParameters.
func (in *StorageConfigInitParameters) DeepCopy() *StorageConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(StorageConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageConfigObservation) DeepCopyInto(out *StorageConfigObservation) {
	*out = *in
	if in.GroupCount != nil {
		in, out := &in.GroupCount, &out.GroupCount
		*out = new(float64)
		**out = **in
	}
	if in.StorageTypeID != nil {
		in, out := &in.StorageTypeID, &out.StorageTypeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageConfigObservation.
func (in *StorageConfigObservation) DeepCopy() *StorageConfigObservation {
	if in == nil {
		return nil
	}
	out := new(StorageConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageConfigParameters) DeepCopyInto(out *StorageConfigParameters) {
	*out = *in
	if in.GroupCount != nil {
		in, out := &in.GroupCount, &out.GroupCount
		*out = new(float64)
		**out = **in
	}
	if in.StorageTypeID != nil {
		in, out := &in.StorageTypeID, &out.StorageTypeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageConfigParameters.
func (in *StorageConfigParameters) DeepCopy() *StorageConfigParameters {
	if in == nil {
		return nil
	}
	out := new(StorageConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TTLInitParameters) DeepCopyInto(out *TTLInitParameters) {
	*out = *in
	if in.ColumnName != nil {
		in, out := &in.ColumnName, &out.ColumnName
		*out = new(string)
		**out = **in
	}
	if in.ExpireInterval != nil {
		in, out := &in.ExpireInterval, &out.ExpireInterval
		*out = new(string)
		**out = **in
	}
	if in.Unit != nil {
		in, out := &in.Unit, &out.Unit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TTLInitParameters.
func (in *TTLInitParameters) DeepCopy() *TTLInitParameters {
	if in == nil {
		return nil
	}
	out := new(TTLInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TTLObservation) DeepCopyInto(out *TTLObservation) {
	*out = *in
	if in.ColumnName != nil {
		in, out := &in.ColumnName, &out.ColumnName
		*out = new(string)
		**out = **in
	}
	if in.ExpireInterval != nil {
		in, out := &in.ExpireInterval, &out.ExpireInterval
		*out = new(string)
		**out = **in
	}
	if in.Unit != nil {
		in, out := &in.Unit, &out.Unit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TTLObservation.
func (in *TTLObservation) DeepCopy() *TTLObservation {
	if in == nil {
		return nil
	}
	out := new(TTLObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TTLParameters) DeepCopyInto(out *TTLParameters) {
	*out = *in
	if in.ColumnName != nil {
		in, out := &in.ColumnName, &out.ColumnName
		*out = new(string)
		**out = **in
	}
	if in.ExpireInterval != nil {
		in, out := &in.ExpireInterval, &out.ExpireInterval
		*out = new(string)
		**out = **in
	}
	if in.Unit != nil {
		in, out := &in.Unit, &out.Unit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TTLParameters.
func (in *TTLParameters) DeepCopy() *TTLParameters {
	if in == nil {
		return nil
	}
	out := new(TTLParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Table) DeepCopyInto(out *Table) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Table.
func (in *Table) DeepCopy() *Table {
	if in == nil {
		return nil
	}
	out := new(Table)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Table) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableChangefeed) DeepCopyInto(out *TableChangefeed) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableChangefeed.
func (in *TableChangefeed) DeepCopy() *TableChangefeed {
	if in == nil {
		return nil
	}
	out := new(TableChangefeed)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TableChangefeed) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableChangefeedInitParameters) DeepCopyInto(out *TableChangefeedInitParameters) {
	*out = *in
	if in.ConnectionString != nil {
		in, out := &in.ConnectionString, &out.ConnectionString
		*out = new(string)
		**out = **in
	}
	if in.Consumer != nil {
		in, out := &in.Consumer, &out.Consumer
		*out = make([]ConsumerInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RetentionPeriod != nil {
		in, out := &in.RetentionPeriod, &out.RetentionPeriod
		*out = new(string)
		**out = **in
	}
	if in.TableID != nil {
		in, out := &in.TableID, &out.TableID
		*out = new(string)
		**out = **in
	}
	if in.TablePath != nil {
		in, out := &in.TablePath, &out.TablePath
		*out = new(string)
		**out = **in
	}
	if in.VirtualTimestamps != nil {
		in, out := &in.VirtualTimestamps, &out.VirtualTimestamps
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableChangefeedInitParameters.
func (in *TableChangefeedInitParameters) DeepCopy() *TableChangefeedInitParameters {
	if in == nil {
		return nil
	}
	out := new(TableChangefeedInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableChangefeedList) DeepCopyInto(out *TableChangefeedList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TableChangefeed, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableChangefeedList.
func (in *TableChangefeedList) DeepCopy() *TableChangefeedList {
	if in == nil {
		return nil
	}
	out := new(TableChangefeedList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TableChangefeedList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableChangefeedObservation) DeepCopyInto(out *TableChangefeedObservation) {
	*out = *in
	if in.ConnectionString != nil {
		in, out := &in.ConnectionString, &out.ConnectionString
		*out = new(string)
		**out = **in
	}
	if in.Consumer != nil {
		in, out := &in.Consumer, &out.Consumer
		*out = make([]ConsumerObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RetentionPeriod != nil {
		in, out := &in.RetentionPeriod, &out.RetentionPeriod
		*out = new(string)
		**out = **in
	}
	if in.TableID != nil {
		in, out := &in.TableID, &out.TableID
		*out = new(string)
		**out = **in
	}
	if in.TablePath != nil {
		in, out := &in.TablePath, &out.TablePath
		*out = new(string)
		**out = **in
	}
	if in.VirtualTimestamps != nil {
		in, out := &in.VirtualTimestamps, &out.VirtualTimestamps
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableChangefeedObservation.
func (in *TableChangefeedObservation) DeepCopy() *TableChangefeedObservation {
	if in == nil {
		return nil
	}
	out := new(TableChangefeedObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableChangefeedParameters) DeepCopyInto(out *TableChangefeedParameters) {
	*out = *in
	if in.ConnectionString != nil {
		in, out := &in.ConnectionString, &out.ConnectionString
		*out = new(string)
		**out = **in
	}
	if in.Consumer != nil {
		in, out := &in.Consumer, &out.Consumer
		*out = make([]ConsumerParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RetentionPeriod != nil {
		in, out := &in.RetentionPeriod, &out.RetentionPeriod
		*out = new(string)
		**out = **in
	}
	if in.TableID != nil {
		in, out := &in.TableID, &out.TableID
		*out = new(string)
		**out = **in
	}
	if in.TablePath != nil {
		in, out := &in.TablePath, &out.TablePath
		*out = new(string)
		**out = **in
	}
	if in.VirtualTimestamps != nil {
		in, out := &in.VirtualTimestamps, &out.VirtualTimestamps
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableChangefeedParameters.
func (in *TableChangefeedParameters) DeepCopy() *TableChangefeedParameters {
	if in == nil {
		return nil
	}
	out := new(TableChangefeedParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableChangefeedSpec) DeepCopyInto(out *TableChangefeedSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableChangefeedSpec.
func (in *TableChangefeedSpec) DeepCopy() *TableChangefeedSpec {
	if in == nil {
		return nil
	}
	out := new(TableChangefeedSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableChangefeedStatus) DeepCopyInto(out *TableChangefeedStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableChangefeedStatus.
func (in *TableChangefeedStatus) DeepCopy() *TableChangefeedStatus {
	if in == nil {
		return nil
	}
	out := new(TableChangefeedStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableIndex) DeepCopyInto(out *TableIndex) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableIndex.
func (in *TableIndex) DeepCopy() *TableIndex {
	if in == nil {
		return nil
	}
	out := new(TableIndex)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TableIndex) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableIndexInitParameters) DeepCopyInto(out *TableIndexInitParameters) {
	*out = *in
	if in.Columns != nil {
		in, out := &in.Columns, &out.Columns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ConnectionString != nil {
		in, out := &in.ConnectionString, &out.ConnectionString
		*out = new(string)
		**out = **in
	}
	if in.Cover != nil {
		in, out := &in.Cover, &out.Cover
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.TableID != nil {
		in, out := &in.TableID, &out.TableID
		*out = new(string)
		**out = **in
	}
	if in.TablePath != nil {
		in, out := &in.TablePath, &out.TablePath
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableIndexInitParameters.
func (in *TableIndexInitParameters) DeepCopy() *TableIndexInitParameters {
	if in == nil {
		return nil
	}
	out := new(TableIndexInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableIndexList) DeepCopyInto(out *TableIndexList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TableIndex, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableIndexList.
func (in *TableIndexList) DeepCopy() *TableIndexList {
	if in == nil {
		return nil
	}
	out := new(TableIndexList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TableIndexList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableIndexObservation) DeepCopyInto(out *TableIndexObservation) {
	*out = *in
	if in.Columns != nil {
		in, out := &in.Columns, &out.Columns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ConnectionString != nil {
		in, out := &in.ConnectionString, &out.ConnectionString
		*out = new(string)
		**out = **in
	}
	if in.Cover != nil {
		in, out := &in.Cover, &out.Cover
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.TableID != nil {
		in, out := &in.TableID, &out.TableID
		*out = new(string)
		**out = **in
	}
	if in.TablePath != nil {
		in, out := &in.TablePath, &out.TablePath
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableIndexObservation.
func (in *TableIndexObservation) DeepCopy() *TableIndexObservation {
	if in == nil {
		return nil
	}
	out := new(TableIndexObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableIndexParameters) DeepCopyInto(out *TableIndexParameters) {
	*out = *in
	if in.Columns != nil {
		in, out := &in.Columns, &out.Columns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ConnectionString != nil {
		in, out := &in.ConnectionString, &out.ConnectionString
		*out = new(string)
		**out = **in
	}
	if in.Cover != nil {
		in, out := &in.Cover, &out.Cover
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.TableID != nil {
		in, out := &in.TableID, &out.TableID
		*out = new(string)
		**out = **in
	}
	if in.TablePath != nil {
		in, out := &in.TablePath, &out.TablePath
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableIndexParameters.
func (in *TableIndexParameters) DeepCopy() *TableIndexParameters {
	if in == nil {
		return nil
	}
	out := new(TableIndexParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableIndexSpec) DeepCopyInto(out *TableIndexSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableIndexSpec.
func (in *TableIndexSpec) DeepCopy() *TableIndexSpec {
	if in == nil {
		return nil
	}
	out := new(TableIndexSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableIndexStatus) DeepCopyInto(out *TableIndexStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableIndexStatus.
func (in *TableIndexStatus) DeepCopy() *TableIndexStatus {
	if in == nil {
		return nil
	}
	out := new(TableIndexStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableInitParameters) DeepCopyInto(out *TableInitParameters) {
	*out = *in
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Column != nil {
		in, out := &in.Column, &out.Column
		*out = make([]ColumnInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ConnectionString != nil {
		in, out := &in.ConnectionString, &out.ConnectionString
		*out = new(string)
		**out = **in
	}
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = make([]FamilyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KeyBloomFilter != nil {
		in, out := &in.KeyBloomFilter, &out.KeyBloomFilter
		*out = new(bool)
		**out = **in
	}
	if in.PartitioningSettings != nil {
		in, out := &in.PartitioningSettings, &out.PartitioningSettings
		*out = make([]PartitioningSettingsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.PrimaryKey != nil {
		in, out := &in.PrimaryKey, &out.PrimaryKey
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ReadReplicasSettings != nil {
		in, out := &in.ReadReplicasSettings, &out.ReadReplicasSettings
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = make([]TTLInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableInitParameters.
func (in *TableInitParameters) DeepCopy() *TableInitParameters {
	if in == nil {
		return nil
	}
	out := new(TableInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableList) DeepCopyInto(out *TableList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Table, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableList.
func (in *TableList) DeepCopy() *TableList {
	if in == nil {
		return nil
	}
	out := new(TableList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TableList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableObservation) DeepCopyInto(out *TableObservation) {
	*out = *in
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Column != nil {
		in, out := &in.Column, &out.Column
		*out = make([]ColumnObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ConnectionString != nil {
		in, out := &in.ConnectionString, &out.ConnectionString
		*out = new(string)
		**out = **in
	}
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = make([]FamilyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KeyBloomFilter != nil {
		in, out := &in.KeyBloomFilter, &out.KeyBloomFilter
		*out = new(bool)
		**out = **in
	}
	if in.PartitioningSettings != nil {
		in, out := &in.PartitioningSettings, &out.PartitioningSettings
		*out = make([]PartitioningSettingsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.PrimaryKey != nil {
		in, out := &in.PrimaryKey, &out.PrimaryKey
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ReadReplicasSettings != nil {
		in, out := &in.ReadReplicasSettings, &out.ReadReplicasSettings
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = make([]TTLObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableObservation.
func (in *TableObservation) DeepCopy() *TableObservation {
	if in == nil {
		return nil
	}
	out := new(TableObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableParameters) DeepCopyInto(out *TableParameters) {
	*out = *in
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Column != nil {
		in, out := &in.Column, &out.Column
		*out = make([]ColumnParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ConnectionString != nil {
		in, out := &in.ConnectionString, &out.ConnectionString
		*out = new(string)
		**out = **in
	}
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = make([]FamilyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KeyBloomFilter != nil {
		in, out := &in.KeyBloomFilter, &out.KeyBloomFilter
		*out = new(bool)
		**out = **in
	}
	if in.PartitioningSettings != nil {
		in, out := &in.PartitioningSettings, &out.PartitioningSettings
		*out = make([]PartitioningSettingsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.PrimaryKey != nil {
		in, out := &in.PrimaryKey, &out.PrimaryKey
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ReadReplicasSettings != nil {
		in, out := &in.ReadReplicasSettings, &out.ReadReplicasSettings
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = make([]TTLParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableParameters.
func (in *TableParameters) DeepCopy() *TableParameters {
	if in == nil {
		return nil
	}
	out := new(TableParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableSpec) DeepCopyInto(out *TableSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableSpec.
func (in *TableSpec) DeepCopy() *TableSpec {
	if in == nil {
		return nil
	}
	out := new(TableSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableStatus) DeepCopyInto(out *TableStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableStatus.
func (in *TableStatus) DeepCopy() *TableStatus {
	if in == nil {
		return nil
	}
	out := new(TableStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Topic) DeepCopyInto(out *Topic) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Topic.
func (in *Topic) DeepCopy() *Topic {
	if in == nil {
		return nil
	}
	out := new(Topic)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Topic) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicConsumerInitParameters) DeepCopyInto(out *TopicConsumerInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.StartingMessageTimestampMs != nil {
		in, out := &in.StartingMessageTimestampMs, &out.StartingMessageTimestampMs
		*out = new(float64)
		**out = **in
	}
	if in.SupportedCodecs != nil {
		in, out := &in.SupportedCodecs, &out.SupportedCodecs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicConsumerInitParameters.
func (in *TopicConsumerInitParameters) DeepCopy() *TopicConsumerInitParameters {
	if in == nil {
		return nil
	}
	out := new(TopicConsumerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicConsumerObservation) DeepCopyInto(out *TopicConsumerObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.StartingMessageTimestampMs != nil {
		in, out := &in.StartingMessageTimestampMs, &out.StartingMessageTimestampMs
		*out = new(float64)
		**out = **in
	}
	if in.SupportedCodecs != nil {
		in, out := &in.SupportedCodecs, &out.SupportedCodecs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicConsumerObservation.
func (in *TopicConsumerObservation) DeepCopy() *TopicConsumerObservation {
	if in == nil {
		return nil
	}
	out := new(TopicConsumerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicConsumerParameters) DeepCopyInto(out *TopicConsumerParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.StartingMessageTimestampMs != nil {
		in, out := &in.StartingMessageTimestampMs, &out.StartingMessageTimestampMs
		*out = new(float64)
		**out = **in
	}
	if in.SupportedCodecs != nil {
		in, out := &in.SupportedCodecs, &out.SupportedCodecs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicConsumerParameters.
func (in *TopicConsumerParameters) DeepCopy() *TopicConsumerParameters {
	if in == nil {
		return nil
	}
	out := new(TopicConsumerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicInitParameters) DeepCopyInto(out *TopicInitParameters) {
	*out = *in
	if in.Consumer != nil {
		in, out := &in.Consumer, &out.Consumer
		*out = make([]TopicConsumerInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DatabaseEndpoint != nil {
		in, out := &in.DatabaseEndpoint, &out.DatabaseEndpoint
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.MeteringMode != nil {
		in, out := &in.MeteringMode, &out.MeteringMode
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PartitionWriteSpeedKbps != nil {
		in, out := &in.PartitionWriteSpeedKbps, &out.PartitionWriteSpeedKbps
		*out = new(float64)
		**out = **in
	}
	if in.PartitionsCount != nil {
		in, out := &in.PartitionsCount, &out.PartitionsCount
		*out = new(float64)
		**out = **in
	}
	if in.RetentionPeriodHours != nil {
		in, out := &in.RetentionPeriodHours, &out.RetentionPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.RetentionStorageMb != nil {
		in, out := &in.RetentionStorageMb, &out.RetentionStorageMb
		*out = new(float64)
		**out = **in
	}
	if in.SupportedCodecs != nil {
		in, out := &in.SupportedCodecs, &out.SupportedCodecs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicInitParameters.
func (in *TopicInitParameters) DeepCopy() *TopicInitParameters {
	if in == nil {
		return nil
	}
	out := new(TopicInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicList) DeepCopyInto(out *TopicList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Topic, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicList.
func (in *TopicList) DeepCopy() *TopicList {
	if in == nil {
		return nil
	}
	out := new(TopicList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TopicList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicObservation) DeepCopyInto(out *TopicObservation) {
	*out = *in
	if in.Consumer != nil {
		in, out := &in.Consumer, &out.Consumer
		*out = make([]TopicConsumerObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DatabaseEndpoint != nil {
		in, out := &in.DatabaseEndpoint, &out.DatabaseEndpoint
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MeteringMode != nil {
		in, out := &in.MeteringMode, &out.MeteringMode
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PartitionWriteSpeedKbps != nil {
		in, out := &in.PartitionWriteSpeedKbps, &out.PartitionWriteSpeedKbps
		*out = new(float64)
		**out = **in
	}
	if in.PartitionsCount != nil {
		in, out := &in.PartitionsCount, &out.PartitionsCount
		*out = new(float64)
		**out = **in
	}
	if in.RetentionPeriodHours != nil {
		in, out := &in.RetentionPeriodHours, &out.RetentionPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.RetentionStorageMb != nil {
		in, out := &in.RetentionStorageMb, &out.RetentionStorageMb
		*out = new(float64)
		**out = **in
	}
	if in.SupportedCodecs != nil {
		in, out := &in.SupportedCodecs, &out.SupportedCodecs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicObservation.
func (in *TopicObservation) DeepCopy() *TopicObservation {
	if in == nil {
		return nil
	}
	out := new(TopicObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicParameters) DeepCopyInto(out *TopicParameters) {
	*out = *in
	if in.Consumer != nil {
		in, out := &in.Consumer, &out.Consumer
		*out = make([]TopicConsumerParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DatabaseEndpoint != nil {
		in, out := &in.DatabaseEndpoint, &out.DatabaseEndpoint
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.MeteringMode != nil {
		in, out := &in.MeteringMode, &out.MeteringMode
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PartitionWriteSpeedKbps != nil {
		in, out := &in.PartitionWriteSpeedKbps, &out.PartitionWriteSpeedKbps
		*out = new(float64)
		**out = **in
	}
	if in.PartitionsCount != nil {
		in, out := &in.PartitionsCount, &out.PartitionsCount
		*out = new(float64)
		**out = **in
	}
	if in.RetentionPeriodHours != nil {
		in, out := &in.RetentionPeriodHours, &out.RetentionPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.RetentionStorageMb != nil {
		in, out := &in.RetentionStorageMb, &out.RetentionStorageMb
		*out = new(float64)
		**out = **in
	}
	if in.SupportedCodecs != nil {
		in, out := &in.SupportedCodecs, &out.SupportedCodecs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicParameters.
func (in *TopicParameters) DeepCopy() *TopicParameters {
	if in == nil {
		return nil
	}
	out := new(TopicParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicSpec) DeepCopyInto(out *TopicSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicSpec.
func (in *TopicSpec) DeepCopy() *TopicSpec {
	if in == nil {
		return nil
	}
	out := new(TopicSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicStatus) DeepCopyInto(out *TopicStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicStatus.
func (in *TopicStatus) DeepCopy() *TopicStatus {
	if in == nil {
		return nil
	}
	out := new(TopicStatus)
	in.DeepCopyInto(out)
	return out
}
