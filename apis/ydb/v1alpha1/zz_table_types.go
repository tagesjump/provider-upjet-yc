// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ColumnInitParameters struct {
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NotNull *bool `json:"notNull,omitempty" tf:"not_null,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ColumnObservation struct {
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NotNull *bool `json:"notNull,omitempty" tf:"not_null,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ColumnParameters struct {

	// +kubebuilder:validation:Optional
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NotNull *bool `json:"notNull,omitempty" tf:"not_null,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type FamilyInitParameters struct {
	Compression *string `json:"compression,omitempty" tf:"compression,omitempty"`

	Data *string `json:"data,omitempty" tf:"data,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FamilyObservation struct {
	Compression *string `json:"compression,omitempty" tf:"compression,omitempty"`

	Data *string `json:"data,omitempty" tf:"data,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FamilyParameters struct {

	// +kubebuilder:validation:Optional
	Compression *string `json:"compression" tf:"compression,omitempty"`

	// +kubebuilder:validation:Optional
	Data *string `json:"data" tf:"data,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type PartitionAtKeysInitParameters struct {
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`
}

type PartitionAtKeysObservation struct {
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`
}

type PartitionAtKeysParameters struct {

	// +kubebuilder:validation:Optional
	Keys []*string `json:"keys" tf:"keys,omitempty"`
}

type PartitioningSettingsInitParameters struct {
	AutoPartitioningByLoad *bool `json:"autoPartitioningByLoad,omitempty" tf:"auto_partitioning_by_load,omitempty"`

	AutoPartitioningBySizeEnabled *bool `json:"autoPartitioningBySizeEnabled,omitempty" tf:"auto_partitioning_by_size_enabled,omitempty"`

	AutoPartitioningMaxPartitionsCount *float64 `json:"autoPartitioningMaxPartitionsCount,omitempty" tf:"auto_partitioning_max_partitions_count,omitempty"`

	AutoPartitioningMinPartitionsCount *float64 `json:"autoPartitioningMinPartitionsCount,omitempty" tf:"auto_partitioning_min_partitions_count,omitempty"`

	AutoPartitioningPartitionSizeMb *float64 `json:"autoPartitioningPartitionSizeMb,omitempty" tf:"auto_partitioning_partition_size_mb,omitempty"`

	PartitionAtKeys []PartitionAtKeysInitParameters `json:"partitionAtKeys,omitempty" tf:"partition_at_keys,omitempty"`

	UniformPartitions *float64 `json:"uniformPartitions,omitempty" tf:"uniform_partitions,omitempty"`
}

type PartitioningSettingsObservation struct {
	AutoPartitioningByLoad *bool `json:"autoPartitioningByLoad,omitempty" tf:"auto_partitioning_by_load,omitempty"`

	AutoPartitioningBySizeEnabled *bool `json:"autoPartitioningBySizeEnabled,omitempty" tf:"auto_partitioning_by_size_enabled,omitempty"`

	AutoPartitioningMaxPartitionsCount *float64 `json:"autoPartitioningMaxPartitionsCount,omitempty" tf:"auto_partitioning_max_partitions_count,omitempty"`

	AutoPartitioningMinPartitionsCount *float64 `json:"autoPartitioningMinPartitionsCount,omitempty" tf:"auto_partitioning_min_partitions_count,omitempty"`

	AutoPartitioningPartitionSizeMb *float64 `json:"autoPartitioningPartitionSizeMb,omitempty" tf:"auto_partitioning_partition_size_mb,omitempty"`

	PartitionAtKeys []PartitionAtKeysObservation `json:"partitionAtKeys,omitempty" tf:"partition_at_keys,omitempty"`

	UniformPartitions *float64 `json:"uniformPartitions,omitempty" tf:"uniform_partitions,omitempty"`
}

type PartitioningSettingsParameters struct {

	// +kubebuilder:validation:Optional
	AutoPartitioningByLoad *bool `json:"autoPartitioningByLoad,omitempty" tf:"auto_partitioning_by_load,omitempty"`

	// +kubebuilder:validation:Optional
	AutoPartitioningBySizeEnabled *bool `json:"autoPartitioningBySizeEnabled,omitempty" tf:"auto_partitioning_by_size_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	AutoPartitioningMaxPartitionsCount *float64 `json:"autoPartitioningMaxPartitionsCount,omitempty" tf:"auto_partitioning_max_partitions_count,omitempty"`

	// +kubebuilder:validation:Optional
	AutoPartitioningMinPartitionsCount *float64 `json:"autoPartitioningMinPartitionsCount,omitempty" tf:"auto_partitioning_min_partitions_count,omitempty"`

	// +kubebuilder:validation:Optional
	AutoPartitioningPartitionSizeMb *float64 `json:"autoPartitioningPartitionSizeMb,omitempty" tf:"auto_partitioning_partition_size_mb,omitempty"`

	// +kubebuilder:validation:Optional
	PartitionAtKeys []PartitionAtKeysParameters `json:"partitionAtKeys,omitempty" tf:"partition_at_keys,omitempty"`

	// +kubebuilder:validation:Optional
	UniformPartitions *float64 `json:"uniformPartitions,omitempty" tf:"uniform_partitions,omitempty"`
}

type TTLInitParameters struct {
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`

	ExpireInterval *string `json:"expireInterval,omitempty" tf:"expire_interval,omitempty"`

	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type TTLObservation struct {
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`

	ExpireInterval *string `json:"expireInterval,omitempty" tf:"expire_interval,omitempty"`

	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type TTLParameters struct {

	// +kubebuilder:validation:Optional
	ColumnName *string `json:"columnName" tf:"column_name,omitempty"`

	// +kubebuilder:validation:Optional
	ExpireInterval *string `json:"expireInterval" tf:"expire_interval,omitempty"`

	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type TableInitParameters struct {

	// +mapType=granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	Column []ColumnInitParameters `json:"column,omitempty" tf:"column,omitempty"`

	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string,omitempty"`

	Family []FamilyInitParameters `json:"family,omitempty" tf:"family,omitempty"`

	KeyBloomFilter *bool `json:"keyBloomFilter,omitempty" tf:"key_bloom_filter,omitempty"`

	PartitioningSettings []PartitioningSettingsInitParameters `json:"partitioningSettings,omitempty" tf:"partitioning_settings,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	PrimaryKey []*string `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	ReadReplicasSettings *string `json:"readReplicasSettings,omitempty" tf:"read_replicas_settings,omitempty"`

	TTL []TTLInitParameters `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type TableObservation struct {

	// +mapType=granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	Column []ColumnObservation `json:"column,omitempty" tf:"column,omitempty"`

	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string,omitempty"`

	Family []FamilyObservation `json:"family,omitempty" tf:"family,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	KeyBloomFilter *bool `json:"keyBloomFilter,omitempty" tf:"key_bloom_filter,omitempty"`

	PartitioningSettings []PartitioningSettingsObservation `json:"partitioningSettings,omitempty" tf:"partitioning_settings,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	PrimaryKey []*string `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	ReadReplicasSettings *string `json:"readReplicasSettings,omitempty" tf:"read_replicas_settings,omitempty"`

	TTL []TTLObservation `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type TableParameters struct {

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// +kubebuilder:validation:Optional
	Column []ColumnParameters `json:"column,omitempty" tf:"column,omitempty"`

	// +kubebuilder:validation:Optional
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string,omitempty"`

	// +kubebuilder:validation:Optional
	Family []FamilyParameters `json:"family,omitempty" tf:"family,omitempty"`

	// +kubebuilder:validation:Optional
	KeyBloomFilter *bool `json:"keyBloomFilter,omitempty" tf:"key_bloom_filter,omitempty"`

	// +kubebuilder:validation:Optional
	PartitioningSettings []PartitioningSettingsParameters `json:"partitioningSettings,omitempty" tf:"partitioning_settings,omitempty"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// +kubebuilder:validation:Optional
	PrimaryKey []*string `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// +kubebuilder:validation:Optional
	ReadReplicasSettings *string `json:"readReplicasSettings,omitempty" tf:"read_replicas_settings,omitempty"`

	// +kubebuilder:validation:Optional
	TTL []TTLParameters `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

// TableSpec defines the desired state of Table
type TableSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TableParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TableInitParameters `json:"initProvider,omitempty"`
}

// TableStatus defines the observed state of Table.
type TableStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Table is the Schema for the Tables API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type Table struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.column) || (has(self.initProvider) && has(self.initProvider.column))",message="spec.forProvider.column is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.connectionString) || (has(self.initProvider) && has(self.initProvider.connectionString))",message="spec.forProvider.connectionString is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.path) || (has(self.initProvider) && has(self.initProvider.path))",message="spec.forProvider.path is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.primaryKey) || (has(self.initProvider) && has(self.initProvider.primaryKey))",message="spec.forProvider.primaryKey is a required parameter"
	Spec   TableSpec   `json:"spec"`
	Status TableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TableList contains a list of Tables
type TableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Table `json:"items"`
}

// Repository type metadata.
var (
	Table_Kind             = "Table"
	Table_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Table_Kind}.String()
	Table_KindAPIVersion   = Table_Kind + "." + CRDGroupVersion.String()
	Table_GroupVersionKind = CRDGroupVersion.WithKind(Table_Kind)
)

func init() {
	SchemeBuilder.Register(&Table{}, &TableList{})
}
