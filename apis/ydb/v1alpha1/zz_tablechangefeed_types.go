// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConsumerInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	StartingMessageTimestampMs *float64 `json:"startingMessageTimestampMs,omitempty" tf:"starting_message_timestamp_ms,omitempty"`

	SupportedCodecs []*string `json:"supportedCodecs,omitempty" tf:"supported_codecs,omitempty"`
}

type ConsumerObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	StartingMessageTimestampMs *float64 `json:"startingMessageTimestampMs,omitempty" tf:"starting_message_timestamp_ms,omitempty"`

	SupportedCodecs []*string `json:"supportedCodecs,omitempty" tf:"supported_codecs,omitempty"`
}

type ConsumerParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	StartingMessageTimestampMs *float64 `json:"startingMessageTimestampMs,omitempty" tf:"starting_message_timestamp_ms,omitempty"`

	// +kubebuilder:validation:Optional
	SupportedCodecs []*string `json:"supportedCodecs,omitempty" tf:"supported_codecs,omitempty"`
}

type TableChangefeedInitParameters struct {
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string,omitempty"`

	Consumer []ConsumerInitParameters `json:"consumer,omitempty" tf:"consumer,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	RetentionPeriod *string `json:"retentionPeriod,omitempty" tf:"retention_period,omitempty"`

	TableID *string `json:"tableId,omitempty" tf:"table_id,omitempty"`

	TablePath *string `json:"tablePath,omitempty" tf:"table_path,omitempty"`

	VirtualTimestamps *bool `json:"virtualTimestamps,omitempty" tf:"virtual_timestamps,omitempty"`
}

type TableChangefeedObservation struct {
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string,omitempty"`

	Consumer []ConsumerObservation `json:"consumer,omitempty" tf:"consumer,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	RetentionPeriod *string `json:"retentionPeriod,omitempty" tf:"retention_period,omitempty"`

	TableID *string `json:"tableId,omitempty" tf:"table_id,omitempty"`

	TablePath *string `json:"tablePath,omitempty" tf:"table_path,omitempty"`

	VirtualTimestamps *bool `json:"virtualTimestamps,omitempty" tf:"virtual_timestamps,omitempty"`
}

type TableChangefeedParameters struct {

	// +kubebuilder:validation:Optional
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string,omitempty"`

	// +kubebuilder:validation:Optional
	Consumer []ConsumerParameters `json:"consumer,omitempty" tf:"consumer,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionPeriod *string `json:"retentionPeriod,omitempty" tf:"retention_period,omitempty"`

	// +kubebuilder:validation:Optional
	TableID *string `json:"tableId,omitempty" tf:"table_id,omitempty"`

	// +kubebuilder:validation:Optional
	TablePath *string `json:"tablePath,omitempty" tf:"table_path,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualTimestamps *bool `json:"virtualTimestamps,omitempty" tf:"virtual_timestamps,omitempty"`
}

// TableChangefeedSpec defines the desired state of TableChangefeed
type TableChangefeedSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TableChangefeedParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TableChangefeedInitParameters `json:"initProvider,omitempty"`
}

// TableChangefeedStatus defines the observed state of TableChangefeed.
type TableChangefeedStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TableChangefeedObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TableChangefeed is the Schema for the TableChangefeeds API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type TableChangefeed struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.format) || (has(self.initProvider) && has(self.initProvider.format))",message="spec.forProvider.format is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mode) || (has(self.initProvider) && has(self.initProvider.mode))",message="spec.forProvider.mode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   TableChangefeedSpec   `json:"spec"`
	Status TableChangefeedStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TableChangefeedList contains a list of TableChangefeeds
type TableChangefeedList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TableChangefeed `json:"items"`
}

// Repository type metadata.
var (
	TableChangefeed_Kind             = "TableChangefeed"
	TableChangefeed_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TableChangefeed_Kind}.String()
	TableChangefeed_KindAPIVersion   = TableChangefeed_Kind + "." + CRDGroupVersion.String()
	TableChangefeed_GroupVersionKind = CRDGroupVersion.WithKind(TableChangefeed_Kind)
)

func init() {
	SchemeBuilder.Register(&TableChangefeed{}, &TableChangefeedList{})
}
